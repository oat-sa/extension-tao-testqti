/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2020 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * Autocomplete schema for xml-editor follow QTI 2.1 Specification
 * https://www.imsglobal.org/xsd/imsqti_v2p1.xsd
 *
 */
define([], function () {
    'use strict';
    // "xs:boolean"
    const BOOLEAN_TYPE = ['true', 'false'];
    // "cardinality.OutcomeDeclaration.Attr"
    const CARDINALITY_OUTCOME_DECLARATION_ATTR = ['multiple', 'ordered', 'record', 'single'];
    // "baseType.TestVariables.Attr"
    const BASE_TYPE_TEST_VARIABLES_ATTR = [
        'boolean',
        'directedPair',
        'duration',
        'file',
        'float',
        'identifier',
        'integer',
        'pair',
        'point',
        'string',
        'uri'
    ];
    // "View.Type"
    const VIEW_TYPE = ['author', 'candidate', 'proctor', 'scorer', 'testConstructor', 'tutor'];
    // "toleranceMode.Equal.Attr"
    const TOLERANCE_MODE_EQUAL_ATTR = ['absolute', 'exact', 'relative'];

    const complexTypes = {
        'AnyN.Type': {
            // description: `The anyN operator takes one or more sub-expressions each with a base-type of boolean and single cardinality. The result is a single boolean which is true if at least min of the sub-expressions are true and at most max of the sub-expressions are true. If more than n - min sub-expressions are false (where n is the total number of sub-expressions) or more than max sub-expressions are true then the result is false. If one or more sub-expressions are NULL then it is possible that neither of these conditions is satisfied, in which case the operator results in NULL. For example, if min is 3 and max is 4 and the sub-expressions have values {true,true,false,NULL} then the operator results in NULL whereas {true,false,false,NULL} results in false and {true,true,true,NULL} results in true. The result NULL indicates that the correct value for the operator cannot be determined.`
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                max: null,
                min: null
            }
        },
        'CustomOperator.Type': {
            // description: `The custom operator provides a namespaced extension mechanism for defining operations not currently supported by this specification.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                class: null,
                definition: null
            }
        },
        'Equal.Type': {
            // description: `The equal operator takes two sub-expressions which must both have single cardinality and have a numerical base-type. The result is a single boolean with a value of true if the two expressions are numerically equal and false if they are not. If either sub-expression is NULL then the operator results in NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                toleranceMode: TOLERANCE_MODE_EQUAL_ATTR,
                tolerance: null,
                includeLowerBound: BOOLEAN_TYPE,
                includeUpperBound: BOOLEAN_TYPE
            }
        },
        'EqualRounded.Type': {
            // description: `The equalRounded operator takes two sub-expressions which must both have single cardinality and have a numerical base-type. The result is a single boolean with a value of true if the two expressions are numerically equal after rounding and false if they are not. If either sub-expression is NULL then the operator results in NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                roundingMode: ['decimalPlaces', 'significantFigures'], // "roundingMode.EqualRounded.Attr"
                figures: null
            }
        },
        'FieldValue.Type': {
            // description: `The field-value operator takes a sub-expression with a record container value. The result is the value of the field with the specified fieldIdentifier. If there is no field with that identifier then the result of the operator is NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                fieldIdentifier: null
            }
        },
        'Index.Type': {
            // description: `The index operator takes a sub-expression with an ordered container value and any base-type. The result is the nth value of the container. The result has the same base-type as the sub-expression but single cardinality. The first value of a container has index 1, the second 2 and so on. n must be a positive integer. If n exceeds the number of values in the container (or the sub-expression is NULL) then the result of the index operator is NULL. If n is an identifier, it is the value of n at runtime that is used.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                n: null
            }
        },
        'Inside.Type': {
            // description: `The inside operator takes a single sub-expression which must have a baseType of point. The result is a single boolean with a value of true if the given point is inside the area defined by shape and coords. If the sub-expression is a container the result is true if any of the points are inside the area. If either sub-expression is NULL then the operator results in NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                shape: ['circle', 'default', 'ellipse', 'poly', 'rect'], // "shape.Inside.Attr"
                coords: null
            }
        },
        'LogicPair.Type': {
            // description: `Provides the ability to use a two variable operator e.g. greater than.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ]
        },
        'LogicSingle.Type': {
            // description: 'Provides the ability to use a single variable operator e.g. a 'not'.
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ]
        },
        'Logic0toMany.Type': {
            // description: `Provides the ability to use a multi variable operator e.g. an 'and' of the set of variables.`
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ]
        },
        'Logic1toMany.Type': {
            // description: `Provides the ability to use a multi variable operator e.g. an 'and' of the set of variables.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ]
        },
        'MathOperator.Type': {
            // description: `The mathOperator operator takes 1 or more sub-expressions which all have single cardinality and have numerical base-types. The trigonometric functions, sin, cos and tan, take one argument in radians, which evaluates to a single float. Other functions take one numerical argument. Further functions might take more than one numerical argument, e.g. atan2 (two argument arc tan). The result is a single float, except for the functions signum, floor and ceil, which return a single integer. If any of the sub-expressions is NULL, the result is NULL. If any of the sub-expressions falls outside the natural domain of the function called by mathOperator, e.g. log(0) or asin(2), then the result is NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                name: [
                    'sin',
                    'cos',
                    'tan',
                    'sec',
                    'csc',
                    'cot',
                    'asin',
                    'acos',
                    'atan',
                    'atan2',
                    'asec',
                    'acsc',
                    'acot',
                    'sinh',
                    'cosh',
                    'tanh',
                    'sech',
                    'csch',
                    'coth',
                    'log',
                    'ln',
                    'exp',
                    'abs',
                    'signum',
                    'floor',
                    'ceil',
                    'toDegrees',
                    'toRadians'
                ] // "name.MathOperator.Attr"
            }
        },
        'NumericLogic1toMany.Type': {
            // description: `Provides the ability to use a multi variable numeric-based operator e.g. a 'sum' of the set of variables.`,
            children: [
                'sum',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'null',
                'delete',
                'index',
                'power',
                'containerSize',
                'correct',
                'default',
                'integerDivide',
                'integerModulus',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'baseValue',
                'mapResponsePoint',
                'mapResponse',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ]
        },
        'PatternMatch.Type': {
            // description: `The patternMatch operator takes a sub-expression which must have single cardinality and a base-type of string. The result is a single boolean with a value of true if the sub-expression matches the regular expression given by pattern and false if it doesn't. If the sub-expression is NULL then the operator results in NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                pattern: null
            }
        },
        'Repeat.Type': {
            // description: `The repeat operator allows the filling of an ordered container. The result of a repeat operator is an ordered set of values calculated from the expressions. Values will be set in the associated container by a setTemplateValue expression. Each expression is calculated as many times as it is queried by numberRepeats.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                numberRepeats: null
            }
        },
        'StatsOperator.Type': {
            // description: `The statsOperator operator takes 1 sub-expression which is a container of multiple or ordered cardinality and has a numerical base-type. The result is a single float. If the sub-expression or any value contained therein is NULL, the result is NULL. If any value contained in the sub-expression is not a numerical value, then the result is NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                name: ['mean', 'sampleVariance', 'sampleSD', 'popVariance', 'popSD'] // "name.StatsOperator.Attr"
            }
        },
        'StringMatch.Type': {
            // description: `The stringMatch operator takes two sub-expressions which must have single and a base-type of string. The result is a single boolean with a value of true if the two strings match according to the comparison rules defined by the attributes below and false if they don't. If either sub-expression is NULL then the operator results in NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                caseSensitive: BOOLEAN_TYPE,
                substring: BOOLEAN_TYPE
            }
        },
        'Substring.Type': {
            // description: `The substring operator takes two sub-expressions which must both have an effective base-type of string and single cardinality. The result is a single boolean with a value of true if the first expression is a substring of the second expression and false if it isn't. If either sub-expression is NULL then the result of the operator is NULL.`,
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                caseSensitive: BOOLEAN_TYPE
            }
        }
    };

    const schema = {
        /*========================================================
        =            Declaration of the root elements            =
        =========================================================*/
        assessmentItem: {
            // type: "AssessmentItem.Type",
            // description: `An Assessment consists of one or more Items. An 'assessmentItem' is the binding form of an Item. An Item is the smallest exchangeable assessment object. An Item is more than a 'Question' in that it contains the question and instructions to be presented, the response processing to be applied to the candidates response(s) and then feedback that may be presented (including hints and solutions).`,
            children: [
                'responseDeclaration',
                'outcomeDeclaration',
                'templateDeclaration',
                'templateProcessing',
                'stylesheet',
                'itemBody',
                'responseProcessing',
                'modalFeedback',
                'apipAccessibility'
            ],
            attrs: {
                identifier: null,
                title: null,
                label: null,
                lang: null,
                toolName: null,
                toolVersion: null,
                adaptive: BOOLEAN_TYPE,
                timeDependent: BOOLEAN_TYPE
            }
        },
        assessmentSection: {
            // type: "AssessmentSection.Type",
            // description: `A Test consists of one or more Sections. An 'assessmentSection' is the binding form of a Section. More significantly, a Section is an aggregation of assessmentItems i.e. a set of Items that are used to achieve some co-ordnated assessment activity. An assessmentSection contains the rules that should be used to select and order the set of associated Sections and/or Items. Furthermore, the associated rubricBlock is used to present content that is relevant to all of the contained Sections and/or Items.`,
            children: [
                'preCondition',
                'branchRule',
                'itemSessionControl',
                'timeLimits',
                'selection',
                'ordering',
                'rubricBlock',
                // choice
                'include',
                'assessmentItemRef',
                'assessmentSection',
                'assessmentSectionRef'
            ],
            attrs: {
                identifier: null,
                required: BOOLEAN_TYPE,
                fixed: BOOLEAN_TYPE,
                title: null,
                visible: BOOLEAN_TYPE,
                keepTogether: BOOLEAN_TYPE
            }
        },
        assessmentTest: {
            // type: "AssessmentTest.Type",
            // description: `This is the container for the information about a Test. An 'assessmentTest' is the binding form of a Test. Each Test is composed of one or more TestParts (with each part consisting of at least one Section). Outcomes processing and feedback at the test level may be available.`,
            children: [
                'outcomeDeclaration',
                'timeLimits',
                'stylesheet',
                'testPart',
                'outcomeProcessing',
                'testFeedback'
            ],
            attrs: {
                identifier: null,
                title: null,
                toolName: null,
                toolVersion: null
            }
        },
        outcomeDeclaration: {
            // type="OutcomeDeclaration.Type",
            // description: `The OutcomeDeclaration complexType is the container for the declaration of outcome variables. Outcome variables are declared by outcome declarations. Their value is set either from s default given in the declaration itself or by a 'responseRule' during 'responseProcessing'.`,
            children: ['defaultValue', 'matchTable', 'interpolationTable'],
            attrs: {
                identifier: null,
                cardinality: CARDINALITY_OUTCOME_DECLARATION_ATTR,
                baseType: BASE_TYPE_TEST_VARIABLES_ATTR,
                view: VIEW_TYPE,
                interpretation: null,
                longInterpretation: null,
                normalMaximum: null,
                normalMinimum: null,
                masteryValue: null
            }
        },
        responseProcessing: {
            // type="ResponseProcessing.Type",
            // description: `The ResponseProcessing complexType is the container for response processing instructions. Response processing involves the application of a set of responseRules, including the testing of responseConditions and the evaluation of expressions involving the item variables. For delivery engines that are only designed to support very simple use cases the implementation of a system for carrying out this evaluation, conditional testing and processing may pose a barrier to the adoption of the specification.`,
            children: [
                'include',
                'responseCondition',
                'responseProcessingFragment',
                'setOutcomeValue',
                'exitResponse',
                'lookupOutcomeValue'
            ],
            attrs: {
                template: null,
                templateLocation: null
            }
        },
        /*=============================================================
        =            Declaration of the elements (Complex)            =
        =============================================================*/
        itemBody: {
            // type: "ItemBody.Type",
            // description: 'This is the container for the set of materials that are to be rendered as the question itself. The content model is XHTML-based and combines with it the range of QTI interactions (an interaction defines the nature of the question e.g. multple choice, hotspot, etc.). The rubric material can be interleaved with the block content.',
            children: [
                'rubricBlock',
                'positionObjectStage',
                'customInteraction',
                'drawingInteraction',
                'gapMatchInteraction',
                'matchInteraction',
                'graphicGapMatchInteraction',
                'hotspotInteraction',
                'graphicOrderInteraction',
                'selectPointInteraction',
                'graphicAssociateInteraction',
                'sliderInteraction',
                'choiceInteraction',
                'mediaInteraction',
                'hottextInteraction',
                'orderInteraction',
                'extendedTextInteraction',
                'uploadInteraction',
                'associateInteraction',
                'feedbackBlock',
                'templateBlock',
                'infoControl',
                // <xs:element ref="m:math" minOccurs="1" maxOccurs="1"/>
                'include', // <xs:element ref="xi:include" minOccurs="1" maxOccurs="1"/>'
                'pre',
                'h1',
                'h2',
                'h3',
                'h4',
                'h5',
                'h6',
                'p',
                'address',
                'dl',
                'ol',
                'hr',
                'ul',
                'blockquote',
                'table',
                'div'
            ],
            attrs: {
                id: null,
                class: null,
                label: null,
                'xml:lang': null
            }
        },
        responseDeclaration: {
            // type: "ResponseDeclaration.Type",
            // description: "The ResponseDeclaration complexType is used to contain the definition of the Response Variable that are to be bound to the interactions in the Item."
            children: ['defaultValue', 'correctResponse', 'mapping', 'areaMapping'],
            attrs: {
                identifier: null,
                cardinality: CARDINALITY_OUTCOME_DECLARATION_ATTR,
                baseType: BASE_TYPE_TEST_VARIABLES_ATTR
            }
        },
        templateDeclaration: {
            // type: "TemplateDeclaration.Type",
            // description: `The templateDeclaration complexType is the container for template declarations. Template declarations declare item variables that are to be used specifically for the purposes of cloning items. They can have their value set only during templateProcessing. They are referred to within the itemBody in order to individualize the clone and possibily also within the responseProcessing rules if the cloning process affects the way the item is scored.`
            children: ['defaultValue'],
            attrs: {
                identifier: null,
                cardinality: CARDINALITY_OUTCOME_DECLARATION_ATTR,
                baseType: BASE_TYPE_TEST_VARIABLES_ATTR,
                paramVariable: BOOLEAN_TYPE,
                mathVariable: BOOLEAN_TYPE
            }
        },
        templateProcessing: {
            // type: "TemplateProcessing.Type",
            // description: `The TemplateProcessing complexType is the container for the template processing rules. Template processing consists of one or more templateRules that are followed by the cloning engine or delivery system in order to assign values to the template variables. Template processing is identical in form to responseProcessing except that the purpose is to assign values to template variables, not outcome variables.`,
            children: [
                'setTemplateValue',
                'exitTemplate',
                'templateCondition',
                'setDefaultValue',
                'setCorrectResponse',
                'templateConstraint'
            ]
        },
        modalFeedback: {
            // type: "ModalFeedback.Type",
            // description: `The ModalFeedback complexType is the container for the item feedback to be presented to the candidate. Modal feedback is shown to the candidate directly following response processing. The value of an outcome variable is used in conjunction with the showHide and identifier attributes to determine whether or not the feedback is shown.`
            children: [
                'printedVariable',
                'hottext',
                'templateInline',
                'templateBlock',
                'pre',
                'h1',
                'h2',
                'h3',
                'h4',
                'h5',
                'h6',
                'p',
                'address',
                'dl',
                'ol',
                'ul',
                'br',
                'hr',
                'img',
                'object',
                'blockquote',
                'em',
                'a',
                'code',
                'span',
                'sub',
                'acronym',
                'big',
                'tt',
                'kbd',
                'q',
                'i',
                'dfn',
                'abbr',
                'strong',
                'sup',
                'var',
                'small',
                'samp',
                'b',
                'cite',
                'table',
                'div',
                'stylesheet',
                'apipAccessibility', // <xs:element ref="apip:apipAccessibility" minOccurs="0" maxOccurs="1"/>
                // <xs:element ref="m:math" minOccurs="1" maxOccurs="1"/>
                'include' // <xs:element ref="xi:include" minOccurs="1" maxOccurs="1"/>'
            ],
            attrs: {
                outcomeIdentifier: null,
                outcomeIdentifier: null,
                showHide: ['show', 'hide'],
                title: null
            }
        },
        preCondition: complexTypes['LogicSingle.Type'],
        and: complexTypes['Logic1toMany.Type'],
        anyN: complexTypes['AnyN.Type'],
        containerSize: complexTypes['LogicSingle.Type'],
        contains: complexTypes['LogicPair.Type'],
        customOperator: complexTypes['CustomOperator.Type'],
        delete: complexTypes['LogicPair.Type'],
        divide: complexTypes['LogicPair.Type'],
        durationGTE: complexTypes['LogicPair.Type'],
        durationLT: complexTypes['LogicPair.Type'],
        equal: complexTypes['Equal.Type'],
        equalRounded: complexTypes['EqualRounded.Type'],
        fieldValue: complexTypes['FieldValue.Type'],
        gcd: complexTypes['Logic1toMany.Type'],
        gt: complexTypes['LogicPair.Type'],
        gte: complexTypes['LogicPair.Type'],
        index: complexTypes['Index.Type'],
        inside: complexTypes['Inside.Type'],
        integerDivide: complexTypes['LogicPair.Type'],
        integerModulus: complexTypes['LogicPair.Type'],
        integerToFloat: complexTypes['LogicSingle.Type'],
        isNull: complexTypes['LogicSingle.Type'],
        lcm: complexTypes['Logic1toMany.Type'],
        lt: complexTypes['LogicPair.Type'],
        lte: complexTypes['LogicPair.Type'],
        match: complexTypes['LogicPair.Type'],
        mathOperator: complexTypes['MathOperator.Type'],
        max: complexTypes['Logic1toMany.Type'],
        min: complexTypes['Logic1toMany.Type'],
        member: complexTypes['LogicPair.Type'],
        multiple: complexTypes['Logic0toMany.Type'],
        not: complexTypes['LogicSingle.Type'],
        or: complexTypes['Logic1toMany.Type'],
        ordered: complexTypes['Logic0toMany.Type'],
        patternMatch: complexTypes['PatternMatch.Type'],
        power: complexTypes['LogicPair.Type'],
        product: complexTypes['Logic1toMany.Type'],
        random: complexTypes['LogicSingle.Type'],
        repeat: complexTypes['Repeat.Type'],
        round: complexTypes['LogicSingle.Type'],
        statsOperator: complexTypes['StatsOperator.Type'],
        stringMatch: complexTypes['StringMatch.Type'],
        substring: complexTypes['Substring.Type'],
        subtract: complexTypes['LogicPair.Type'],
        sum: complexTypes['NumericLogic1toMany.Type'],
        truncate: complexTypes['LogicSingle.Type'],
        branchRule: {
            // type: "BranchRule.Type",
            // description: `A branch-rule is a simple expression attached to an assessmentItemRef, assessmentSection or testPart that is evaluated after the item, section or part has been presented to the candidate. If the expression evaluates to true the test jumps forward to the item, section or part referred to by the target identifier. In the case of an item or section, the target must refer to an item or section in the same testPart that has not yet been presented. For testParts, the target must refer to another testPart.`
            children: [
                'and',
                'gt',
                'not',
                'lt',
                'gte',
                'lte',
                'or',
                'sum',
                'durationLT',
                'durationGTE',
                'subtract',
                'divide',
                'multiple',
                'ordered',
                'customOperator',
                'random',
                'numberIncorrect',
                'numberCorrect',
                'numberPresented',
                'numberResponded',
                'numberSelected',
                'substring',
                'equalRounded',
                'null',
                'delete',
                'match',
                'index',
                'power',
                'equal',
                'contains',
                'containerSize',
                'correct',
                'default',
                'anyN',
                'integerDivide',
                'integerModulus',
                'isNull',
                'member',
                'product',
                'round',
                'truncate',
                'fieldValue',
                'randomInteger',
                'randomFloat',
                'variable',
                'outcomeMinimum',
                'outcomeMaximum',
                'testVariables',
                'integerToFloat',
                'inside',
                'baseValue',
                'patternMatch',
                'mapResponsePoint',
                'mapResponse',
                'stringMatch',
                'repeat',
                'roundTo',
                'lcm',
                'gcd',
                'min',
                'max',
                'mathConstant',
                'statsOperator',
                'mathOperator'
            ],
            attrs: {
                target: null
            }
        },

        /*=============================================================
        =            Declaration of the elements (Derived)            =
        =============================================================*/
        stylesheet: {
            // type: 'StyleSheet.Type',
            // description: `This is used to associate an external stylesheet (it is assumed that this takes the form of a CSS file but other formats are permitted).`
        },

        /**
         * xi: namespace
         * http://www.imsglobal.org/xsd/w3/2001/XInclude.xsd
         */
        include: {
            children: ['fallback'],
            attrs: {
                href: null,
                parse: null,
                xpointer: null,
                encoding: null,
                accept: null,
                'accept-language': null
            }
        },
        fallback: {
            children: ['include']
        },

        /**
         * apip: namespace
         * http://www.imsglobal.org/profile/apip/apipv1p0/apipv1p0_qtiextv2p1_v1p0.xsd
         */
        apipAccessibility: {
            // type: 'APIPAccessibility.Type',
            // description: 'The APIPAccessibility complexType is the top level container for all of the APIP information used to describe the accessibility features to be added to a QTI XML description of a QTI Item. This optional information consists of: companion materials, the inclusion orders to be used rendering the content in trems of the new accessibility information, and the set of accessibility information itself.',
            children: ['companionMaterialsInfo', 'inclusionOrder', 'accessibilityInfo']
        }
    };

    return schema;
});
