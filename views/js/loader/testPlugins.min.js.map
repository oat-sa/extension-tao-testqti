{"version":3,"sources":["../../../taoTests/views/js/runner/plugin.js","css!taoQtiTestCss/plugins/key-navigation","../../../taoQtiTest/views/js/runner/plugins/content/accessibility/keyNavigation.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/dialog.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/exitMessages.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemAlertMessage.js","../../../taoQtiTest/views/js/runner/plugins/templates/button!tpl","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemInlineMessage.js","../../../taoQtiTest/views/js/runner/plugins/content/feedback/feedback.js","../../../taoQtiTest/views/js/runner/plugins/content/loading/loading.js","../../../taoQtiTest/views/js/runner/plugins/content/modalFeedback/modalFeedback.js","../../../taoQtiTest/views/js/runner/plugins/content/overlay/overlay.js","../../../taoQtiTest/views/js/runner/plugins/content/responsiveness/collapser.js","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock!tpl","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock.js","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity.js","../../../taoQtiTest/views/js/runner/plugins/controls/duration/duration.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar.js","../../../taoQtiTest/views/js/runner/plugins/controls/testState/testState.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timer!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timerComponent.js","../../../taoQtiTest/views/js/runner/helpers/map.js","../../../taoQtiTest/views/js/runner/helpers/currentItem.js","../../../taoQtiTest/views/js/runner/helpers/stats.js","../../../taoQtiTest/views/js/runner/helpers/messages.js","../../../taoQtiTest/views/js/runner/helpers/navigation.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timers!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timer.js","../../../taoQtiTest/views/js/runner/plugins/controls/title/title!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/title/title.js","../../../taoQtiTest/views/js/runner/plugins/controls/trace/itemTraceVariables.js","../../../taoQtiTest/views/js/runner/plugins/navigation/allowSkipping.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next/nextWarningHelper.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next.js","../../../taoQtiTest/views/js/runner/plugins/navigation/nextSection.js","../../../taoQtiTest/views/js/runner/plugins/navigation/previous.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigatorTree!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/review.js","../../../taoQtiTest/views/js/runner/plugins/navigation/skip.js","../../../taoQtiTest/views/js/runner/plugins/navigation/validateResponses.js","../../../taoQtiTest/views/js/runner/plugins/navigation/warnBeforeLeaving.js","../../../taoQtiTest/views/js/runner/plugins/security/disableRightClick.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerElimination/eliminator.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/tpl/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/answerMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/areaMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/calculator.js","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment.js","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/panel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/documentViewer.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/highlighter.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/compoundMask.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifier.js","../../../taoQtiTest/views/js/runner/plugins/tools/textToSpeech/textToSpeech!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/textToSpeech/textToSpeech!css","../../../taoQtiTest/views/js/runner/plugins/tools/textToSpeech/textToSpeech.js","../../../taoQtiTest/views/js/runner/plugins/tools/textToSpeech/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/zoom.js","../../../../../../../../onLayerEnd0.js"],"names":["define","_","pluginFactory","partialRight","hostName","$","keyNavigator","navigableDomElement","navigableGroupElement","shortcut","namespaceHelper","initToolbarNavigation","$navigationBar","$focusables","find","navigables","createFromDoms","length","id","replace","group","elements","defaultPosition","on","this","next","previous","cursor","navigable","getElement","click","mousedown","initHeaderNavigation","$headerElements","closest","loop","initNavigatorNavigation","testRunner","filtersNavigator","itemsNavigator","$filters","$trees","navigableFilters","navigableTrees","filterCursor","$panel","getAreaBroker","getPanelArea","$navigator","navigators","itemListingVisited","hasClass","keepState","defer","focus","first","last","origin","position","push","pos","data","forIn","i","$parent","parent","is","addClass","removeClass","initContentNavigation","itemNavigators","$content","getContentArea","filter","parents","each","$itemElement","union","initInteractionNavigation","propagateTab","$interaction","$inputs","interactionNavigables","interactionNavigators","$nav","off","initRubricNavigation","$itemElements","rubricNavigators","$rubricArea","initTestRunnerNavigation","document","activeElement","blur","createFromNavigators","name","init","self","getTestRunner","add","groupNavigator","isFocused","disable","after","enable","destroy","remove","getName","__","dialogAlert","dialogConfirm","shortcutRegistry","globalShortcut","pluginName","actionPrefix","closeAccept","dialog","trigger","hide","closeReject","closeLast","accept","handle","opened","addHandle","namespace","stack","message","reject","options","doAccept","e","reason","isFunction","doReject","context","dialogShortcut","removeHandle","closeDialogs","forEach","alerts","confirms","testData","getTestData","testConfig","config","pluginShortcuts","shortcuts","propagate","prevent","set","allowShortcuts","command","key","namespaceAll","before","msg","clear","Promise","install","isObject","resolve","getTestContext","itemIdentifier","disableItem","hider","$element","getContent","dom","modal","render","itemRunner","$modalsContainer","$container","_item","container","append","hb","template","Handlebars","depth0","helpers","partials","program1","stack1","helper","buffer","className","call","hash","functionType","escapeExpression","program3","icon","unless","text","inverse","noop","fn","program","program4","program6","compilerInfo","merge","control","title","buttonTpl","buttonData","end","createOkButton","dataType","isLast","$btn","preventDefault","$button","$navigationContainer","getNavigationArea","$inlineContainer","removeProp","prop","feedback","currentFeedback","closeCurrent","close","err","type","error","danger","warning","info","loadingBar","start","stop","module","inlineMessage","alertMessage","autoscroll","destroyFeedback","removed","renderedFeedbacks","storedFeedback","found","nextStep","defineMode","inline","inlineMode","messagePlugin","isDestroyed","inlineModalFeedback","createMessages","renderingQueue","bInlineMode","isBoolean","renderingToken","done","tFeedbacks","slice","stopImmediatePropagation","stopPropagation","shield","unshield","itemRef","$contentArea","pluginsConfig","plugins","overlayConfig","overlay","full","show","ns","noLabelCls","noLabelHoverCls","labelHiddenCls","separatorCls","defaults","collapseTools","collapseNavigation","collapseInOrder","hover","collapseOrder","$window","window","buildCollapsiblesList","allCollapsibles","getCollapsiblesFromConfig","getSortedCollapsiblesFromDom","getUnsortedCollapsiblesFromDom","getExtraWidth","expandedWidth","collapsedWidth","collapseCls","outerWidth","toggleCollapsibles","availableWidth","getAvailableWidth","previousAvailableWidth","expandInOrder","toCollapse","collapsiblesCopy","clone","collapseNeeded","shift","$elements","getToolbarWidth","forEachRight","toExpand","expandPossible","extraWidth","$actionsBar","width","$toolbox","$navigation","getControlsFromDom","$controls","selector","not","compact","map","_allCollapsibles","order","ctrl","dataset","substring","search","forOwn","collapser","areaBroker","getArea","getToolboxArea","throttle","Infinity","containerTpl","blankifyLinks","attr","mathify","require","MathJax","Hub","Queue","rubrics","html","then","empty","helperMissing","state","pollingFactory","waitingDialog","connectivityTpl","checkInterval","waiting","proxy","getProxy","displayWaitingDialog","pauseResolve","waitContent","proceedContent","endWait","polling","action","telemetry","catch","interval","autoStart","isOnline","source","getState","setState","isOffline","generalErr","isConnectivityError","loadItem","finish","reasons","comment","getControlArea","timerFactory","store","refresh","shouldClearStorage","getConfig","serviceCallId","durationStore","getItemDuration","attemptId","test","getItem","Error","stopwatch","itemAttemptId","attempt","duration","elapsed","tick","isNumber","setItem","params","itemDuration","addCallActionParams","getDuration","removeStore","resume","pause","progressTpl","progressUpdater","testContext","testMap","progressConfig","updater","percentage","total","Math","max","numberItems","ratio","floor","numberCompleted","label","getTestPart","parts","testPartId","getTestSection","testPart","sections","sectionId","progressScopeCounter","itemPosition","reduce","acc","section","size","items","testSection","positionInPart","positionInSection","counter","scope","currentPosition","showTotal","indicator","$progressLabel","$progressControl","progressIndicator","update","progressData","getTestMap","progressbar","use","req","res","isEmpty","messages","channel","isLeaving","running","moment","timeEncoder","timerTpl","hasAnimationFrame","precision","timerTypes","item","timerComponentFactory","isPlainObject","TypeError","contains","remaining","warnings","$display","encode","requestAnimationFrame","warn","findLast","showed","isFinite","point","humanize","val","value","getEmptyStats","questions","answered","flagged","viewed","getJumps","jumps","getParts","getSections","result","part","getNextSections","canList","getJump","getPart","partName","getSection","sectionName","itemName","jump","identifier","getItemAt","getTestStats","stats","getPartStats","getSectionStats","getScopeStats","getScopeMap","scopeMap","cloneDeep","computeItemStats","computeStats","getScopeMapFromContext","getItemPart","getItemSection","getItemIdentifier","callback","updateItemStats","informational","collection","patch","currentMap","partialMap","targetMap","partialPart","targetPartId","partialSection","targetSectionId","reindex","lastPartId","lastSectionId","offset","offsetPart","offsetSection","sortBy","index","createJumpTable","responseCardinalities","single","multiple","ordered","record","currentItemHelper","getDeclarations","runner","responses","getResponseDeclaration","declaration","attributes","toResponse","baseType","cardinality","mappedCardinality","response","isString","v","base","isQtiValueNull","isQuestionAnswered","defaultValue","isEqual","isAnswered","partially","getResponses","count","mapHelper","getInstantStats","isItemCurrentlyAnswered","itemAnswered","statsHelper","getExitMessage","itemsCountMessage","messageEnabled","enableUnansweredItemsWarning","getUnansweredItemsWarning","trim","unansweredCount","flaggedCount","toString","navigationHelper","isLeavingSection","direction","sectionStats","nbItems","isLeavingTestPart","testPartStats","isLastOf","isFirst","isFirstOf","getSiblingItems","directions","itemId","siblings","itemChain","ref","parseInt","link","times","getNextItem","getPreviousItem","isMovingToNextItem","isMovingToPreviousItem","isJumpingToItem","timerBoxTpl","timerRefresh","exitMessage","isTimedSection","timeConstraints","some","constraint","qtiClassName","doEnable","doDisable","toggleZenMode","$toggler","storage","removeItem","toggleToggler","timers","itemStates","timerWarning","displayedTimers","extraTime","consumedExtraTime","lastConsumedExtraTime","getRemainingExtraTime","extra","setRemainingTime","timerConfig","regular","getTimerConfig","timeConstraint","timer","closestPreviousWarning","isTimeout","itemSessionState","interacting","seconds","leaveTimedSection","closed","removeTimer","omit","addTimer","updateTimers","checkStorage","timerUpdatePromises","consumed","timerExists","addAndResolve","savedTime","all","timeStore","zenMode","timeoutScope","timeoutRef","elapsedExtraTime","timeout","regularVal","displayedVal","runTimeout","abs","testDataBeforeMove","movePromise","endTestWarning","noExitTimedSectionWarning","keepUpToTimeout","buttons","labels","ok","cancel","program2","titles","titleTpl","createElement","isDeepestSectionVisible","sectionTitle","replaceWith","storeFactory","timestamp","Date","now","onError","variables","tracesStore","ITEM_START_TIME_CLIENT","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","format","callItemAction","traceData","JSON","stringify","isInteracting","getItemState","enableAllowSkipping","allowSkipping","toBoolean","nextWarningHelper","shouldWarnBeforeNext","nextItemWarning","itemCanBeTriedAtWill","isLinear","remainingAttempts","isNextItemInLinearPart","nextPart","isLastOfPart","shouldWarnBeforeEnd","shouldWarnOnTestEnd","shouldWarnOnPartChange","warnBeforeNext","shouldWarnForUnansweredItems","hasUnanswered","hasFlagged","unansweredOnly","nextPartWarning","warnBeforeEnd","updateElement","doNext","enableNav","testOptions","nextItemPosition","unansweredWarning","warningScope","warningHelper","partial","triggerNextAction","avoidInput","toggle","nextSection","nextSectionWarning","bind","doPrevious","previousItemWarning","canDoPrevious","previousSection","previousPart","isCatAdaptive","canMoveBackward","program5","program7","program9","program11","program13","hidden","showLegend","active","program8","apply","program10","cls","component","navigatorTpl","navigatorTreeTpl","navigatorFactory","flagItem","$item","_cssCls","navigator","setItemFlag","navigatorApi","_defaults","setTemplate","controls","autoScroll","$component","$filterBar","_selectors","filterBar","$tree","tree","$infoAnswered","infoAnswered","$infoViewed","infoViewed","$infoAll","tabInfoAll","$infoUnanswered","infoUnanswered","tabInfoUnanswered","$infoFlagged","infoFlagged","tabInfoFlagged","$linearState","linearState","updateConfig","collapseHandle","toggleClass","collapsed","openSelected","infoPanelLabels","togglePanel","infoPanel","partLabels","openOnly","sectionLabels","itemLabels","event","$target","disabled","target","canFlag","icons","unseen","select","linearStart","mode","currentFilter","canCollapse","preventsUnseen","collapsible","_iconCls","itemIcons","activeItem","counters","actives","collapsiblePanels","notFlagged","notAnswered","notInformational","_filterMap","unanswered","join","filtered","updateStats","flag","getProgressionTotal","progression","jquery","writeCount","criteria","$items","filterCb","$section","$itemsFound","$filtered","scopeClass","scopedMap","getScopedMap","totalQuestions","itm","$place","display","min","open","selected","hierarchy","parentsUntil","previousPosition","$previous","root","panel","collapseSelector","getFlagItemButtonData","itemFlagged","getToggleButtonData","updateButton","button","turnOff","turnOn","markReview","setFlag","unsetFlag","showReview","hideReview","isPluginAllowed","navigatorConfig","enabled","reviewScreen","callTestAction","flagItemButton","flagCurrentItem","forcedState","isHidden","isUndefined","explicitlyHidden","toggleButton","previousItemPosition","review","getToolbox","createEntry","defaultOpen","$panelContainer","skip","doSkip","enableValidateResponses","validateResponses","warnMessage","warnListener","returnValue","addEventListener","removeEventListener","rightClickEvents","eventName","defaultConfig","removeEliminationsOnClose","restoreEliminationsOnOpen","isPluginEnabled","eliminator","togglePluginButton","togglePlugin","$choiceInteractions","isEliminable","enableEliminator","disableEliminator","$choices","input","querySelector","wasEliminated","classList","setAttribute","checked","removeAttribute","statifier","componentFactory","maskTpl","createMask","maskApi","mask","answerMasking","allMasks","reveal","getContainer","removeAttr","$qtiChoices","$choice","getMasksState","setMasksState","masked","answerMaskingFactory","restoreStateOnToggle","restoreStateOnMove","itemContainsChoiceInteraction","disableMasking","enableMasking","pluginConfig","movableComponent","areaMaskingTpl","maskingComponentFactory","maskComponent","preview","delay","previewDelay","stackingScope","foo","addMask","masks","without","x","y","isEnabled","areaMasking","invoke","calculatorFactory","_default","height","top","left","calculator","buildCalculator","calcTpl","renderTo","$calculatorContainer","draggableContainer","alternativeTemplate","toggleCalculator","allowIn","stackerFactory","commentTpl","allowComment","toggleComment","$form","$input","stacker","bringToFront","appendTo","$cancel","$submit","autoBringToFront","content","viewerFactory","pdfViewer","panelTpl","showPanel","plugin","debounce","resizeViewer","hidePanel","hideIfVisible","isVisible","initPanelEvents","stopEvents","hideViewer","$overlay","viewer","setSize","registerProvider","displayViewer","$title","load","fitToWidth","allowSearch","originalEvent","detail","highlighterFactory","getAllRanges","allRanges","selection","rangeCount","getRangeAt","getSelection","isHighlighting","itemsHighlights","highlightHelper","containerSelector","isCollapsed","highlightRanges","removeAllRanges","toggleHighlighting","bool","saveHighlight","getHighlightIndex","restoreHighlight","highlightFromIndex","clearHighlights","highlighter","buttonMain","buttonRemove","themeHandler","changeTheme","themeId","$qtiItem","previousTheme","selectedTheme","themesConfig","get","availableThemes","defaultTheme","allMenuEntries","default","available","theme","menuButton","createMenu","themeEntry","setMenuId","turnOffAll","toggleMenu","itemThemesStore","itemThemeId","menuEntry","getId","eventifier","makePlaceable","makeDraggable","makeResizable","makeStackable","constrains","defaultDimensions","outerHeight","innerWidth","innerHeight","outerX","outerY","innerX","innerY","defaultOptions","dragMinWidth","dragMinHeight","resizeHandleSize","innerDragHeight","stackingOptions","dimensions","maskConfig","maskAPI","place","placeOverlay","styleResizableEdges","edges","isResizable","edgeId","bringAllToFront","innerDrag","closer","invokeOnOverlays","invokeOnMasks","beforeResize","onResize","applyTransformsToOverlays","applyTransformsToInnerDrag","applyTransformsToCloser","createOverlay","overlayAPI","transformOverlay","_sizeBackup","getSize","_posBackup","getPosition","moveTo","restoreOverlay","appendVisualGuides","borderWidth","borderOffset","visualGuides","$maskBg","$innerWindow","css","border-top-width","topHeight","border-right-width","rightWidth","border-bottom-width","bottomHeight","border-left-width","leftWidth","removeVisualGuides","pointerEventsPrefix","PointerEvent","xOffsetRelative","yOffsetRelative","invokeOnAll","applyTransforms","createInnerDragHandle","dragRestriction","rect","fixedXY","allParts","nw","minWidth","minHeight","minBottomHeight","$dragIcon","class","applyTransformsToMasks","createCloser","$closeIcon","args","invokeOn","correctTransforms","setTopHeight","newHeight","newY","fromTop","setRightWidth","newWidth","newX","fromLeft","setBottomHeight","setLeftWidth","createCompoundMask","createPart","right","bottom","maxHeight","maxWidth","partConfig","assign","createVisualGuides","compoundMask","setTransforms","dim","getDimensions","compoundMaskFactory","$qtiContent","lineHeight","ceil","parseFloat","maskOptions","paddingLeft","paddingTop","textPadding","containerWidthHasChanged","newDimensions","lineReader","toggleMask","transformMask","openMask","closeMask","$maskContainer","level","magnifierPanelTpl","magnifierPanelFactory","scrollInClone","scrollData","$clonedTarget","$clone","scrollTop","scrollLeft","setScrollingListener","scrollingListenerCallback","removeScrollingListener","applyScrolling","scrolling","adjustZoomLevel","zoomLevelMin","zoomLevelMax","applyZoomLevel","$inner","transform","zoomLevel","showZoomLevel","$newZoomLevel","$zoomLevel","updateMaxSize","magnifierPanel","maxRatio","applySize","targetWidth","targetHeight","updateZoom","dx","dy","zoomAt","createObserver","observer","MutationObserver","updateMagnifier","startObserver","observe","childList","characterData","subtree","stopObserver","disconnect","translateMagnifier","coordinate","actualSize","magnifierSize","delta","getElementFromPoint","el","elementFromPoint","findSourceNode","node","$node","$root","indexes","$this","pop","children","eq","initConfig","levelMin","levelMax","zoomLevelStep","levelStep","baseSize","zoomSize","$initTarget","getZoomLevel","getTarget","setTarget","$newTarget","$viewTarget","zoomTo","zoomBy","step","zoomIn","zoomOut","translate","debounceDelay","scrollId","scrollingTop","uniqueId","scrollingDelay","screenRatio","pageX","pageY","screen","defaultBaseSize","defaultLevelMin","defaultLevelMax","defaultLevel","zoomMin","zoomMax","zoomStep","getMagnifierPanel","hideMagnifier","magnifier","toggleMagnifier","showMagnifier","tpl","speed","volume","texthelpMapping","properties","pageCompleteCallback","texthelpSpeechStream","volumeValue","functions","barDynamicStart","barCacheInit","barInit","cachePage","disableSpeech","enableClickToSpeak","enableContinuousReading","enableSpeech","event_pause","event_play","getSpeed","getVoice","hasReachedEnd","isPaused","isSpeaking","isTextSelectedForPlay","isUsingMathjax","setSpeedValue","setUsingMath","setUsingMathjax","setUsingMaths","setVolumeValue","stopSpeech","tagSentences","userParameters","contentArea","ignoreEls","toolbarUrl","_exec","arguments","_get","property","_set","_init","updateTexthelpCache","deliveryId","tss","g_strBookId","g_strPageId","play","setSpeed","setVolume","clickToSpeak","g_strServer","g_strBuild","$action","noUiSlider","animate","connected","range","$el","ttsFactory","ttsButton","tts","$navigationArea","ttsEl","textToSpeech","transformer","standard","increment","threshold","lower","upper","setZoomLevel","setTransformOrigin","scale","resetZoom","reset","forceRepaint","sel","style","offsetHeight","isConfigured","zoom","zoomAction","dir","sx","sy","inc","$zoomTarget","getBoundingClientRect","buttonZoomOut","buttonZoomIn","in","out","c","d","a","s","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"testPlugins.min.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoTests/runner/plugin',['lodash', 'core/plugin'], function(_, pluginFactory){\n    'use strict';\n\n    /**\n     * A pluginFactory configured for the test runner\n     * @returns {Function} the preconfigured plugin factory\n     */\n    return _.partialRight(pluginFactory, {\n        //alias getHost to getTestRunner\n        hostName : 'testRunner'\n    });\n});\n\n","\ndefine('css!taoQtiTestCss/plugins/key-navigation',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Content Plugin : Navigate through the item focusable elements using the keyboard\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/accessibility/keyNavigation',[\n    'jquery',\n    'lodash',\n    'ui/keyNavigation/navigator',\n    'ui/keyNavigation/navigableDomElement',\n    'ui/keyNavigation/navigableGroupElement',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'css!taoQtiTestCss/plugins/key-navigation'\n], function ($, _, keyNavigator, navigableDomElement, navigableGroupElement, shortcut, namespaceHelper, pluginFactory) {\n    'use strict';\n\n    /**\n     * Init the navigation in the toolbar\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initToolbarNavigation(){\n        var $navigationBar = $('.bottom-action-bar');\n        var $focusables = $navigationBar.find('.action:not(.btn-group):visible, .action.btn-group .li-inner:visible');\n        var navigables = navigableDomElement.createFromDoms($focusables);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'bottom-toolbar',\n                replace : true,\n                group : $navigationBar,\n                elements : navigables,\n                //start from the last button \"goto next\"\n                defaultPosition : navigables.length - 1\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click().mousedown();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the header block\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initHeaderNavigation(){\n        //need global selector as currently no way to access delivery frame from test runner\n        var $headerElements = $('[data-control=\"exit\"]:visible a');\n        var navigables = navigableDomElement.createFromDoms($headerElements);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'header-toolbar',\n                group : $headerElements.closest('.infoControl'),\n                elements : navigables,\n                loop : true,\n                replace : true\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the review panel\n     *\n     * @param {Object} testRunner\n     * @returns {Array} the keyNavigator of the main navigation group\n     */\n    function initNavigatorNavigation(testRunner){\n\n        var $panel = testRunner.getAreaBroker().getPanelArea();\n        var $navigator = $panel.find('.qti-navigator');\n        var navigators = [];\n        var filtersNavigator;\n        var itemsNavigator;\n        var $filters, $trees, navigableFilters, navigableTrees;\n\n        //the tag to identify if the item listing has been browsed, to only \"smart jump\" to active item only on the first visit\n        var itemListingVisited = false;\n        //the position of the filter in memory, to only \"smart jump\" to active item only on the first visit\n        var filterCursor;\n\n        if($navigator.length && !$navigator.hasClass('disabled')){\n            $filters = $navigator.find('.qti-navigator-filters .qti-navigator-filter');\n            navigableFilters = navigableDomElement.createFromDoms($filters);\n            if (navigableFilters.length) {\n                filtersNavigator = keyNavigator({\n                    keepState : true,\n                    id : 'navigator-filters',\n                    replace : true,\n                    elements : navigableFilters,\n                    group : $navigator\n                }).on('right', function(){\n                    this.next();\n                }).on('left', function(){\n                    this.previous();\n                }).on('down', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            if(itemListingVisited){\n                                itemsNavigator.focus().first();\n                            }else{\n                                itemsNavigator.focus();\n                            }\n                        });\n                    }\n                }).on('up', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            itemsNavigator.last();\n                        });\n                    }\n                }).on('focus', function(cursor, origin){\n                    //activate the tab in the navigators\n                    cursor.navigable.getElement().click();\n\n                    //reset the item listing browsed tag whenever the focus on the filter happens after a focus on another element\n                    if((filterCursor && filterCursor.position !== cursor.position) || origin){\n                        itemListingVisited = false;\n                    }\n                    //set the filter cursor in memory\n                    filterCursor = cursor;\n                });\n                navigators.push(filtersNavigator);\n            }\n\n            $trees = $navigator.find('.qti-navigator-tree .qti-navigator-item:not(.unseen) .qti-navigator-label');\n            navigableTrees = navigableDomElement.createFromDoms($trees);\n            if (navigableTrees.length) {\n                //instantiate a key navigator but do not add it to the returned list of navigators as this is not supposed to be reached with tab key\n                itemsNavigator = keyNavigator({\n                    id : 'navigator-items',\n                    replace : true,\n                    elements : navigableTrees,\n                    defaultPosition : function defaultPosition(navigables){\n                        var pos = 0;\n                        if(filterCursor && filterCursor.navigable.getElement().data('mode') !== 'flagged'){\n                            _.forIn(navigables, function(navigable, i){\n                                var $parent = navigable.getElement().parent('.qti-navigator-item');\n                                //find the first active and visible item\n                                if($parent.hasClass('active') && $parent.is(':visible')){\n                                    pos = i;\n                                    return false;\n                                }\n                            });\n                        }\n                        return pos;\n                    }\n                }).on('down', function(){\n                    this.next();\n                }).on('up', function(){\n                    this.previous();\n                }).on('right', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().next();\n                    }\n                }).on('left', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().previous();\n                    }\n                }).on('activate', function(cursor){\n                    cursor.navigable.getElement().click();\n                }).on('lowerbound upperbound', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus();\n                    }\n                }).on('focus', function(cursor){\n                    itemListingVisited = true;\n                    cursor.navigable.getElement().parent().addClass('key-navigation-highlight');\n                }).on('blur', function(cursor){\n                    cursor.navigable.getElement().parent().removeClass('key-navigation-highlight');\n                });\n            }\n\n        }\n        return navigators;\n    }\n\n    /**\n     * Init the navigation in the item content\n     * Navigable item content are interaction choices and body element with the special class \"key-navigation-focusable\"\n     * It returns an array of keyNavigators as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initContentNavigation(testRunner){\n\n        var itemNavigators = [];\n        var $content = testRunner.getAreaBroker().getContentArea();\n\n        //the item focusable body elements are considered scrollable\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\n        $content.find('.key-navigation-focusable,.qti-interaction').filter(function(){\n            //filter out interaction as it will be managed separately\n            return (!$(this).parents('.qti-interaction').length);\n        }).each(function(){\n            var $itemElement = $(this);\n            if($itemElement.hasClass('qti-interaction')){\n                itemNavigators = _.union(itemNavigators, initInteractionNavigation($itemElement));\n            }else{\n                itemNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($itemElement),\n                    group : $itemElement,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        return itemNavigators;\n    }\n\n    /**\n     * Init interaction key navigation from the interaction navigator\n     *\n     * @param {JQuery} $interaction - the interaction container\n     * @returns {Array} array of navigators created from interaction container\n     */\n    function initInteractionNavigation($interaction){\n\n        var $inputs;\n        var interactionNavigables;\n        var interactionNavigators = [];\n\n        //add navigable elements from prompt\n        $interaction.find('.key-navigation-focusable').each(function(){\n            var $nav = $(this);\n            if(!$nav.closest('.qti-choice').length){\n                interactionNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($nav),\n                    group : $nav,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        //reset interaction custom key navigation to override the behaviour with the new one\n        $interaction.off('.keyNavigation');\n\n        //search for inputs that represent the interaction focusable choices\n        $inputs = $interaction.is(':input') ? $interaction : $interaction.find(':input');\n        interactionNavigables = navigableDomElement.createFromDoms($inputs);\n\n        if (interactionNavigables.length) {\n            interactionNavigators.push(keyNavigator({\n                elements : interactionNavigables,\n                group : $interaction,\n                loop : false\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            }).on('focus', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').addClass('key-navigation-highlight');\n            }).on('blur', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').removeClass('key-navigation-highlight');\n            }));\n        }\n\n        return interactionNavigators;\n    }\n\n    /**\n     * Init the navigation of test rubric blocks\n     * It returns an array of keyNavigator ids as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initRubricNavigation(){\n        var $itemElements;\n        var rubricNavigators = [];\n        var $rubricArea = $('#qti-rubrics');\n\n        $itemElements = $rubricArea.find('.qti-rubricBlock');\n        $itemElements.each(function(){\n            var $itemElement = $(this);\n            var id = 'rubric_element_navigation_group_'+rubricNavigators.length;\n\n            rubricNavigators.push(keyNavigator({\n                id : id,\n                elements : navigableDomElement.createFromDoms($itemElement),\n                group : $itemElement,\n                replace : true\n            }));\n        });\n\n        return rubricNavigators;\n    }\n\n    /**\n     * Init test runner navigation\n     * @param testRunner\n     * @returns {*}\n     */\n    function initTestRunnerNavigation(testRunner){\n\n        var navigators;\n\n        //blur current focused element, to reinitialize keyboard navigation\n        if (document.activeElement){\n            document.activeElement.blur();\n        }\n\n        navigators = _.union(\n            initRubricNavigation(testRunner),\n            initContentNavigation(testRunner),\n            initToolbarNavigation(testRunner),\n            initNavigatorNavigation(testRunner),\n            initHeaderNavigation(testRunner)\n        );\n\n        navigators = navigableGroupElement.createFromNavigators(navigators);\n\n        return keyNavigator({\n            id : 'test-runner',\n            replace : true,\n            loop : true,\n            elements : navigators,\n        }).on('tab', function(){\n            this.next();\n        }).on('shift+tab', function(){\n            this.previous();\n        });\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'keyNavigation',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            shortcut.add('tab shift+tab', function(){\n                if(!self.groupNavigator.isFocused()){\n                    self.groupNavigator.focus();\n                }\n            });\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .after('renderitem', function () {\n                    self.groupNavigator = initTestRunnerNavigation(testRunner);\n                    self.enable();\n                })\n                .on('unloaditem', function () {\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            if(this.groupNavigator) {\n                this.groupNavigator.destroy();\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/dialog',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/dialog/alert',\n    'ui/dialog/confirm',\n    'util/shortcut/registry',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, dialogAlert, dialogConfirm, shortcutRegistry, globalShortcut, namespaceHelper){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'dialog';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var alerts = [];\n            var confirms = [];\n            var opened = [];\n            var dialogShortcut = shortcutRegistry($('body'), {\n                propagate: false,\n                prevent: true\n            });\n\n            /**\n             * Closes a dialog with accept\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeAccept(dialog) {\n                // TODO: improve the dialog implementation in order to provide a better API\n                dialog.trigger('okbtn.modal').hide();\n            }\n\n            /**\n             * Closes a dialog with rejection\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeReject(dialog) {\n                dialog.hide();\n            }\n\n            /**\n             * Closes the last opened dialog\n             * @param {Boolean} accept Whether the dialog should be accepted or not\n             * @param {String} [shortcut] The shortcut that caused the action\n             */\n            function closeLast(accept, shortcut) {\n                var handle = opened.length && opened[opened.length - 1];\n                if (handle) {\n                    handle.shortcut = shortcut;\n                    if (accept) {\n                        closeAccept(handle.dialog);\n                    } else {\n                        closeReject(handle.dialog);\n                    }\n                }\n            }\n\n            /**\n             * Add dialog on top of the provided stack\n             * @param {String} namespace - The event namespace that scope the dialog\n             * @param {Array} stack - The dialogs stack on which push the new instance\n             * @param {Function} dialog - The constructor of the dialog\n             * @param {String} message - The message to display\n             * @param {Function} accept - The callback for accept\n             * @param {Function} reject - The callback for reject\n             * @param {Object} options - Dialog options\n             */\n            function addHandle(namespace, stack, dialog, message, accept, reject, options) {\n                var handle = {\n                    context: namespace,\n                    dialog: dialog(message, doAccept, doReject, options)\n                };\n\n                function doAccept(e, reason) {\n                    if (_.isFunction(accept)) {\n                        accept(handle.shortcut || reason);\n                    }\n                }\n                function doReject(e, reason) {\n                    if (_.isFunction(reject)) {\n                        reject(handle.shortcut || reason);\n                    }\n                }\n\n                // prevents all registered shortcuts to be triggered\n                // and brings back the dialog shortcuts\n                globalShortcut.disable();\n                dialogShortcut.enable();\n\n                stack.push(handle);\n                opened.push(handle);\n\n                handle.dialog.focus();\n                handle.dialog.on('closed.modal', function() {\n                    removeHandle(stack, handle.dialog);\n                    removeHandle(opened, handle.dialog);\n\n                    // if all dialogs have been closed allows all registered shortcuts to be triggered\n                    // also disables the dialog shortcuts\n                    if (!opened.length) {\n                        globalShortcut.enable();\n                        dialogShortcut.disable();\n                    }\n                });\n            }\n\n            /**\n             * Remove a dialog from the provided stack\n             * @param {Array} stack - The dialogs stack from which remove the dialog instance\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function removeHandle(stack, dialog) {\n                if (dialog) {\n                    _.remove(stack, function(handle) {\n                        if (handle && dialog === handle.dialog) {\n                            return true;\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Closes all dialogs within the provided stack\n             * @param {String} namespace - The event namespace that scope the dialogs to close\n             * @param {Boolean} accept - Whether (`true`) or not (`false`) to close the dialogs with accept\n             * @param {Array} stack - The dialogs stack in which close the dialogs\n             */\n            function closeDialogs(namespace, accept, stack) {\n                if (stack) {\n                    _.forEach(stack, function(handle) {\n                        if (handle && (namespace === '@' || namespace === handle.context)) {\n                            if (accept) {\n                                closeAccept(handle.dialog);\n                            } else {\n                                closeReject(handle.dialog);\n                            }\n                        }\n                    });\n                } else {\n                    closeDialogs(namespace, accept, alerts);\n                    closeDialogs(namespace, accept, confirms);\n                }\n            }\n\n            // starts with shortcuts disabled, prevents the TAB key to be used to move outside the dialog box\n            dialogShortcut.disable().set('Tab Shift+Tab');\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function(command, key) {\n                    dialogShortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function(e, shortcut) {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key, shortcut);\n                    });\n                });\n            }\n\n            //change plugin state\n            testRunner\n                .before('alert.*', function(e, msg, accept) {\n                    addHandle(e.namespace, alerts, dialogAlert, msg, accept, accept);\n                })\n                .before('confirm.*', function(e, msg, accept, reject, options) {\n                    addHandle(e.namespace, confirms, dialogConfirm, msg, accept, reject, options);\n                })\n                .before('closedialog.*', function(e, accept) {\n                    closeDialogs(e.namespace, accept);\n                })\n                .on(actionPrefix + 'accept', function(shortcut) {\n                    closeLast(true, shortcut);\n                })\n                .on(actionPrefix + 'reject', function(shortcut) {\n                    closeLast(false, shortcut);\n                })\n                .on('destroy', function() {\n                    closeDialogs('.@');\n\n                    dialogShortcut.clear();\n                    dialogShortcut = null;\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/exitMessages',[\n    'lodash',\n    'core/promise',\n    'taoTests/runner/plugin'\n], function (_, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Displays exit message, then leaves the runner once the user has acknowledged\n     */\n    return pluginFactory({\n\n        name: 'exitMessages',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // intercepts the `leave` event,\n            // then if a message needs to be displayed displays it and waits the user acknowledges it\n            testRunner.before('leave', function leave(e, data) {\n                if (_.isObject(data) && data.message) {\n                    return new Promise(function(resolve) {\n                        var context = testRunner.getTestContext();\n\n                        // the leave can occurs when the runner is in inconsistent state (i.e. error)\n                        // prevent side error with item disabling\n                        if (context && context.itemIdentifier) {\n                            testRunner.disableItem(context.itemIdentifier);\n                        }\n\n                        // wait for the message acknowledge before leaving the runner\n                        testRunner.trigger('alert.leave', data.message, resolve);\n                    });\n                }\n            });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n\n/**\n * Create dialog form with message, with overlapped content\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin'\n], function($, __, hider, pluginFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemAlertMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            this.$element = $(this.getContent().dom);\n\n            this.$element\n                // for GUI actions\n                .on('closed.modal', function(){\n                    $(this).modal('destroy');\n                })\n                .on('destroyed.modal', function(){\n                    self.$element = null;\n                    self.trigger('resume', self);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $modalsContainer = this.getContent().$container;\n            if (!$modalsContainer) {\n                $modalsContainer = $('#modalFeedbacks', itemRunner._item.container);\n            }\n            $modalsContainer.append(this.$element);\n\n            this.$element.modal();\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            if (this.$element && this.$element.length){\n                this.$element.modal('close');\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/templates/button', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \" \";\n  if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\";\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  \n  return \" no-label\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"text\\\">\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  buffer += \"<li data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"small btn-info action\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" title=\\\"\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </a>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * Create form with message in test runner and replace all control buttons on his personal\n */\n\ndefine('taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function($, __, hider, pluginFactory, buttonTpl) {\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('OK')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('OK & End test')\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemInlineMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Create the button based on the current context\n             * @returns {*|jQuery|HTMLElement} the button\n             */\n            var createOkButton = function createElement(){\n                var dataType = !!testRunner.getTestContext().isLast ? 'end' : 'next';\n                var $btn = $(buttonTpl(buttonData[dataType]));\n                $btn.addClass('modalFeedback-button');\n\n                //plugin behavior\n                $btn.on('click', function(e){\n                    e.preventDefault();\n\n                    self.disable();\n                    if($(this).data('control') === 'move-end'){\n                        self.trigger('end');\n                    }\n\n                    $btn.remove();\n                    self.$element.remove();\n\n                    self.trigger('resume', self);\n                });\n\n                return $btn;\n            };\n\n            this.$button = createOkButton();\n            this.$element = $(this.getContent().dom);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $navigationContainer = this.getAreaBroker().getNavigationArea();\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $inlineContainer = this.getContent().$container;\n            if (!$inlineContainer && itemRunner._item.container) {\n                $inlineContainer = $('.qti-itemBody', itemRunner._item.container);\n            }\n\n            $inlineContainer.append(this.$element);\n\n            // hide all navigation buttons, create new instead of\n            if (!$('.modalFeedback-button', $navigationContainer).length){\n                $navigationContainer.append(this.$button);\n            }\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$button.removeProp('disabled')\n                .removeClass('disabled');\n        },\n\n        disable: function disable (){\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$button.click();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Feedback\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/feedback/feedback',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/feedback'\n], function ($, __, pluginFactory, feedback){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'feedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            //keep a ref of the feedbacks\n            var currentFeedback;\n\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Close the current feedback\n             */\n            var closeCurrent = function closeCurrent(){\n                if(currentFeedback){\n                    currentFeedback.close();\n                }\n            };\n\n            //change plugin state\n            testRunner\n                .on('error', function(err){\n                    var message = err;\n                    var type = 'error';\n\n                    if ('object' === typeof err) {\n                        message = err.message;\n                        type = err.type;\n                    }\n\n                    if (!message) {\n                        switch (type) {\n                            case 'TestState':\n                                message = __('The test has been closed/suspended!');\n                                break;\n\n                            case 'FileNotFound':\n                                message = __('File not found!');\n                                break;\n\n                            default:\n                                message = __('An error occurred!');\n                        }\n                    }\n\n                    currentFeedback = feedback().error(message);\n                })\n                .on('danger', function(message){\n                    currentFeedback = feedback().danger(message);\n                })\n                .on('warning', function(message){\n                    currentFeedback = feedback().warning(message);\n                })\n                .on('info', function(message){\n                    currentFeedback = feedback().info(message);\n                })\n                .on('alert.* confirm.* unloaditem', closeCurrent);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/loading/loading',[\n    'layout/loading-bar',\n    'taoTests/runner/plugin'\n], function (loadingBar, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the loading bar plugin.\n     * Displays a loading bar when a blocking task is running\n     */\n    return pluginFactory({\n\n        name: 'loading',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            testRunner\n                .on('unloaditem', function () {\n                    loadingBar.start();\n                })\n                .on('renderitem', function () {\n                    loadingBar.stop();\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * @see http://www.imsglobal.org/question/qtiv2p1/imsqti_implv2p1.html#section10008 modalFeedback\n */\n\ndefine('taoQtiTest/runner/plugins/content/modalFeedback/modalFeedback',[\n    'jquery',\n    'lodash',\n    'module',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',\n    'taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',\n    'ui/autoscroll'\n], function ($, _, module, pluginFactory, inlineMessage, alertMessage, autoscroll) {\n    'use strict';\n\n    /**\n     * Modal or inline type of the messages\n     */\n    var inlineMode;\n\n    /**\n     * Form of the feedback\n     * by default dialog (modal) form\n     */\n    var messagePlugin;\n\n    /**\n     * All feedback messages\n     */\n    var renderedFeedbacks;\n\n    /**\n     * modalFeedback was resolved and all components were destroyed\n     */\n    var isDestroyed;\n\n    /**\n     * Method which should be halted after modalFeedbacks confirmation action\n     */\n    var nextStep;\n\n    function destroyFeedback(feedback) {\n\n        var removed = false;\n        _.remove(renderedFeedbacks, function (storedFeedback) {\n\n            var found = storedFeedback === feedback;\n            if (found) {\n                removed = true;\n            }\n            return found;\n        });\n\n        if (removed) {\n            feedback.destroy();\n\n            if (!renderedFeedbacks.length) {\n                nextStep();\n            }\n        }\n    }\n\n    function defineMode(inline) {\n        inlineMode = inline;\n        messagePlugin = inlineMode ? inlineMessage : alertMessage;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'QtiModalFeedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            nextStep = function(){};\n\n            defineMode(!!module.config().inlineModalFeedback);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var createMessages = function createMessages(renderingQueue, inline){\n\n                var bInlineMode = inlineMode;\n\n                isDestroyed = false;\n                renderedFeedbacks = [];\n\n                if (_.isBoolean(inline)) {\n                    defineMode(inline);\n                }\n\n                if (renderingQueue.length) {\n\n                    _.forEach(renderingQueue, function (renderingToken) {\n\n                        var feedback = messagePlugin(testRunner, testRunner.getAreaBroker());\n                        feedback.init({\n                            dom: renderingToken.feedback.render({\n                                inline: inlineMode\n                            }),\n                            // for alerts will be used #modalMessages container\n                            $container: inlineMode ? renderingToken.$container : null\n                        });\n                        feedback.render();\n\n                        renderedFeedbacks.push(feedback);\n                    });\n\n                    // auto scroll to the first feedback, only for the \"inline\" mode\n                    if (inlineMode && renderedFeedbacks) {\n                        autoscroll($('.qti-modalFeedback', testRunner.getAreaBroker().getContentArea()).first(), testRunner.getAreaBroker().getContentArea().parents('.content-wrapper'));\n                    }\n                } else {\n                    nextStep();\n                }\n\n                // restore global feedback mode\n                defineMode(bInlineMode);\n            };\n\n            if (inlineMode) {\n                testRunner\n                    .off('plugin-resume.itemInlineMessage')\n                    .on('plugin-resume.itemInlineMessage', function () {\n                        self.destroy();\n                    });\n            } else {\n                testRunner\n                    .off('plugin-resume.itemAlertMessage')\n                    .on('plugin-resume.itemAlertMessage', function (feedback) {\n                        destroyFeedback(feedback);\n                    });\n            }\n\n            testRunner.on('modalFeedbacks', function(renderingQueue, done, inline) {\n                nextStep = done;\n                createMessages(renderingQueue, inline);\n            });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         * allow to run that function only once\n         */\n        destroy: function destroy() {\n            var tFeedbacks, i;\n            if (!isDestroyed) {\n                isDestroyed = true;\n\n                if (!renderedFeedbacks) {\n                    nextStep();\n                } else {\n                    tFeedbacks = renderedFeedbacks.slice(0);\n                    for (i in tFeedbacks) {\n                        destroyFeedback(tFeedbacks[i]);\n                    }\n                }\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/overlay/overlay',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin'\n], function ($, __, pluginFactory){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'overlay',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $('<div />');\n            this.$element.on('click mousedown mouseup touchstart touchend keyup keydow keypress scroll drop', function(e){\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n            });\n\n            var shield = function shield(){\n                self.enable();\n            };\n            var unshield = function unshield(itemRef){\n                self.disable();\n            };\n\n            //change plugin state\n            testRunner\n                .on('disableitem',  shield)\n                .on('enableitem unloaditem', unshield);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render (){\n            var $contentArea = this.getTestRunner().getAreaBroker().getContentArea();\n            $contentArea.after(this.$element);\n        },\n\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the overlay\n         */\n        enable : function enable (){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var overlayConfig = pluginsConfig.overlay || {};\n\n            this.$element.addClass('overlay');\n\n            if (overlayConfig.full) {\n                this.$element.addClass('overlay-full');\n            }\n        },\n\n        /**\n         * Disable the overlay\n         */\n        disable : function disable (){\n            this.$element.removeClass('overlay overlay-full');\n        },\n\n        /**\n         * Show the overlay\n         */\n        show: function show(){\n            this.enable();\n        },\n\n        /**\n         * Hide the overlay\n         */\n        hide: function hide(){\n            this.disable();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n * @author Christophe Noël <christophe@taotesting.com>\n * @author Dieter Raber <dieter@taotesting.com>\n */\n\n\ndefine('taoQtiTest/runner/plugins/content/responsiveness/collapser',[\n    'lodash',\n    'jquery',\n    'taoTests/runner/plugin'\n], function (_, $, pluginFactory) {\n    'use strict';\n\n    /**\n     * Event namespace\n     * @type {String}\n     */\n    var ns = '.collapser';\n\n    /**\n     * Name of the CSS class used to collapse the buttons\n     * @type {String}\n     */\n    var noLabelCls = 'tool-label-collapsed';\n\n    /**\n     * Name of the CSS class used to collapse the buttons and allow to expand on mouse over\n     * @type {String}\n     */\n    var noLabelHoverCls = 'tool-label-collapsed-hover';\n\n    /**\n     * Name of the  CSS class used to hide the label of the button independently of responsiveness\n     * @type {string}\n     */\n    var labelHiddenCls = 'no-tool-label';\n\n\n    /**\n     * Name of the  CSS class for separators\n     * @type {string}\n     */\n    var separatorCls = 'separator';\n\n    /**\n     * Default plugin options\n     * @type {Object}\n     */\n    var defaults = {\n        collapseTools: true,        // collapse the tools buttons\n        collapseNavigation: false,  // collapse the navigation buttons\n        collapseInOrder: false,     // collapse any button in the given order\n        hover: false,               // expand when the mouse is over a button,\n\n        /**\n         * Allow to set manually which buttons should collapse and in which order.\n         * This can be set by triggering the \"collapser-set-order\" event on the testRunner.\n         * Given as an array of jQuery selectors: first index will be the first to be collapsed, and so on.\n         * If no selector is given for a button, then this one will never collapse.\n         * ex:\n         * var collapseOrder = [\n         *      '[data-control=\"highlight-clear\"],[data-control=\"highlight-trigger\"]',  // those will collapse first...\n         *      '[data-control=\"hide-review\"]',                                         // this one second...\n         *      '[data-control=\"set-item-flag\"]',                                       // third...\n         *      ...                                                                     // ...\n         * ];\n         * @type {String[]}\n         */\n        collapseOrder: []\n    };\n\n    var $window = $(window);\n\n    /**\n     * Creates the responsiveness collapser plugin.\n     * Reduce the size of the action bar tools when the available space is below the needed one.\n     */\n    return pluginFactory({\n\n        name: 'collapser',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginsConfig = testConfig.plugins || {},\n                config = _.defaults(pluginsConfig.collapser || {}, defaults),\n                collapseCls = config.hover ? noLabelHoverCls : noLabelCls;\n\n            var areaBroker = testRunner.getAreaBroker();\n\n            var $actionsBar = areaBroker.getArea('actionsBar'),\n                $toolbox = areaBroker.getToolboxArea(),\n                $navigation = areaBroker.getNavigationArea();\n\n            var allCollapsibles,\n                availableWidth,\n                previousAvailableWidth;\n\n            /**\n             * Get a reference of all collapsibles\n             */\n            function buildCollapsiblesList() {\n\n                // use the given order to build the collapsibles list or generate on in natural order\n                if(config.collapseInOrder && config.collapseOrder.length) {\n                    allCollapsibles = getCollapsiblesFromConfig();\n                }\n                // get values from DOM, grouped by prefix\n                else if(config.collapseInOrder) {\n                    allCollapsibles = getSortedCollapsiblesFromDom();\n                }\n                // get all in one chunk\n                else {\n                    allCollapsibles = getUnsortedCollapsiblesFromDom();\n                }\n            }\n\n            /**\n             * @param {jQuery} $element\n             * @returns {number} Size difference, in pixels, between collapsed and expanded state of $element\n             */\n            function getExtraWidth($element) {\n                var expandedWidth,\n                    collapsedWidth;\n\n                $element.removeClass(collapseCls);\n                expandedWidth = $element.outerWidth(true);\n                $element.addClass(collapseCls);\n                collapsedWidth = $element.outerWidth(true);\n                $element.removeClass(collapseCls);\n\n                return expandedWidth - collapsedWidth;\n            }\n\n            /**\n             * Expand or collapse elements\n             */\n            function toggleCollapsibles() {\n                availableWidth = getAvailableWidth();\n\n                availableWidth < previousAvailableWidth ? collapseInOrder() : expandInOrder();\n\n                previousAvailableWidth = availableWidth;\n            }\n\n            function collapseInOrder() {\n                var collapsiblesCopy = _.clone(allCollapsibles),\n                    toCollapse;\n\n                while (collapseNeeded() && collapsiblesCopy.length) {\n                    toCollapse = collapsiblesCopy.shift();\n                    toCollapse.$elements.addClass(collapseCls);\n                }\n            }\n\n            function collapseNeeded() {\n                return getToolbarWidth() > getAvailableWidth();\n            }\n\n            function expandInOrder() {\n                _.forEachRight(allCollapsibles, function(toExpand) {\n                    if (toExpand.$elements.hasClass(collapseCls)) {\n                        if (expandPossible(toExpand.extraWidth)) {\n                            toExpand.$elements.removeClass(collapseCls);\n                        } else {\n                            return false;\n                        }\n                    }\n                });\n            }\n\n            function expandPossible(extraWidth) {\n                return (getToolbarWidth() + extraWidth) < getAvailableWidth();\n            }\n\n            function getAvailableWidth() {\n                // Scrollbars are commonly between ~12px and ~18px in width. Subtracting 20px from the available width\n                // makes sure that scrollbars are always taken in account. The worst case scenario is that the buttons\n                // start to collapse, although they would still have had 20px available.\n                return $actionsBar.width() - 20;\n            }\n\n            function getToolbarWidth() {\n                return $toolbox.outerWidth(true) + $navigation.outerWidth(true);\n            }\n\n            /**\n             * Parse DOM for controls that can be collapsed\n             * @returns {*|jQuery|HTMLElement}\n             */\n            function getControlsFromDom() {\n                var $controls = $(),\n                    selector = '>ul>[data-control]';\n\n                if(config.collapseTools) {\n                    $controls = $controls.add($toolbox.find(selector).not('.' + labelHiddenCls).not('.' + separatorCls));\n                }\n\n                if(config.collapseNavigation) {\n                    $controls = $controls.add($navigation.find(selector).not('.' + labelHiddenCls).not('.' + separatorCls));\n                }\n\n                return $controls;\n            }\n\n            /**\n             * Get allCollapsibles based on configuration\n             *\n             * @returns {Array}\n             */\n            function getCollapsiblesFromConfig() {\n\n                return _.compact(config.collapseOrder.map(function(selector) {\n                    // some buttons are collapsed by configuration, some other are only separators: we should leave them alone\n                    var $elements = $(selector).not('.' + labelHiddenCls).not('.' + separatorCls);\n                    var extraWidth = 0;\n\n                    if ($elements.length) {\n                        $elements.each(function() {\n                            extraWidth += getExtraWidth($(this));\n                        });\n                        return {\n                            $elements: $elements,\n                            extraWidth: extraWidth\n                        };\n                    }\n                    return false;\n                }));\n            }\n\n            /**\n             * Get allCollapsibles based on DOM\n             * Build the collapse order from the left to the right, related elements are grouped.\n             *\n             * @returns {Array}\n             */\n            function getSortedCollapsiblesFromDom() {\n\n                var $elements = getControlsFromDom(),\n                    _allCollapsibles = [],\n                    order = {};\n\n                // group items by prefix\n                // eg. zoomIn and zoomOut -> zoom\n                $elements.each(function() {\n                    var ctrl = this.dataset.control,\n                        // re makes group `foo` from `foo-bar`, `fooBar` and `foo_bar`\n                        // if we do not have a prefix use the control name as key to ensure uniqueness\n                        key = ctrl.substring(0, ctrl.search(/[A-Z-_]/)) || ctrl;\n\n                    order[key] = order[key] || $();\n                    order[key] = order[key].add($(this));\n                });\n\n                // move items to allCollapsibles\n                _.forOwn(order, function($elements) {\n                    var extraWidth = 0;\n                    $elements.each(function() {\n                        extraWidth += getExtraWidth($(this));\n                    });\n                    _allCollapsibles.push({\n                        $elements: $elements,\n                        extraWidth: extraWidth\n                    })\n                });\n\n                return _.compact(_allCollapsibles);\n            }\n\n            /**\n             * Get allCollapsibles based on DOM, all buttons will be collapsed at once\n             *\n             * @returns {Array}\n             */\n            function getUnsortedCollapsiblesFromDom() {\n                var $elements = getControlsFromDom(),\n                    _allCollapsibles = [],\n                    extraWidth = 0;\n\n                $elements.each(function() {\n                    extraWidth += getExtraWidth($(this));\n                });\n\n                _allCollapsibles.push({\n                    $elements: $elements,\n                    extraWidth: extraWidth\n                });\n\n                return _.compact(_allCollapsibles);\n            }\n\n\n\n            $window.on('resize' + ns, _.throttle(function() {\n                testRunner.trigger('collapseTools');\n            }, 40));\n\n            testRunner\n                .after('renderitem loaditem', function() {\n                    previousAvailableWidth = Infinity;\n\n                    buildCollapsiblesList();\n\n                    testRunner.trigger('collapseTools');\n                })\n                .on('collapseTools' + ns, function() {\n                    toggleCollapsibles();\n                });\n        },\n\n        destroy: function destroy() {\n            $window.off(ns);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div id=\\\"qti-rubrics\\\"></div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : RubricBlock\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock',[\n    'jquery',\n    'i18n',\n    'core/promise',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock'\n], function ($, __, Promise, hider, pluginFactory, containerTpl){\n    'use strict';\n\n    /**\n     * Ensure the <a> links opens to blank pages\n     * @param {jQueryElement} $container - lookup scope\n     */\n    var blankifyLinks = function blankifyLinks($container){\n        $('a', $container).attr('target', '_blank');\n    };\n\n    /**\n     * Apply mathjax\n     */\n    var mathify = function mathify($container) {\n\n        return new Promise(function(resolve){\n            if($('math', $container).length > 0){\n                //load mathjax only if necessary\n                require(['mathJax'], function(MathJax){\n                    if(MathJax){\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $container[0]);\n                        MathJax.Hub.Queue(resolve);\n                    } else {\n                        resolve();\n                    }\n                }, resolve);\n            } else {\n                resolve();\n            }\n        });\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'rubricBlock',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $(containerTpl());\n\n            this.hide();\n\n            //change plugin state\n            testRunner\n                .on('ready', function(){\n                    self.hide();\n                })\n                .on('loaditem', function(){\n                    var context = testRunner.getTestContext();\n                    if(context.rubrics) {\n                        self.$element.html(context.rubrics);\n\n                        blankifyLinks(self.$element);\n                        mathify(self.$element).then(function(){\n                            // notify that the rubric blocks are loaded\n                            testRunner.trigger('rubricblock');\n                        });\n                    }\n                })\n                .on('renderitem', function(){\n                    self.show();\n                })\n                .on('unloaditem', function(){\n                    self.hide();\n                    self.$element.empty();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            //attach the element before the content area\n            var $container = this.getAreaBroker().getContentArea();\n            $container.before(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the container\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the container\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the container\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the container\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"connectivity-box \";\n  if (helper = helpers.state) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.state); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span data-control=\\\"connectivity-connected\\\" class=\\\"qti-controls icon-connect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Connected to server\", options) : helperMissing.call(depth0, \"__\", \"Connected to server\", options)))\n    + \"\\\"></span>\\n    <span data-control=\\\"connectivity-disconnected\\\" class=\\\"qti-controls icon-disconnect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Disconnected from server\", options) : helperMissing.call(depth0, \"__\", \"Disconnected from server\", options)))\n    + \"\\\"></span>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/connectivity/connectivity',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'core/polling',\n    'ui/waitingDialog/waitingDialog',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity'\n], function ($, _, __, Promise, pollingFactory, waitingDialog, pluginFactory, connectivityTpl) {\n    'use strict';\n\n    /**\n     * Connectivity check interval, in ms\n     * @type {Number}\n     */\n    var checkInterval = 30 * 1000;\n\n    /**\n     * Creates the connectivity plugin.\n     * Detects connectivity issues\n     */\n    return pluginFactory({\n\n        name: 'connectivity',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var self = this;\n\n            var waiting    = false;\n\n            var testRunner = this.getTestRunner();\n            var proxy      = testRunner.getProxy();\n\n            /**\n             * Display the waiting dialog, while waiting the connection to be back\n             * @param {String} [messsage] - additional message for the dialog\n             * @returns {Promise} resolves once the wait is over and the user click on 'proceed'\n             */\n            var displayWaitingDialog = function displayWaitingDialog(message){\n\n                var dialog;\n                return new Promise(function(resolve) {\n                    if(!waiting){\n                        waiting = true;\n\n                        //if a pause event occurs while waiting,\n                        //we also wait the connection to be back\n                        testRunner.before('pause.waiting', function(){\n                            return new Promise(function(pauseResolve){\n                                proxy.off('reconnect.pausing')\n                                    .after('reconnect.pausing', pauseResolve);\n                            });\n                        });\n\n                        //creates the waiting modal dialog\n                        dialog = waitingDialog({\n                            message : __('You are encountering a prolonged connectivity loss. ') + message,\n                            waitContent : __('Please wait while we try to restore the connection.'),\n                            proceedContent : __('The connection seems to be back, please proceed')\n                        })\n                        .on('proceed', function(){\n                            resolve();\n                        })\n                        .on('render', function(){\n                            proxy\n                                .off('reconnect.waiting')\n                                .after('reconnect.waiting', function(){\n                                    testRunner.off('pause.waiting');\n                                    waiting = false;\n                                    dialog.endWait();\n                                });\n                        });\n                    }\n                });\n            };\n\n            //Last chance to check the connection,\n            //by regular polling on the \"up\" signal\n            this.polling = pollingFactory({\n                action: function action () {\n                    testRunner.getProxy()\n                        .telemetry(testRunner.getTestContext().itemIdentifier, 'up')\n                        .catch(_.noop);\n                },\n                interval: checkInterval,\n                autoStart: false\n            });\n\n            //create the indicator\n            this.$element = $(connectivityTpl({\n                state: proxy.isOnline() ? 'connected' : 'disconnected'\n            }));\n\n            //the Proxy is the only one to know something about connectivity\n            proxy.on('disconnect', function disconnect(source) {\n                if (!testRunner.getState('disconnected')) {\n                    testRunner.setState('disconnected', true);\n                    testRunner.trigger('disconnect', source);\n                    self.$element.removeClass('connected').addClass('disconnected');\n                    self.polling.start();\n                }\n            })\n            .on('reconnect', function reconnect() {\n                if (testRunner.getState('disconnected')) {\n                    testRunner.setState('disconnected', false);\n                    testRunner.trigger('reconnect');\n                    self.$element.removeClass('disconnected').addClass('connected');\n                    self.polling.stop();\n                }\n            });\n\n            //intercept tries to leave while offline\n            //this could be caused by pauses for example.\n            //If caused by an action like exitTest it will be handled\n            //by navigation errors (see below)\n            testRunner.before('leave', function(e, data){\n                if (proxy.isOffline()) {\n                    displayWaitingDialog(data.message)\n                        .then(function(){\n                            testRunner.trigger('leave', data);\n                        })\n                        .catch(function(generalErr){\n                            testRunner.trigger('error', generalErr);\n                        });\n\n                    return false;\n                }\n            });\n\n            //intercept offline navigation errors\n            testRunner.before('error', function(e, err) {\n\n                // detect and prevent connectivity errors\n                if (proxy.isConnectivityError(err)){\n                    return false;\n                }\n\n                if (proxy.isOffline()) {\n                    displayWaitingDialog(err.message)\n                        .then(function(){\n                            if(err.type === 'nav'){\n                                testRunner.loadItem(testRunner.getTestContext().itemIdentifier);\n                            }\n                            if(err.type === 'finish'){\n                                testRunner.finish();\n                            }\n                            if(err.type === 'pause'){\n                                testRunner.trigger('pause', {\n                                    reasons: err.data && err.data.reasons,\n                                    message : err.data && err.data.comment\n                                });\n                            }\n                        })\n                        .catch(function(generalErr){\n                            testRunner.trigger('error', generalErr);\n                        });\n                    return false;\n                }\n            });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Duration (record exact spent time duration)\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/duration/duration',[\n    'lodash',\n    'core/polling',\n    'core/timer',\n    'core/store',\n    'core/promise',\n    'taoTests/runner/plugin',\n], function(_, pollingFactory, timerFactory, store, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Time interval between duration capture in ms\n     * @type {Number}\n     */\n    var refresh = 1000;\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'duration',\n\n\n        install: function install() {\n            var self = this;\n            //the storechange event is fired early (before runner's init is done)\n            //so we attach the handler early\n            this.getTestRunner().on('storechange', function handleStoreChange() {\n                self.shouldClearStorage = true;\n            });\n        },\n\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            //where the duration of attempts are stored\n            return store('duration-' + testRunner.getConfig().serviceCallId)\n                .then(function(durationStore) {\n                    if (self.shouldClearStorage) {\n                        return durationStore.clear().then(function() {\n                            return durationStore;\n                        });\n                    }\n                    return durationStore;\n                })\n                .then(function(durationStore) {\n\n                    /**\n                     * Gets the duration of a particular item from the store\n                     * @param {String} attemptId - the attempt id to get the duration for\n                     * @returns {Promise}\n                     */\n                    function getItemDuration(attemptId) {\n                        if (!/^(.*)+#+\\d+$/.test(attemptId)) {\n                            return Promise.reject(new Error('Is it really an attempt id, like \"itemid#attempt\"'));\n                        }\n\n                        return durationStore.getItem(attemptId);\n                    }\n\n                    //one stopwatch to count the time\n                    self.stopwatch = timerFactory({\n                        autoStart: false\n                    });\n\n                    //update the duration on a regular basis\n                    self.polling = pollingFactory({\n\n                        action: function updateDuration() {\n\n                            //how many time elapsed from the last tick ?\n\n                            var context = testRunner.getTestContext();\n\n                            //store by attempt\n                            var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n\n                            durationStore.getItem(itemAttemptId).then(function(duration){\n                                var elapsed = self.stopwatch.tick();\n                                duration = _.isNumber(duration) ? duration : 0;\n                                elapsed = _.isNumber(elapsed) && elapsed > 0 ? (elapsed / 1000) : 0;\n\n                                //store the last duration\n                                durationStore.setItem(itemAttemptId, duration + elapsed);\n                            });\n                        },\n                        interval: refresh,\n                        autoStart: false\n                    });\n\n                    //change plugin state\n                    testRunner\n\n                        .after('renderitem', function(){\n                            self.enable();\n                        })\n                        .on('enableitem', function() {\n                            self.enable();\n                        })\n\n                        .before('move skip exit timeout', function() {\n                            var context = testRunner.getTestContext();\n                            var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n\n                            return getItemDuration(itemAttemptId).then(function(duration) {\n                                var params = {\n                                    itemDuration: 0\n                                };\n                                if (_.isNumber(duration) && duration > 0) {\n                                    params.itemDuration = duration;\n                                }\n\n                                // the duration will be sent to the server with the next request,\n                                // usually submitItem() or callItemAction()\n                                testRunner.getProxy().addCallActionParams(params);\n                            });\n                        })\n\n                        .on('move skip exit timeout error disableitem', function(){\n                            self.disable();\n                        })\n\n                        /**\n                          * @event duration.get\n                          * @param {String} attemptId - the attempt id to get the duration for\n                          * @param {getDuration} getDuration - a receiver callback\n                          */\n                        .on('plugin-get.duration', function(e, attemptId, getDuration) {\n                            if (_.isFunction(getDuration)) {\n                                getDuration(getItemDuration(attemptId));\n                            }\n                        })\n\n                        .before('finish', function() {\n                            return new Promise(function(resolve) {\n                                durationStore.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.polling.stop();\n            this.stopwatch.stop();\n        },\n\n        /**\n         * Enables the duration count\n         */\n        enable: function enable() {\n            if (!this.getState('enabled')) {\n                this.polling.start();\n                this.stopwatch.resume();\n            }\n        },\n\n        /**\n         * Disables the duration count\n         */\n        disable: function disable() {\n            if (this.getState('enabled')) {\n                this.polling.stop();\n                this.stopwatch.pause();\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/progressbar', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar info\\\"></div>\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\n</div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Progress Bar\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progressbar',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/progressbar',\n    'ui/progressbar'\n], function ($, _, __, pluginFactory, progressTpl){\n    'use strict';\n\n    /**\n     * Calculate progression based on the current context\n     *\n     * @param {Object} testContext - The current test context\n     * @param {Object} testMap - The items organization map\n     * @param {Object} progressConfig\n     * @param {String} progressConfig.indicator - to select the progression type\n     * @param {String} [progressConfig.scope] - to select the progression type\n     * @param {Bool} progressConfig.showTotal - display 'item x of y' (true) | 'item x'\n     * @returns {Object} the progression with a label and a ratio\n     */\n    var progressUpdater = function progressUpdater(testContext, testMap, progressConfig){\n\n\n        /**\n         * Provide progression calculation based on the type of indicator\n         */\n        var updater = {\n\n            /**\n            * Updates the progress bar displaying the percentage\n            * @param {Object} testContext The progression context\n            * @returns {{ratio: number, label: string}}\n            */\n            percentage : function percentage() {\n                var total = Math.max(1, testContext.numberItems);\n                var ratio = Math.floor(testContext.numberCompleted / total * 100);\n                return {\n                    ratio : ratio,\n                    label : ratio + '%'\n                };\n            },\n\n            /**\n            * Updates the progress bar displaying the position\n            * @param {Object} testContext The progression context\n            * @returns {{ratio: number, label: string}}\n            */\n            position : function position() {\n\n                //get the current test part in the map\n                var getTestPart = function getTestPart(){\n                    if(testMap && testMap.parts){\n                        return testMap.parts[testContext.testPartId];\n                    }\n                };\n\n                //get the current test section in the map\n                var getTestSection = function getTestSection(){\n                    var testPart = getTestPart();\n                    if(testPart && testPart.sections){\n                        return testPart.sections[testContext.sectionId];\n                    }\n                };\n\n                //provides you the methods to get total and position by scope\n                var progressScopeCounter = {\n                    test : {\n                        total : function(){\n                            return Math.max(1, testContext.numberItems);\n                        },\n                        position : function(){\n                            return testContext.itemPosition + 1;\n                        }\n                    },\n                    testPart : {\n                        total : function(){\n                            var testPart = getTestPart();\n                            if(testPart){\n                                return _.reduce(testMap.parts[testContext.testPartId].sections, function(acc, section){\n                                    return acc + _.size(section.items);\n                                }, 0);\n                            }\n                            return 0;\n                        },\n                        position : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return testSection.items[testContext.itemIdentifier].positionInPart + 1;\n                            }\n                            return 0;\n                        }\n                    },\n                    testSection : {\n                        total : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return _.size(testSection.items);\n                            }\n                            return 0;\n                        },\n                        position : function(){\n                            var testSection = getTestSection();\n                            if(testSection && testSection.items[testContext.itemIdentifier]){\n                                return testSection.items[testContext.itemIdentifier].positionInSection + 1;\n                            }\n                            return 0;\n                        }\n                    }\n                };\n\n                var counter = progressScopeCounter[progressConfig.scope] || progressScopeCounter.test;\n                var total = counter.total();\n                var currentPosition = counter.position();\n\n                return {\n                    ratio : total > 0 ? Math.floor(currentPosition / total * 100) : 0,\n                    label : progressConfig.showTotal ?\n                        __('Item %d of %d', currentPosition, total) :\n                        __('Item %d', currentPosition)\n                };\n            }\n        };\n        return updater[progressConfig.indicator]();\n    };\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'progressBar',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var $progressLabel,\n                $progressControl;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n            var config     = testData.config.progressIndicator || {};\n\n            var progressConfig = {\n                indicator: config.type || 'percentage',\n                scope: config.scope || 'test',\n                showTotal: !!config.showTotal\n            };\n\n            /**\n             * Update the progress bar\n             */\n            var update = function update (){\n                var progressData = progressUpdater(testRunner.getTestContext(), testRunner.getTestMap(), progressConfig);\n                if(progressData && $progressLabel && $progressControl){\n                    $progressLabel.text(progressData.label);\n                    $progressControl.progressbar('value', progressData.ratio);\n                }\n            };\n\n            //create the progressbar\n            this.$element = $(progressTpl());\n\n            //store the controls\n            $progressLabel = $('[data-control=\"progress-label\"]', this.$element);\n            $progressControl = $('[data-control=\"progress-bar\"]', this.$element);\n\n            //and initialize the progress bar component\n            $progressControl.progressbar();\n\n            //let update the progression\n            update();\n\n            testRunner\n                .on('ready', update)\n                .on('loaditem', update);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/testState/testState',[\n    'lodash',\n    'taoTests/runner/plugin'\n], function (_, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Handle particular states of the assessment test\n     */\n    return pluginFactory({\n\n        name: 'testState',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // middleware invoked on every requests\n            testRunner.getProxy()\n                .use(function qtiFilter(req, res, next) {\n                    var data = res && res.data;\n\n                    // test has been closed/suspended => redirect to the index page after message acknowledge\n                    if (data && data.type && data.type === 'TestState' && !testRunner.getState('closedOrSuspended')) {\n\n                        // spread the world about the reason of the leave\n                        testRunner.setState('closedOrSuspended', true);\n\n                        if (!testRunner.getState('ready')) {\n                            // if we open an inconsistent test just leave\n                            // should happen if we refresh an auto paused test\n                            testRunner.trigger('destroy');\n                        } else if (_.isEmpty(data.messages) || !_.find(data.messages, {channel: 'teststate'})) {\n                            testRunner.trigger('leave', data);\n                        }\n                        // break the chain to avoid uncaught exception in promise...\n                        // this will lead to unresolved promise, but the browser will be redirected soon!\n                        return;\n                    }\n                    next();\n                });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            var isLeaving = false;\n\n            // immediate handling of proctor's actions\n            testRunner.getProxy()\n                .channel('teststate', function (data) {\n                    if (!isLeaving && data && ('close' === data.type || 'pause' === data.type) && !testRunner.getState('closedOrSuspended')) {\n                        isLeaving = true;\n\n                        testRunner.setState('closedOrSuspended', true);\n\n                        testRunner.trigger('leave', data);\n                    }\n                });\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/timer', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" disabled\";\n  }\n\n  buffer += \"<span class=\\\"qti-timer qti-timer__type-\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" qti-controls \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.running), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-control=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span class=\\\"qti-timer_label truncate\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <span class=\\\"qti-timer_time\\\"></span>\\n</span>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Component that controls the display of a timer (countdown/stopwatch like) into a QTI Test.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timerComponent',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'moment',\n    'core/encoder/time',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/timer'\n], function ($, _, __, moment, timeEncoder, timerTpl) {\n    'use strict';\n\n    var hasAnimationFrame = 'requestAnimationFrame' in window;\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * In a Qti context timers could be associated to those elements\n     */\n    var timerTypes = {\n        test:     'assessmentTest',\n        testPart: 'testPart',\n        section:  'assessmentSection',\n        item:     'assessmentItemRef'\n    };\n\n    /**\n     * Create a new timer component\n     * @param {Object} config - the timer config\n     * @param {String} config.id - used to identified the timer\n     * @param {String} config.type - the associated type (from timerTypes above)\n     * @param {String} [config.label] - the label to display next to the timer\n     * @param {Number} [config.remaining = 0] - the remaining time\n     * @param {Number|Boolean} [config.warning = false] - to warn the user their is only the specified amount of time left\n     * @param {Boolean} [config.running = true] - timer state\n     * @returns {timerComponent} the timer component\n     * @throws {TypeError} if the config is not correct\n     */\n    var timerComponentFactory = function timerComponentFactory(config){\n        var data;\n\n        if(!_.isPlainObject(config)){\n            throw new TypeError('A timer needs to be configured using a config object');\n        }\n        if(_.isEmpty(config.id)){\n            throw new TypeError('A timer needs and identifier');\n        }\n        if(!_.contains(timerTypes, config.type)){\n            throw new TypeError('Invalid type configured');\n        }\n\n        data = _.defaults(config, {\n            label:     '',\n            remaining: 0,\n            warnings: {},\n            running:   true\n        });\n\n        /**\n         * @typedef {timerComponent} the component to manage the timer\n         */\n        return {\n\n            /**\n             * Initialize the component\n             * @returns {timerComponent} chains\n             */\n            init   : function init(){\n               this.$element = $(timerTpl(data));\n               this.$display = $('.qti-timer_time', this.$element);\n               return this;\n            },\n\n            /**\n             * Attach the component to the DOM\n             * @param {jQueryElement} $container - where to append the component\n             * @returns {timerComponent} chains\n             */\n            render : function render($container){\n                $container.append(this.$element);\n                return this;\n            },\n\n            /**\n             * Destroy the component\n             * @returns {timerComponent} chains\n             */\n            destroy : function destroy(){\n                this.$element.remove();\n                return this;\n            },\n\n            /**\n             * Refresh the display\n             * @returns {timerComponent} chains\n             */\n            refresh : function refresh(){\n                var self = this;\n                var update = function update(){\n                    self.$display.text( timeEncoder.encode( data.remaining / precision) );\n                };\n                if(hasAnimationFrame){\n                   window.requestAnimationFrame(update);\n                } else {\n                    update();\n                }\n\n                return this;\n            },\n\n            /**\n             * Warn about time remaining\n             * @returns {Object} the warning message and type of popup\n             */\n            warn : function warn() {\n                var remaining,\n                    message = {},\n                    warning = _.findLast(data.warnings, { showed: false });\n\n                if (!_.isEmpty(warning)\n                    && _.isFinite(warning.point)\n                    && data.remaining <= warning.point\n                ) {\n                    remaining = moment.duration(data.remaining / precision, \"seconds\").humanize();\n                    this.$display.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\n                    switch (data.type) {\n                        case 'assessmentItemRef':\n                            message.text = __(\"Warning – You have %s remaining to complete this item.\", remaining);\n                            break;\n\n                        case 'assessmentSection':\n                            message.text = __(\"Warning – You have %s remaining to complete this section.\", remaining);\n                            break;\n\n                        case 'testPart':\n                            message.text = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\n                            break;\n\n                        case 'assessmentTest':\n                            message.text = __(\"Warning – You have %s remaining to complete the test.\", remaining);\n                            break;\n                    }\n\n                    var showed = _.find(data.warnings, { point: warning.point });\n                    if (showed && showed.point && data.warnings[showed.point / precision]) {\n                        data.warnings[showed.point / precision].showed = true;\n                    }\n\n                    message.type = warning.type;\n                }\n\n                return message;\n            },\n\n\n            /**\n             * Get the timer id\n             * @returns {String} the id\n             */\n            id  : function id(){\n                return data.id;\n            },\n\n            /**\n             * Get/set the current/remaining value\n             * @param {Number} [value] - only as a setter\n             * @returns {Number|timerComponent} the value as a getter, or chains as a setter\n             */\n            val : function val(value){\n                if(typeof value !== 'undefined'){\n                    data.remaining = value;\n                    return this;\n                }\n                return data.remaining;\n            },\n\n            /**\n             * Get/set the running state\n             * @param {Boolean} [value] - only as a setter\n             * @returns {Boolean|timerComponent} the value as a getter, or chains as a setter\n             */\n            running : function running(value){\n                if(typeof value !== 'undefined'){\n                    data.running = !!value;\n                    return this;\n                }\n                return !!data.running;\n            }\n        };\n    };\n\n    return timerComponentFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/map',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * Gets an empty stats record\n     * @returns {Object}\n     */\n    function getEmptyStats() {\n        return {\n            questions: 0,\n            answered: 0,\n            flagged: 0,\n            viewed: 0,\n            total: 0\n        };\n    }\n\n    /**\n     * Defines a helper that provides extractors for an assessment test map\n     */\n    return {\n        /**\n         * Gets the jumps table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getJumps: function getJumps(map) {\n            return map && map.jumps;\n        },\n\n        /**\n         * Gets the parts table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getParts: function getParts(map) {\n            return map && map.parts;\n        },\n\n        /**\n         * Get sections table\n         * @param {Object} map - The assessment test map\n         * @returns {Object} the sections\n         */\n        getSections: function getSections(map) {\n            var parts = this.getParts(map),\n                result = {};\n\n            _.forEach(parts, function (part) {\n                var sections = part.sections;\n                if (sections) {\n                    _.forEach(sections, function (section) {\n                        result[section.id] = section;\n                    });\n                }\n            });\n            return result;\n        },\n\n        /**\n         * Return the list of remaining sections.\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionId - The next sections will be gathered once this sectionId has been reached\n         * @returns {Object} the next sections\n         */\n        getNextSections: function getNextSections(map, sectionId) {\n            var sections = this.getSections(map),\n                result = {},\n                canList = false;\n\n            _.forEach(sections, function (section) {\n                if (canList) {\n                    result[section.id] = section;\n                }\n                if (section.id === sectionId) {\n                    canList = true;\n                }\n            });\n\n            return result;\n        },\n\n        /**\n         * Gets the jump at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getJump: function getJump(map, position) {\n            var jumps = this.getJumps(map);\n            return jumps && jumps[position];\n        },\n\n        /**\n         * Gets a test part by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPart: function getPart(map, partName) {\n            var parts = this.getParts(map);\n            return parts && parts[partName];\n        },\n\n        /**\n         * Gets a test section by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSection: function getSection(map, sectionName) {\n            var parts = this.getParts(map);\n            var section = null;\n            _.forEach(parts, function (part) {\n                var sections = part.sections;\n                if (sections && sections[sectionName]) {\n                    section = sections[sectionName];\n                    return false;\n                }\n            });\n            return section;\n        },\n\n        /**\n         * Gets a test item by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} itemName - The identifier of the test item\n         * @returns {Object}\n         */\n        getItem: function getItem(map, itemName) {\n            var jump = _.find(this.getJumps(map), {identifier: itemName});\n            return this.getItemAt(map, jump && jump.position);\n        },\n\n        /**\n         * Gets the global stats of the assessment test\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getTestStats: function getTestStats(map) {\n            return map && map.stats;\n        },\n\n        /**\n         * Gets the stats of the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPartStats: function getPartStats(map, partName) {\n            var part = this.getPart(map, partName);\n            return part && part.stats;\n        },\n\n        /**\n         * Gets the stats of the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSectionStats: function getSectionStats(map, sectionName) {\n            var section = this.getSection(map, sectionName);\n            return section && section.stats;\n        },\n\n        /**\n         * Gets the stats related to a particular scope\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {Object}\n         */\n        getScopeStats: function getScopeStats(map, position, scope) {\n            var jump = this.getJump(map, position);\n            switch (scope) {\n                case 'section':\n                case 'testSection':\n                    return this.getSectionStats(map, jump && jump.section);\n\n                case 'part':\n                case 'testPart':\n                    return this.getPartStats(map, jump && jump.part);\n\n                default:\n                case 'test':\n                    return this.getTestStats(map);\n            }\n        },\n\n        /**\n         * Gets the map of a particular scope from a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {object} The scoped map\n         */\n        getScopeMap: function getScopeMap(map, position, scope) {\n            // need a clone of the map as we will change some properties\n            var scopeMap = _.cloneDeep(map || {});\n\n            // gets the current part and section\n            var jump = this.getJump(map, position);\n            var part = this.getPart(scopeMap, jump && jump.part);\n            var section = this.getSection(scopeMap, jump && jump.section);\n\n            // reduce the map to the scope part\n            if (scope && scope !== 'test') {\n                scopeMap.parts = {};\n                if (part) {\n                    scopeMap.parts[jump.part] = part;\n                }\n            }\n\n            // reduce the map to the scope section\n            if (part && (scope === 'section' || scope === 'testSection')) {\n                part.sections = {};\n                if (section) {\n                    part.sections[jump.section] = section;\n                }\n            }\n\n            // update the stats to reflect the scope\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            scopeMap.stats = this.computeStats(scopeMap.parts);\n\n            return scopeMap;\n        },\n\n        /**\n         * Gets the map of a particular scope from a current context\n         * @param {Object} map - The assessment test map\n         * @param {Object} context - The current session context\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {object} The scoped map\n         */\n        getScopeMapFromContext: function getScopeMapFromContext(map, context, scope) {\n            // need a clone of the map as we will change some properties\n            var scopeMap = _.cloneDeep(map || {});\n            var part;\n            var section;\n\n            // gets the current part and section\n            if (context && context.testPartId) {\n                part = this.getPart(scopeMap, context.testPartId);\n            }\n            if (context && context.sectionId) {\n                section = this.getSection(scopeMap, context.sectionId);\n            }\n\n            // reduce the map to the scope part\n            if (scope && scope !== 'test') {\n                scopeMap.parts = {};\n                if (part) {\n                    scopeMap.parts[context.testPartId] = part;\n                }\n            }\n\n            // reduce the map to the scope section\n            if (part && (scope === 'section' || scope === 'testSection')) {\n                part.sections = {};\n                if (section) {\n                    part.sections[context.sectionId] = section;\n                }\n            }\n\n            // update the stats to reflect the scope\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            scopeMap.stats = this.computeStats(scopeMap.parts);\n\n            return scopeMap;\n        },\n\n        /**\n         * Gets the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemPart: function getItemPart(map, position) {\n            var jump = this.getJump(map, position);\n            return this.getPart(map, jump && jump.part);\n        },\n\n        /**\n         * Gets the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemSection: function getItemSection(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            return sections && sections[jump && jump.section];\n        },\n\n        /**\n         * Gets the item located at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemAt: function getItemAt(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n            var items = section && section.items;\n            return items && items[jump && jump.identifier];\n        },\n\n        /**\n         * Gets the identifier of an existing item\n         * @param {Object} map - The assessment test map\n         * @param {Number|String} position - The position of the item, can already be the identifier\n         * @returns {String}\n         */\n        getItemIdentifier: function getItemIdentifier(map, position) {\n            var item;\n            if (_.isFinite(position)) {\n                item = this.getItemAt(map, position);\n            } else {\n                item = this.getItem(map, position);\n            }\n            return item && item.id;\n        },\n\n        /**\n         * Applies a callback on each item of the provided map\n         * @param {Object} map - The assessment test map\n         * @param {Function} callback(item, section, part, map) - A callback to apply on each item\n         * @returns {Object}\n         */\n        each: function each(map, callback) {\n            if (_.isFunction(callback)) {\n                _.forEach(map && map.parts, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            callback(item, section, part, map);\n                        });\n                    });\n                });\n            }\n            return map;\n        },\n\n        /**\n         * Update the map stats from a particular item\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        updateItemStats: function updateItemStats(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            if (map) {\n                map.stats = this.computeStats(map.parts);\n            }\n\n            return map;\n        },\n\n        /**\n         * Computes the stats for a list of items\n         * @param {Object} items\n         * @returns {Object}\n         */\n        computeItemStats: function computeItemStats(items) {\n            return _.reduce(items, function accStats(acc, item) {\n                if (!item.informational) {\n                    acc.questions++;\n\n                    if (item.answered) {\n                        acc.answered++;\n                    }\n                }\n                if (item.flagged) {\n                    acc.flagged++;\n                }\n                if (item.viewed) {\n                    acc.viewed++;\n                }\n                acc.total++;\n                return acc;\n            }, getEmptyStats());\n        },\n\n        /**\n         * Computes the global stats of a collection of stats\n         * @param {Object} collection\n         * @returns {Object}\n         */\n        computeStats: function computeStats(collection) {\n            return _.reduce(collection, function accStats(acc, item) {\n                acc.questions += item.stats.questions;\n                acc.answered += item.stats.answered;\n                acc.flagged += item.stats.flagged;\n                acc.viewed += item.stats.viewed;\n                acc.total += item.stats.total;\n                return acc;\n            }, getEmptyStats());\n        },\n\n        /**\n         * Patch a testMap with a partial testMap.\n         *\n         * If the currentMap is null or the scope is test,\n         * we just use the partialMap as it is.\n         *\n         * Indexes, position and stats will be (re)built.\n         *\n         * @param {Object} currentMap - the map to patch\n         * @param {Object} partialMap - the patch\n         * @param {String} partialMap.scope - indicate the scope of the patch (test, part or section)\n         * @returns {Object} the patched testMap\n         * @throws {TypeError} if the partialMap is no a map\n         */\n        patch : function patch(currentMap, partialMap) {\n            var self = this;\n            var targetMap;\n\n            if(!_.isPlainObject(partialMap) || !partialMap.parts) {\n                throw new TypeError('Invalid test map format');\n            }\n\n            if(!currentMap || partialMap.scope === 'test'){\n                targetMap = _.cloneDeep(partialMap);\n            } else {\n\n                targetMap = _.cloneDeep(currentMap);\n\n                _.forEach(partialMap.parts, function(partialPart, targetPartId){\n                    if (partialMap.scope === 'part') {\n                        //replace the target part\n                        targetMap.parts[targetPartId] = _.cloneDeep(partialPart);\n                    }\n                    if (partialMap.scope === 'section') {\n                        _.forEach(partialPart.sections, function(partialSection, targetSectionId){\n                            //replace the target section\n                            targetMap.parts[targetPartId].sections[targetSectionId] = _.cloneDeep(partialSection);\n\n                            //compte new section stats\n                            targetMap.parts[targetPartId].sections[targetSectionId].stats = self.computeItemStats(targetMap.parts[targetPartId].sections[targetSectionId].items);\n                        });\n                    }\n                    //compte new/updated part stats\n                    targetMap.parts[targetPartId].stats = self.computeStats(targetMap.parts[targetPartId].sections);\n                });\n                //compte updated test stats\n                targetMap.stats = this.computeStats(targetMap.parts);\n            }\n\n            //the updated map can have a different size than the original\n            targetMap = this.reindex(targetMap);\n\n            return targetMap;\n        },\n\n        /**\n         * Rebuild the indexes, positions of all map parts.\n         * Then recreate the jump table.\n         *\n         * @param {Object} map - the map to reindex\n         * @returns {Object} the brand new map\n         * @throws {TypeError} if the map is no a map\n         */\n        reindex : function reindex(map){\n            var offset        = 0;\n            var offsetPart    = 0;\n            var offsetSection = 0;\n            var lastPartId;\n            var lastSectionId;\n\n            if(!_.isPlainObject(map) || !map.parts) {\n                throw new TypeError('Invalid test map format');\n            }\n\n            //remove the jump table\n            map.jumps = [];\n\n            //browse the test map, by position\n            _.sortBy(map && map.parts, 'position').forEach(function(part) {\n                _.sortBy(part && part.sections, 'position').forEach(function(section) {\n                    _.sortBy(section && section.items, 'position').forEach(function(item) {\n\n                        if(lastPartId !== part.id){\n                            offsetPart = 0;\n                            lastPartId = part.id;\n                            part.position = offset;\n                        }\n                        if(lastSectionId !== section.id){\n                            offsetSection = 0;\n                            lastSectionId = section.id;\n                            section.position = offset;\n                        }\n                        item.position = offset;\n                        item.index    = offsetSection + 1;\n                        item.positionInPart = offsetPart;\n                        item.positionInSection = offsetSection;\n\n                        map.jumps[offset] = {\n                            identifier : item.id,\n                            section    : section.id ,\n                            part       : part.id,\n                            position   : offset\n                        };\n\n                        offset++;\n                        offsetSection++;\n                        offsetPart++;\n                    });\n                });\n            });\n\n            return map;\n        },\n\n        /**\n         * Create the jump table for a test map\n         *\n         * @param {Object} map - the map\n         * @returns {Object} the brand new map with a jump table\n         * @throws {TypeError} if the map is no a map\n         */\n        createJumpTable : function createJumpTable(map){\n\n            if(!_.isPlainObject(map) || !map.parts) {\n                throw new TypeError('Invalid test map format');\n            }\n\n            map.jumps = [];\n\n            this.each(map, function (item, section, part){\n                var offset = item.position;\n                map.jumps[offset] = {\n                    identifier : item.id,\n                    section    : section.id ,\n                    part       : part.id,\n                    position   : offset\n                };\n            });\n\n            return map;\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides information about the current item\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/currentItem',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * List of QTI model cardinalities\n     * @type {Object}\n     */\n    var responseCardinalities = {\n        single: 'base',\n        multiple: 'list',\n        ordered: 'list',\n        record: 'record'\n    };\n\n    /**\n     * @typedef {currentItemHelper}\n     */\n    var currentItemHelper = {\n        /**\n         * Gets the responses declarations of the current item.\n         * @param {Object} runner - testRunner instance\n         * @returns {Object}\n         */\n        getDeclarations: function getDeclarations(runner) {\n            var itemRunner = runner.itemRunner;\n            return itemRunner._item && itemRunner._item.responses;\n        },\n\n        /**\n         * Gets a response declaration by the identifier of the response\n         * @param {Object} runner - testRunner instance\n         * @param {String} identifier - The identifier of the response\n         * @returns {Object|null}\n         */\n        getResponseDeclaration: function getResponseDeclaration(runner, identifier) {\n            var found = null;\n            _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                var attributes = declaration.attributes || {};\n                if (attributes.identifier === identifier) {\n                    found = declaration;\n                    return false;\n                }\n            });\n            return found;\n        },\n\n        /**\n         * Convert a value to a response object\n         * @param {Array|String} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {Object}\n         */\n        toResponse: function toResponse(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n            var response = {};\n\n            if (_.isString(value)) {\n                value = [value];\n            }\n\n            value = _.map(value || [], function (v) {\n                return (baseType === 'boolean') ? (v === true || v === 'true') : v;\n            });\n\n            if (mappedCardinality) {\n                if (mappedCardinality === 'base') {\n                    if (value.length === 0) {\n                        //return empty response:\n                        response.base = null;\n                    } else {\n                        response.base = {};\n                        response.base[baseType] = value[0];\n                    }\n                } else {\n                    response[mappedCardinality] = {};\n                    response[mappedCardinality][baseType] = value;\n                }\n            }\n\n            return response;\n        },\n\n        /**\n         * Checks if the provided value can be considered as null\n         * @param {Object} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {boolean}\n         */\n        isQtiValueNull: function isQtiValueNull(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n\n            if (_.isObject(value) && value[mappedCardinality] === null) {\n                value = null;\n            }\n\n            if (_.isObject(value) && value[mappedCardinality] && 'undefined' !== typeof value[mappedCardinality][baseType]) {\n                value = value[mappedCardinality][baseType];\n            }\n\n            return null === value || ('string' === baseType && _.isEmpty(value)) || (cardinality !== 'single' && _.isEmpty(value));\n        },\n\n        /**\n         * Tells if an item question has been answered or not\n         * @param response\n         * @param baseType\n         * @param cardinality\n         * @param [defaultValue]\n         * @returns {*}\n         */\n        isQuestionAnswered: function isQuestionAnswered(response, baseType, cardinality, defaultValue) {\n            var answered;\n            defaultValue = defaultValue || null;\n            if (currentItemHelper.isQtiValueNull(response, baseType, cardinality)) {\n                answered = false;\n            } else {\n                answered = !_.isEqual(response, currentItemHelper.toResponse(defaultValue, baseType, cardinality));\n            }\n            return answered;\n        },\n\n        /**\n         * Tells is the current item has been answered or not\n         * The item is considered answered when at least one response has been set to not empty {base : null}\n         * @param {Object} runner - testRunner instance\n         * @param {Boolean} [partially = true] - if false all questions must have been answered\n         * @returns {Boolean}\n         */\n        isAnswered: function isAnswered(runner, partially) {\n            var itemRunner = runner.itemRunner;\n            var responses = itemRunner && itemRunner.getResponses();\n            var count = 0;\n            var empty = 0;\n\n            if (itemRunner) {\n                _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                    var attributes = declaration.attributes || {};\n                    var response = responses[attributes.identifier];\n                    var baseType = attributes.baseType;\n                    var cardinality = attributes.cardinality;\n\n                    count++;\n                    if (!currentItemHelper.isQuestionAnswered(response, baseType, cardinality, declaration.defaultValue)) {\n                        empty++;\n                    }\n                });\n            }\n            if( partially === false ){\n                return count > 0 && empty === 0;\n            }\n            return count > 0 && empty < count;\n        }\n    };\n\n    return currentItemHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides more statistics about the test\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/stats',[\n    'lodash',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/currentItem'\n], function (_, mapHelper, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Return scope stats that takes into account any test taker interaction made since the item has been loaded\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {Object}\n     */\n    function getInstantStats(scope, runner) {\n        var map = runner.getTestMap(),\n            context = runner.getTestContext(),\n            stats = _.clone(mapHelper.getScopeStats(map, context.itemPosition, scope)),\n            item = mapHelper.getItemAt(map, context.itemPosition),\n            isItemCurrentlyAnswered;\n\n        if (!item.informational) {\n            isItemCurrentlyAnswered = currentItemHelper.isAnswered(runner);\n            if (!isItemCurrentlyAnswered && context.itemAnswered) {\n                stats.answered--;\n\n            } else if (isItemCurrentlyAnswered && !context.itemAnswered) {\n                stats.answered++;\n            }\n        }\n\n        return stats;\n    }\n\n    return {\n        getInstantStats: getInstantStats\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/messages',[\n    'lodash',\n    'i18n',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats'\n], function (_, __, mapHelper, statsHelper) {\n    'use strict';\n\n    /**\n     * Completes an exit message\n     * @param {String} message - custom message that will be appended to the unanswered stats count\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {String} Returns the message text\n     */\n    function getExitMessage(message, scope, runner) {\n        var itemsCountMessage = '';\n\n        var testData = runner.getTestData(),\n            testConfig = testData && testData.config,\n            messageEnabled = testConfig ? testConfig.enableUnansweredItemsWarning : true;\n\n        if (messageEnabled) {\n            itemsCountMessage = getUnansweredItemsWarning(scope, runner);\n        }\n\n        return (itemsCountMessage + \" \" + message).trim();\n    }\n\n    /**\n     * Build message if not all items have answers\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {String} Returns the message text\n     */\n    function getUnansweredItemsWarning(scope, runner) {\n        var stats = statsHelper.getInstantStats(scope, runner);\n        var unansweredCount = stats && (stats.questions - stats.answered);\n        var flaggedCount = stats && stats.flagged;\n        var itemsCountMessage = '';\n\n        if (scope === 'section' || scope === 'testSection'){\n            if (unansweredCount === 0) {\n                itemsCountMessage = __('You answered all %s question(s) in this section', stats.questions.toString());\n            } else {\n                itemsCountMessage = __('You answered only %s of the %s question(s) in this section',\n                    stats.answered.toString(),\n                    stats.questions.toString()\n                );\n            }\n            if (flaggedCount) {\n                itemsCountMessage += ', ' + __('and flagged %s of them', flaggedCount.toString());\n            }\n        } else if(scope === 'test') {\n            if (unansweredCount === 0) {\n                itemsCountMessage = __('You answered all %s question(s) in this test', stats.questions.toString());\n            } else {\n                itemsCountMessage = __('You have %s unanswered question(s)', unansweredCount.toString());\n            }\n            if (flaggedCount) {\n                itemsCountMessage += ' ' + __('and you flagged %s item(s) that you can review now', flaggedCount.toString());\n            }\n        } else if(scope === 'part') {\n            if (unansweredCount === 0) {\n                itemsCountMessage = __('You answered all %s question(s)', stats.questions.toString());\n            } else {\n                itemsCountMessage = __('You have %s unanswered question(s)', unansweredCount.toString());\n            }\n            if (flaggedCount) {\n                itemsCountMessage += ' ' + __('and you flagged %s item(s) that you can review now', flaggedCount.toString());\n            }\n        }\n\n        if (itemsCountMessage) {\n            itemsCountMessage += '.';\n        }\n        return itemsCountMessage;\n    }\n\n    return {\n        getExitMessage: getExitMessage\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides information about the test navigation\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/helpers/navigation',[\n    'lodash',\n    'taoQtiTest/runner/helpers/map'\n], function (_, mapHelper) {\n    'use strict';\n\n    /**\n     * @typedef {Object} navigationHelper\n     */\n    var navigationHelper = {\n\n        /**\n         * Check whether the test taker is leaving a section\n         *\n         * @param {Object} testContext - the actual test context\n         * @param {String} testContext.itemIdentifier - the id of the current item\n         * @param {String} testContext.sectionId - the id of the current section\n         * @param {Object} testMap - the actual test map\n         * @param {String} direction - the move direction (next, previous or jump)\n         * @param {String} scope - the move scope (item, section, testPart)\n         * @param {Number} [position] - the position in case of jump\n         * @returns {Boolean} true if the action leads to a section leave\n         * @throws {TypeError} if the context or the map are incorrect\n         */\n        isLeavingSection : function isLeavingSection(testContext, testMap, direction, scope, position){\n            var section;\n            var sectionStats;\n            var nbItems;\n            var item;\n            if( _.isPlainObject(testContext) && _.isPlainObject(testMap) &&\n                !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier) ){\n\n                section = mapHelper.getSection(testMap, testContext.sectionId);\n                sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\n                nbItems = sectionStats && sectionStats.total;\n                item = mapHelper.getItem(testMap, testContext.itemIdentifier);\n\n                return  scope === 'section' ||\n                        scope === 'testPart'||\n                        (direction === 'next' && item.positionInSection + 1 === nbItems) ||\n                    (direction === 'previous' && item.positionInSection === 0) ||\n                    (direction === 'jump' && position > 0 && (position < section.position || position >= section.position + nbItems));\n            }\n            throw new TypeError('Invalid test context and test map');\n        },\n\n        /**\n         * Check whether the test taker is leaving a test part\n         *\n         * @param {Object} testContext - the actual test context\n         * @param {String} testContext.itemIdentifier - the id of the current item\n         * @param {String} testContext.sectionId - the id of the current section\n         * @param {String} testContext.testPartId - the id of the current testPart\n         * @param {Object} testMap - the actual test map\n         * @param {String} direction - the move direction (next, previous or jump)\n         * @param {String} scope - the move scope (item, section, testPart)\n         * @param {Number} [position] - the position in case of jump\n         * @returns {Boolean} true if the action leads to a section leave\n         * @throws {TypeError} if the context or the map are incorrect\n         */\n        isLeavingTestPart : function isLeavingTestPart(testContext, testMap, direction, scope, position){\n            var testPart;\n            var testPartStats;\n            var nbItems;\n            var item;\n            var section;\n            var sectionStats;\n            if( _.isPlainObject(testContext) && _.isPlainObject(testMap) &&\n               !_.isEmpty(testContext.testPartId) && !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier) ){\n\n                testPart      = mapHelper.getPart(testMap, testContext.testPartId);\n                testPartStats = mapHelper.getPartStats(testMap, testContext.testPartId);\n                nbItems       = testPartStats && testPartStats.total;\n                item          = mapHelper.getItem(testMap, testContext.itemIdentifier);\n\n                if(scope === 'section'){\n                    section = mapHelper.getSection(testMap, testContext.sectionId);\n                    sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\n                }\n\n                return  scope === 'testPart'||\n                        (direction === 'next' && scope === 'item' && item.positionInPart + 1 === nbItems) ||\n                        (direction === 'next' && scope === 'section' && section.position + sectionStats.total >= nbItems) ||\n                        (direction === 'previous' && scope === 'item' && item.positionInPart === 0) ||\n                        (direction === 'previous' && scope === 'section' && section.position === testPart.position) ||\n                        (direction === 'jump' && position > 0 && (position < testPart.position || position >=  testPart.position + nbItems));\n            }\n            throw new TypeError('Invalid test context and test map');\n        },\n\n        /**\n         * Check if the given  item is the last of the test\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @returns {Boolean} true if the item is the last one\n         */\n        isLast : function isLast(testMap, itemIdentifier){\n            return this.isLastOf(testMap, itemIdentifier, 'test');\n        },\n\n        /**\n         * Check if the given  item is the first of a test\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @returns {Boolean} true if the item is the first one\n         */\n        isFirst : function isFirst(testMap, itemIdentifier){\n            return this.isFirstOf(testMap, itemIdentifier, 'test');\n        },\n\n        /**\n         * Check if the given  item is the last of a the given scope\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @param {String} [scope = 'test'] - the target scope\n         * @returns {Boolean} true if the item is the last one\n         */\n        isLastOf : function isLastOf(testMap, itemIdentifier, scope){\n            var item;\n            var stats;\n            if ( ! _.isPlainObject(testMap) ) {\n                throw new TypeError('Invalid test map');\n            }\n            if (_.isEmpty(itemIdentifier)) {\n                throw new TypeError('Invalid item identifier');\n            }\n            scope = scope || 'test';\n            item  = mapHelper.getItem(testMap, itemIdentifier);\n            stats = mapHelper.getScopeStats(testMap, item.position, scope);\n            if (stats && _.isNumber(stats.total)) {\n                if (scope === 'test') {\n                    return item.position + 1  === stats.total;\n                }\n                if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\n                    return item.positionInSection + 1 === stats.total;\n                }\n                if (scope === 'part' || scope === 'testPart') {\n                    return item.positionInPart + 1 === stats.total;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Check if the given  item is the first of a the given scope\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @param {String} [scope = 'test'] - the target scope\n         * @returns {Boolean} true if the item is the first one\n         */\n        isFirstOf : function isFirstOf(testMap, itemIdentifier, scope){\n            var item;\n            if (! _.isPlainObject(testMap)) {\n                throw new TypeError('Invalid test map');\n            }\n            if (_.isEmpty(itemIdentifier)) {\n                throw new TypeError('Invalid item identifier');\n            }\n            scope = scope || 'test';\n            item  = mapHelper.getItem(testMap, itemIdentifier);\n\n            if (scope === 'test') {\n                return item.position  === 0;\n            }\n            if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\n                return item.positionInSection === 0;\n            }\n            if (scope === 'part' || scope === 'testPart') {\n                return item.positionInPart === 0;\n            }\n\n            return false;\n        },\n\n        /**\n         * Gets the map descriptors of the sibling items\n         * @param {Object} testMap\n         * @param {Number|String} itemPosition - (could be also the item id)\n         * @param {String} [direction='both'] - previous/next/both\n         * @param {Number} [size=3] - will be 2xsize if direction is both\n         * @returns {Object[]} the collections of items\n         */\n        getSiblingItems: function getSiblingItems(testMap, itemPosition, direction, size) {\n            var itemId = mapHelper.getItemIdentifier(testMap,  itemPosition);\n            var previous = null;\n            var siblings = [];\n            var directions;\n\n            var itemChain = _.reduce(testMap && testMap.jumps, function (map, jump) {\n                var ref = jump.identifier;\n                if (previous) {\n                    map[previous].next = ref;\n                }\n                map[ref] = {\n                    identifier: ref,\n                    previous: previous,\n                    next: null\n                };\n                previous = ref;\n                return map;\n            }, {});\n\n            size = _.isFinite(size) ? parseInt(size, 10) : 3;\n            if (!direction || direction === 'both') {\n                directions = ['previous', 'next'];\n            } else {\n                directions = [direction];\n            }\n\n            _.forEach(directions, function walkDirection(link) {\n                var id = itemId;\n                _.times(size, function getNeighbor() {\n                    id = itemChain[id] && itemChain[id][link];\n                    if (id) {\n                        siblings.push(mapHelper.getItem(testMap, id));\n                    } else {\n                        return false;\n                    }\n                });\n            });\n\n            return siblings;\n        },\n\n\n        /**\n         * Gets the map descriptor of the next item\n         * @param {Object} testMap\n         * @param {Number|String} itemPosition - (could be also the item id)\n         * @returns {Object}\n         */\n        getNextItem : function getNextItem(testMap, itemPosition) {\n            var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'next', 1);\n            if (siblings.length) {\n                return siblings[0];\n            }\n            return null;\n        },\n\n        /**\n         * Gets the map descriptor of the previous item\n         * @param {Object} testMap\n         * @param {Number|String} itemPosition - (could be also the item id)\n         * @returns {Object}\n         */\n        getPreviousItem : function getPreviousItem(testMap, itemPosition) {\n            var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'previous', 1);\n            if (siblings.length) {\n                return siblings[0];\n            }\n            return null;\n        },\n\n        /**\n         * Checks if an action will move forward.\n         * @param {String} action - the name of the action that will be performed\n         * @param {Object} [params] - some optional parameters that apply to the action\n         * @returns {Boolean}\n         */\n        isMovingToNextItem : function isMovingToNextItem(action, params) {\n            params = params || {};\n            return (\n                action === 'timeout' ||\n                action === 'skip' ||\n                (action === 'move' && params.direction === 'next' && params.scope === 'item')\n            );\n        },\n\n        /**\n         * Checks if an action will move backward.\n         * @param {String} action - the name of the action that will be performed\n         * @param {Object} [params] - some optional parameters that apply to the action\n         * @returns {Boolean}\n         */\n        isMovingToPreviousItem : function isMovingToPreviousItem(action, params) {\n            params = params || {};\n            return (\n                action === 'move' && params.direction === 'previous' && params.scope === 'item'\n            );\n        },\n\n        /**\n         * Checks if an action will jump on another item.\n         * @param {String} action - the name of the action that will be performed\n         * @param {Object} [params] - some optional parameters that apply to the action\n         * @returns {Boolean}\n         */\n        isJumpingToItem : function isJumpingToItem(action, params) {\n            params = params || {};\n            return (\n                action === 'move' && params.direction === 'jump' && params.scope === 'item'\n            );\n        }\n\n    };\n\n    return navigationHelper;\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/timers', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"timer-box\\\">\\n    <a href=\\\"#\\\" class=\\\"timer-toggler hidden\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide timers\", options) : helperMissing.call(depth0, \"__\", \"Hide timers\", options)))\n    + \"\\\"><span class=\\\"icon-clock\\\"></span></a>\\n    <div class=\\\"timer-wrapper\\\"></div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Timer\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timer',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'core/polling',\n    'core/timer',\n    'core/store',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/controls/timer/timerComponent',\n    'taoQtiTest/runner/helpers/messages',\n    'taoQtiTest/runner/helpers/navigation',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/timers'\n], function($, _, __, Promise, pollingFactory, timerFactory, store, hider, pluginFactory, timerComponentFactory, messages, navigationHelper, timerBoxTpl) {\n    'use strict';\n\n    /**\n     * Time interval between timer refreshes, in milliseconds\n     * @type {Number}\n     */\n    var timerRefresh = 1000;\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * The message to display when exiting\n     */\n    var exitMessage = __('Once you close this section, you cannot return to it or change your answers.');\n\n\n    var timerTypes = {\n        test: 'assessmentTest',\n        testPart: 'testPart',\n        section: 'assessmentSection',\n        item: 'assessmentItemRef'\n    };\n\n    /**\n     * Are we in a timed section\n     * @param {Object} context - the current test context\n     * @returns {Boolean}\n     */\n    var isTimedSection = function isTimedSection(context) {\n        var timeConstraints = context.timeConstraints || [];\n        return _.some(timeConstraints, function(constraint) {\n            return constraint.qtiClassName === 'assessmentSection';\n        });\n    };\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'timer',\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            //the storechange event is fired early (before runner's init is done)\n            //so we attach the handler early\n            var testRunner = this.getTestRunner();\n            testRunner.on('storechange', function handleStoreChange() {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self         = this;\n            var testRunner   = this.getTestRunner();\n            var testData     = testRunner.getTestData() || {};\n            var itemStates   = testData.itemStates || {};\n            var timerWarning = testData.config && testData.config.timerWarning || {};\n\n            var displayedTimers = {};\n            var timers = {};\n\n            var extraTime = 0;\n            var consumedExtraTime = 0;\n            var lastConsumedExtraTime = 0;\n\n            /**\n             * Gets the remaining extra time, if any\n             * @returns {Number} the remaining extra time in milliseconds\n             */\n            var getRemainingExtraTime = function getRemainingExtraTime(extra) {\n                if (extra) {\n                    extraTime = extra;\n                }\n                return Math.max(0, extraTime - consumedExtraTime) * precision;\n            };\n\n            /**\n             * Sets correctly the remaining time on a timer config set\n             * @param {Object} timerConfig\n             * @param {Number} remaining\n             * @returns {Object}\n             */\n            var setRemainingTime = function setRemainingTime(timerConfig, remaining) {\n                // will display the timer with extra time, if any\n                timerConfig.remaining = remaining + getRemainingExtraTime(timerConfig.extra);\n\n                // keep track of the regular timer, without extra time\n                timerConfig.regular = remaining;\n\n                return timerConfig;\n            };\n\n            /**\n             * Load the configuration of a timer from the current context\n             * @param {String} type - the timer type/qtiClass\n             * @returns {Object} the timer config if there's one for the given type\n             */\n            var getTimerConfig = function getTimerConfig(type) {\n                var timeConstraint;\n                var timer;\n                var closestPreviousWarning;\n                var context = testRunner.getTestContext();\n\n                // get the config of each timer\n                if (!context.isTimeout && context.itemSessionState === itemStates.interacting) {\n                    timeConstraint = _.findLast(context.timeConstraints, {\n                        qtiClassName: type\n                    });\n                    if (timeConstraint) {\n                        timer = setRemainingTime({\n                            label: timeConstraint.label,\n                            extra: timeConstraint.extraTime,\n                            type: timeConstraint.qtiClassName,\n                            id: timeConstraint.source,\n                            running: true,\n                            warnings: {}\n                        }, timeConstraint.seconds * precision);\n\n                        _(timerWarning[timeConstraint.qtiClassName]).forEach(function(value, key) {\n                            if (_.contains(['info', 'warning', 'danger'], value)) {\n                                timer.warnings[key] = {\n                                    type: value,\n                                    showed: timer.remaining / precision <= key,\n                                    point: parseInt(key, 10) * precision\n                                };\n                            }\n                        });\n\n                        closestPreviousWarning = _.find(timer.warnings, {\n                            showed: true\n                        });\n                        if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point && timer.warnings[closestPreviousWarning.point / precision]) {\n                            timer.warnings[closestPreviousWarning.point / precision].showed = false;\n                        }\n                    }\n                }\n                return timer;\n            };\n\n            /**\n             * Check if the movment leads to leaving an active timed section\n             * @param {String} direction - the move direction (next, previous or jump)\n             * @param {String} scope - the move scope (item, section, testPart)\n             * @param {Number} [position] - the position in case of jump\n             * @returns {Boolean}\n             */\n            var leaveTimedSection = function leaveTimedSection(direction, scope, position) {\n                var context = testRunner.getTestContext();\n                var map = testRunner.getTestMap();\n                if (!context.isTimeout && context.itemSessionState !== itemStates.closed && isTimedSection(context)) {\n                    return navigationHelper.isLeavingSection(context, map, direction, scope, position);\n                }\n                return false;\n            };\n\n            /**\n             * Remove a timer from the current ones\n             * @param {String} type - the timer type to remove\n             */\n            var removeTimer = function removeTimer(type) {\n                if (displayedTimers[type]) {\n\n                    displayedTimers[type].destroy();\n                    displayedTimers = _.omit(displayedTimers, type);\n                    timers = _.omit(timers, type);\n\n                    /**\n                     * @event timerPlugin#removetimer\n                     * @param {String} type of timer (such as 'assessmentSection', 'testPart' etc.)\n                     */\n                    self.trigger('removetimer', type);\n                }\n            };\n\n            /**\n             * Add and initialize a timer of the given type\n             * @param {Object} config - the timer config\n             * @param {String} type - the timer type to remove\n             */\n            var addTimer = function addTimer(type, config) {\n                if (config) {\n                    // track the regular remaining timer, without the extra time\n                    timers[type] = config.regular;\n\n                    // creates the component that will display the final timer\n                    displayedTimers[type] = timerComponentFactory(config);\n                    displayedTimers[type]\n                        .init()\n                        .render(self.$element.find('.timer-wrapper'));\n\n                    /**\n                     * @event timerPlugin#addtimer\n                     * @param {String} type of timer (such as 'assessmentSection', 'testPart' etc.)\n                     * @param {Object} timer instance ('core/timer' timer factory).\n                     */\n                    self.trigger('addtimer', type, displayedTimers[type]);\n                }\n            };\n\n            /**\n             * Update the timers.\n             * It will remove, let, add or update the current timers based on the current context.\n             */\n            var updateTimers = function updateTimers(checkStorage) {\n                var timerUpdatePromises = [];\n                var context = testRunner.getTestContext();\n                if (context.extraTime) {\n                    extraTime = context.extraTime.total;\n                    consumedExtraTime = Math.max(consumedExtraTime, context.extraTime.consumed);\n                }\n\n                _.forEach(timerTypes, function(type) {\n                    timerUpdatePromises.push(\n                        new Promise(function(resolve) {\n                            var timerConfig = getTimerConfig(type);\n                            var timerExists = typeof displayedTimers[type] !== 'undefined';\n                            var addAndResolve = function addAndResolve(){\n                                addTimer(type, timerConfig);\n                                return resolve();\n                            };\n\n                            //no new time for this type\n                            if (!timerConfig) {\n                                removeTimer(type);\n                                return resolve();\n                            }\n\n                            //timer exists\n                            if(timerExists && displayedTimers[type].id() === timerConfig.id){\n                                setRemainingTime(timerConfig, timers[type]);\n                                if (timerConfig.remaining !== timers[type]) {\n                                    displayedTimers[type].val(timerConfig.remaining).refresh();\n                                }\n                                return resolve();\n                            } else {\n                                removeTimer(type);\n\n                                if (checkStorage){\n                                    self.storage.getItem(timerConfig.id).then(function(savedTime) {\n                                        if (_.isNumber(savedTime) && savedTime >= 0) {\n                                            setRemainingTime(timerConfig, savedTime);\n                                        }\n                                        return addAndResolve();\n                                    }).catch(function() {\n                                        //add the timer even if the storage doesn't work\n                                        return addAndResolve();\n                                    });\n\n                                } else {\n                                    return addAndResolve();\n                                }\n                            }\n                        })\n                    );\n                });\n                return Promise\n                    .all(timerUpdatePromises)\n                    .then(function(data){\n                        toggleToggler();\n                        return data;\n                    });\n            };\n\n            /**\n             * Secured call to enable\n             */\n            function doEnable() {\n                if (!self.getState('enabled')) {\n                    self.enable();\n                }\n            }\n\n            /**\n             * Secured call to disable\n             */\n            function doDisable() {\n                if (self.getState('enabled')) {\n                    self.disable();\n                }\n            }\n\n            /**\n             * Show/hide the timers akka \"zen mode\"\n             */\n            function toggleZenMode() {\n                if(self.$element.hasClass('zen-mode')){\n                    self.$element.removeClass('zen-mode');\n                    self.$toggler.attr('title', __('Hide timers'));\n                    self.storage.removeItem('zen-mode');\n                } else {\n                    self.$element.addClass('zen-mode');\n                    self.$toggler.attr('title', __('Show timers'));\n                    self.storage.setItem('zen-mode', true);\n                }\n            }\n\n            /**\n             * Hide the toggler without timers,\n             * display it otherwise\n             */\n            function toggleToggler() {\n                if(self.$toggler.length){\n                    if(_.size(timers) > 0){\n                        hider.show(self.$toggler);\n                    } else {\n                        hider.hide(self.$toggler);\n                    }\n                }\n            }\n\n            return store('timer-' + testRunner.getConfig().serviceCallId)\n                .then(function(timeStore) {\n                    if (self.shouldClearStorage) {\n                        return timeStore.clear().then(function() {\n                            return timeStore;\n                        });\n                    }\n                    return Promise.resolve(timeStore);\n                }).then(function(timeStore) {\n\n                    //the timer's storage\n                    self.storage = timeStore;\n\n                    //the element that'll contain the timers\n                    self.$element = $(timerBoxTpl());\n\n                    //used to show/hide the timer\n                    self.$toggler =  self.$element.find('.timer-toggler');\n\n                    //restore the zen mode if set previously\n                    self.storage\n                        .getItem('zen-mode')\n                        .then(function(zenMode){\n                            if(zenMode  && !self.$element.hasClass('zen-mode')){\n                                toggleZenMode();\n                            }\n                        });\n\n                    self.$toggler.on('click', function(e){\n                        e.preventDefault();\n                        toggleZenMode();\n                    });\n\n\n                    //one stopwatch to count the time\n                    self.stopwatch = timerFactory({\n                        autoStart: false\n                    });\n\n                    //update the timers at regular intervals\n                    self.polling = pollingFactory({\n\n                        /**\n                         * The polling action consists in updating each timers,\n                         * checking timeout and warnings\n                         */\n                        action: function updateTime() {\n\n                            //how many time elapsed from the last tick ?\n                            var elapsed = self.stopwatch.tick();\n                            var elapsedExtraTime = 0;\n                            var timeout = false;\n                            var timeoutScope, timeoutRef;\n\n                            _.forEach(displayedTimers, function(timer, type) {\n                                var regularVal,\n                                    displayedVal,\n                                    warning;\n                                var runTimeout = function runTimeout() {\n                                    testRunner.timeout(timeoutScope, timeoutRef);\n                                };\n\n                                if (timer.running()) {\n                                    regularVal = timers[type] - elapsed;\n                                    displayedVal = timer.val() - elapsed;\n                                    timers[type] = Math.max(regularVal, 0);\n                                    timer\n                                        .val(Math.max(displayedVal, 0))\n                                        .refresh();\n\n                                    if (regularVal <= 0) {\n                                        // compute the actual consumed extra time for this period\n                                        elapsedExtraTime = Math.max(elapsedExtraTime, Math.abs(regularVal));\n                                    }\n\n                                    if (displayedVal <= 0) {\n                                        timer.running(false);\n                                        timeout = true;\n                                        timeoutRef = timer.id();\n                                        timeoutScope = type;\n\n                                        self.storage.setItem(timer.id(), 0)\n                                            .then(runTimeout)\n                                            .catch(runTimeout);\n\n                                    } else {\n                                        self.storage.setItem(timer.id(), timers[type]);\n                                        warning = timer.warn();\n                                        if (!_.isEmpty(warning)) {\n                                            testRunner.trigger(warning.type, warning.text);\n                                        }\n                                    }\n                                }\n                            });\n                            if (elapsedExtraTime) {\n                                consumedExtraTime += elapsedExtraTime / precision;\n                                lastConsumedExtraTime += elapsedExtraTime;\n                            }\n                            if (timeout) {\n                                self.disable();\n                            }\n                        },\n                        interval: timerRefresh,\n                        autoStart: false\n                    });\n\n                    //change plugin state\n                    testRunner\n                        .before('renderitem resumeitem', function() {\n                            return updateTimers(true);\n                        })\n                        .on('enableitem', doEnable)\n                        .on('disableitem', doDisable)\n                        .after('renderitem', doEnable)\n                        .before('move skip', function(e, type, scope, position) {\n                            var context = testRunner.getTestContext();\n                            var testDataBeforeMove = testRunner.getTestData();\n                            var config = testDataBeforeMove && testDataBeforeMove.config;\n                            var timerConfig = config && config.timer || {};\n                            var options = context && context.options || {};\n                            var movePromise = new Promise(function(resolve, reject) {\n                                // endTestWarning has already been displayed, so we don't repeat the warning\n                                if (context.isLast && options.endTestWarning) {\n                                    resolve();\n                                    // display a message if we exit a timed section\n                                } else if (leaveTimedSection(type || 'next', scope, position) && !options.noExitTimedSectionWarning && !timerConfig.keepUpToTimeout) {\n                                    testRunner.trigger(\n                                        'confirm.exittimed',\n                                        messages.getExitMessage(exitMessage, 'section', testRunner),\n                                        resolve,\n                                        reject,\n                                        {\n                                            buttons: {\n                                                labels: {\n                                                    ok : __('Close this Section'),\n                                                    cancel : __('Review my Answers')\n                                                }\n                                            }\n                                        });\n                                } else {\n                                    resolve();\n                                }\n                            });\n\n                            movePromise\n                                .catch(function cancelMove() {\n                                    // Use `defer` to be sure the timer resume will occur after the move event is\n                                    // finished to be handled. Otherwise, the duration plugin will be frozen and\n                                    // the additional time will not be taken into account!\n                                    _.defer(function() {\n                                        testRunner.trigger('enableitem enablenav');\n                                    });\n                                });\n\n                            return movePromise;\n                        })\n                        .on('move', function () {\n                            doDisable();\n                            removeTimer(timerTypes.item);\n                        })\n                        .before('move skip exit timeout', function() {\n                            testRunner.getProxy().addCallActionParams({\n                                consumedExtraTime: lastConsumedExtraTime / precision\n                            });\n                            lastConsumedExtraTime = 0;\n                        })\n                        .before('finish', function() {\n                            return new Promise(function(resolve) {\n                                self.storage.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.polling.stop();\n            this.stopwatch.stop();\n            this.$element.remove();\n        },\n\n        /**\n         * Enables the timers\n         */\n        enable: function enable() {\n            this.polling.start();\n            this.stopwatch.resume();\n        },\n\n        /**\n         * Disables the timers\n         */\n        disable: function disable() {\n            this.polling.stop();\n            this.stopwatch.pause();\n        },\n\n        /**\n         * Shows the timers\n         */\n        show: function show() {\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hides the timers\n         */\n        hide: function hide() {\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/title/title', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n        <span data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"qti-controls\\\" title=\\\"\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  stack1 = helpers.unless.call(depth0, (data == null || data === false ? data : data.first), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \" - \";\n  }\n\n  buffer += \"<div class=\\\"title-box truncate\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Title\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/title/title',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/title/title'\n], function ($, __, pluginFactory, titleTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'title',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n\n            var createElement = function(){\n\n                var context  = testRunner.getTestContext();\n                var titles =  [{\n                    control : 'qti-test-title',\n                    text    : testData.title\n                }];\n               if(context.isDeepestSectionVisible){\n                    titles.push({\n                        control : 'qti-test-position',  //WTF !? isn't it the section title... ?\n                        text    : context.sectionTitle\n                    });\n                }\n\n                return $(titleTpl({ titles : titles }));\n            };\n\n            this.$element = createElement();\n\n\n            testRunner\n                .after('renderitem', function(){\n                    var $element = createElement();\n                    self.$element.replaceWith($element);\n                    self.$element = $element;\n                });\n\n        },\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Control Plugin : Item Trace Variables\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/trace/itemTraceVariables',[\n    'lodash',\n    'moment',\n    'core/store',\n    'taoTests/runner/plugin'\n], function (_, moment, storeFactory, pluginFactory) {\n    'use strict';\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * Gets the current timestamp\n     * @returns {Number}\n     */\n    function timestamp() {\n        return Date.now() / precision;\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'itemTraceVariables',\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            self.getTestRunner().on('storechange', function () {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var variables = {};\n\n            function onError(err) {\n                testRunner.trigger('error', err);\n            }\n\n            return storeFactory('trace-' + testRunner.getConfig().serviceCallId)\n                .then(function (tracesStore) {\n                    if (self.shouldClearStorage) {\n                        return tracesStore.clear().then(function () {\n                            return tracesStore;\n                        });\n                    }\n                    return tracesStore;\n                }).then(function (tracesStore) {\n                    testRunner\n                        .after('renderitem enableitem', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables = {\n                                ITEM_START_TIME_CLIENT: timestamp()\n                            };\n\n                            tracesStore.getItem(context.itemIdentifier)\n                                .then(function (data) {\n                                    if (data) {\n                                        _.merge(variables, data);\n                                    }\n\n                                    return tracesStore.setItem(context.itemIdentifier, variables);\n                                })\n                                .catch(onError);\n                        })\n\n                        .before('move skip exit timeout', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables.ITEM_END_TIME_CLIENT = timestamp();\n                            variables.ITEM_TIMEZONE = moment().utcOffset(moment().utcOffset()).format('Z');\n\n                            return tracesStore.setItem(context.itemIdentifier, variables).catch(onError);\n                        })\n\n                        .before('unloaditem', function () {\n                            var context = testRunner.getTestContext();\n                            return testRunner.getProxy().callItemAction(context.itemIdentifier, 'storeTraceData', {\n                                traceData: JSON.stringify(variables)\n                            }, true);\n                        })\n\n                        .before('finish', function () {\n                            return new Promise(function (resolve) {\n                                tracesStore.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_allowSkipping\n *\n * An item is defined to be skipped if the candidate has not provided any\n * response. In other words, all response variables are submitted with their\n * default value or are NULL. This definition is consistent with the\n * numberResponded operator available in outcomeProcessing. If 'false',\n * candidates are not allowed to skip the item, or in other words, they are not\n * allowed to submit the item until they have provided a non-default value for\n * at least one of the response variables. By definition, an item with no\n * response variables cannot be skipped. The value of this attribute is only\n * applicable when the item is in a testPart with individual submission mode.\n * Note that if allowSkipping is 'true' delivery engines must ensure that the\n * candidate can choose to submit no response, for example, through the\n * provision of a \"skip\" button.\n */\n\ndefine('taoQtiTest/runner/plugins/navigation/allowSkipping',[\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/currentItem'\n], function(_, __, pluginFactory, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Plugin factory\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'allowSkipping',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         * @returns {this}\n         */\n        init: function init() {\n            this.getTestRunner().before('move', function () {\n                var self = this;\n                var testContext = this.getTestContext();\n                var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');\n\n                if ( isInteracting && testContext.enableAllowSkipping && !testContext.allowSkipping ) {\n\n                    return new Promise(function (resolve, reject) {\n                        if(_.size(currentItemHelper.getDeclarations(self)) === 0){\n                            return resolve();\n                        }\n                        if (currentItemHelper.isAnswered(self, true)) {\n                            return resolve();\n                        }\n\n                        if (!self.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\n                            self.setState('alerted.notallowed', true);\n                            self.trigger(\n                                'alert.notallowed',\n                                __('A response to this item is required.'),\n                                function () {\n                                    self.trigger('resumeitem');\n                                    reject();\n                                    self.setState('alerted.notallowed', false);\n                                }\n                            );\n                        }\n                    });\n                }\n            });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * This is a helper for navigation plugins. It decides if a warning should be displayed\n * before actually moving to the next item\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',[], function () {\n    'use strict';\n\n    /**\n     * Convert a value to a boolean\n     * @param {*} value\n     * @param {Boolean} defaultValue\n     * @returns {Boolean}\n     */\n    var toBoolean = function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    };\n\n    /**\n     * @param {Object} options\n     * @param {Boolean} options.endTestWarning - enables the end test warning, when applicable\n     * @param {Boolean} options.isLast - if the item is the last of the test\n     * @param {Boolean} options.isLinear - if the current part is linear\n     * @param {Boolean} options.nextItemWarning - enables the next item warning, when applicable\n     * @param {Boolean} options.nextPartWarning - enables the next item warning on part change\n     * @param {Boolean} options.stats - current state of the test\n     * @param {Object} options.nextPart - description of the next part of the test\n     * @param {Number} options.remainingAttempts - remaining attempts for the current item\n     * @param {String} options.testPartId - current test part identifier\n     * @param {Boolean} options.unansweredOnly - warn only if there are unanswered/flagged items\n     * @returns {Object}\n     */\n    var nextWarningHelper = function nextWarningHelper(options) {\n        var endTestWarning      = toBoolean(options.endTestWarning, false),\n            isLast              = toBoolean(options.isLast, false),\n            isLinear            = toBoolean(options.isLinear, false),\n            nextItemWarning     = toBoolean(options.nextItemWarning, false),\n            nextPartWarning     = toBoolean(options.nextPartWarning, false),\n            stats               = options.stats,\n            nextPart            = options.nextPart || {},\n            remainingAttempts   = typeof(options.remainingAttempts) === 'undefined' ? -1 : options.remainingAttempts,\n            testPartId          = options.testPartId || '',\n            unansweredOnly      = toBoolean(options.unansweredOnly, false),\n\n            warnBeforeNext = shouldWarnBeforeNext(),\n            warnBeforeEnd = shouldWarnBeforeEnd();\n\n        /**\n         * Decide if we should display a warning before moving to the next item.\n         * This is useful to prevent accidental navigation (for example by pressing a shortcut) that would occur\n         * before the test taker actually gets a chance to answer an item\n         */\n        function shouldWarnBeforeNext() {\n            return nextItemWarning\n                && !itemCanBeTriedAtWill();\n                //&& !exitTimedSectionWarning(); //todo: this should be implemented to prevent a double warning!\n        }\n\n        /**\n         * We try to decide if the test taker has the freedom to come back to this item as many times as he wants\n         */\n        function itemCanBeTriedAtWill() {\n            return (\n                isLast === false                // the test is not over\n                && isLinear === false           // the context is not linear\n                && remainingAttempts === -1     // the item doesn't have a configured max attempts number\n                && !isNextItemInLinearPart()    // the next item is not in a linear part\n            );\n        }\n\n        /**\n         * Check if the next item is in a linear part, as this would prevent the test taker to come back to the current item\n         */\n        function isNextItemInLinearPart() {\n            return nextPart && typeof nextPart.isLinear !== 'undefined'\n                && isLastOfPart()\n                && nextPart.isLinear === true;\n        }\n\n        /**\n         * Decide if we should display a warning before ending the test\n         */\n        function shouldWarnBeforeEnd() {\n            return shouldWarnOnTestEnd()\n                || shouldWarnOnPartChange();\n        }\n\n        /**\n         * Are we on the last test item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnTestEnd() {\n            return isLast\n                && (\n                    endTestWarning                      // warning is explicitly required by endTestWarning category\n                    || warnBeforeNext                   // warning is implicitly triggered by the next item warning being true (prevent double warning)\n                )\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Provide the opportunity to cancel the display of the warning if there are no unanswered/flagged item\n         * for this to work, the unansweredOnly option has to be set\n         * @returns {Boolean}\n         */\n        function shouldWarnForUnansweredItems() {\n            var hasUnanswered = stats && ((stats.questions - stats.answered) !== 0),\n                hasFlagged = stats && stats.flagged !== 0;\n\n            if (unansweredOnly) {\n                return (hasUnanswered || hasFlagged);\n            } else {\n                return true;\n            }\n        }\n\n        /**\n         * Are we on the last part item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnPartChange() {\n            return nextPartWarning\n                && isLastOfPart()\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Check if the next item belong to a different part\n         * @returns {Boolean}\n         */\n        function isLastOfPart() {\n            return nextPart && nextPart.id\n                && testPartId !== nextPart.id;\n        }\n\n        /**\n         * The helper object\n         */\n        return {\n            shouldWarnBeforeEnd: function () {\n                return warnBeforeEnd;\n            },\n            shouldWarnBeforeNext: function () {\n                return warnBeforeNext;\n            }\n        };\n    };\n\n    return nextWarningHelper;\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',\n    'taoQtiTest/runner/helpers/messages',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, nextWarningHelper, messages, mapHelper, statsHelper, shortcut, namespaceHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('Next')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('End test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'next';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'next';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n\n            if(dataType === 'next'){\n                $element.find('.icon-' + buttonData.end.icon)\n                        .removeClass('icon-' + buttonData.end.icon)\n                        .addClass('icon-' + buttonData.next.icon);\n            } else {\n                $element.find('.icon-' + buttonData.next.icon)\n                        .removeClass('icon-' + buttonData.next.icon)\n                        .addClass('icon-' + buttonData.end.icon);\n            }\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'next',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            //plugin behavior\n            /**\n             * @param {Boolean} nextItemWarning - enable the display of a warning when going to the next item.\n             * Note: the actual display of the warning depends on other conditions (see nextWarningHelper)\n             */\n            function doNext(nextItemWarning) {\n                var context = testRunner.getTestContext(),\n                    testOptions = context.options || {};\n\n                var map = testRunner.getTestMap();\n                var nextItemPosition = context.itemPosition + 1;\n\n                // x-tao-option-unansweredWarning is a deprecated option whose behavior now matches the one of\n                // x-tao-option-nextPartWarning with the unansweredOnly option\n                var nextPartWarning = testOptions.nextPartWarning || testOptions.unansweredWarning;\n                var unansweredOnly =\n                    !testOptions.endTestWarning // this check to avoid an edge case where having both endTestWarning\n                                                // and unansweredWarning options would prevent endTestWarning to behave normally\n                    && testOptions.unansweredWarning;\n\n                var warningScope = (nextPartWarning) ? 'part' : 'test';\n\n                var warningHelper = nextWarningHelper({\n                    endTestWarning:     testOptions.endTestWarning,\n                    isLast:             context.isLast,\n                    isLinear:           context.isLinear,\n                    nextItemWarning:    nextItemWarning,\n                    nextPartWarning:    nextPartWarning,\n                    nextPart:           mapHelper.getItemPart(map, nextItemPosition),\n                    remainingAttempts:  context.remainingAttempts,\n                    testPartId:         context.testPartId,\n                    unansweredWarning:  testOptions.unansweredWarning,\n                    stats:              statsHelper.getInstantStats(warningScope, testRunner),\n                    unansweredOnly:     unansweredOnly\n                });\n\n                function enableNav() {\n                    testRunner.trigger('enablenav');\n                }\n\n                testRunner.trigger('disablenav');\n\n                if(self.getState('enabled') !== false) {\n\n                    if (warningHelper.shouldWarnBeforeEnd()) {\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                warningScope, testRunner),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enableNav                              // if he refuse\n                        );\n\n                    } else if (warningHelper.shouldWarnBeforeNext()) {\n                        testRunner.trigger(\n                            'confirm.next',\n                            __('You are about to go to the next item. Click OK to continue and go to the next item.'),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enableNav                              // if he refuse\n                        );\n\n                    } else {\n                        triggerNextAction(context);\n                    }\n                }\n            }\n\n            function triggerNextAction(context) {\n                if(context.isLast){\n                    self.trigger('end');\n                }\n                testRunner.next();\n            }\n\n            //create the button (detached)\n            this.$element = createElement(testRunner.getTestContext());\n\n            //attach behavior\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-next');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\n                    if (self.getState('enabled') === true) {\n                        testRunner.trigger('nav-next', true);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //disabled by default\n            this.disable();\n\n            //change plugin state\n            testRunner\n                .on('loaditem', function(){\n                    updateElement(self.$element, testRunner.getTestContext());\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('nav-next', function(nextItemWarning) {\n                    doNext(nextItemWarning);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next Section\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/nextSection',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'nextsection',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testConfig = testRunner.getTestData().config;\n\n            function toggle(){\n                var options = testRunner.getTestContext().options;\n                if(testConfig.nextSection && (options.nextSection || options.nextSectionWarning)){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function nextSection() {\n                testRunner.next('section');\n            }\n\n            this.$element = $(buttonTpl({\n                control : 'next-section',\n                title   : __('Skip to the next section'),\n                icon    : 'fast-forward',\n                text    : __('Next Section')\n            }));\n\n            this.$element.on('click', function(e){\n                var context = testRunner.getTestContext();\n                var enable = _.bind(self.enable, self);\n                e.preventDefault();\n                if(self.getState('enabled') !== false){\n                    self.disable();\n\n                    if(context.options.nextSectionWarning){\n                        testRunner.trigger(\n                            'confirm.nextsection',\n                            messages.getExitMessage(\n                                __('Once you close this section, you cannot return to it or change your answers.'),\n                                'section', testRunner),\n                            nextSection, // if the test taker accept\n                            enable,      // if the test taker refuse\n                            {\n                                buttons: {\n                                    labels: {\n                                        ok: __('Close this Section'),\n                                        cancel:  __('Review my Answers')\n                                    }\n                                }\n                            }\n                        );\n                    } else {\n                        nextSection();\n                    }\n                }\n            });\n\n            this.disable();\n            toggle();\n\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Previous\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/previous',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/helpers/navigation',\n    'taoQtiTest/runner/helpers/map',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, shortcut, namespaceHelper, navigationHelper, mapHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'previous',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Check if the \"Previous\" functionality should be available or not\n             */\n            var canDoPrevious = function canDoPrevious() {\n                var testMap = testRunner.getTestMap();\n                var context = testRunner.getTestContext();\n                var previousSection;\n                var previousPart;\n\n                //first item of the test\n                if (navigationHelper.isFirst(testMap, context.itemIdentifier)) {\n                    return false;\n                }\n\n                //first item of a section\n                if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'section')) {\n\n                    //when entering an adaptive section,\n                    //you can't leave the section from the beginning\n                    if(context.isCatAdaptive){\n                        return false;\n                    }\n\n                    //if the previous section is adaptive or a timed section\n                    previousSection = mapHelper.getItemSection(testMap, context.itemPosition - 1);\n                    if(previousSection.isCatAdaptive || (previousSection.timeConstraint && !context.options.noExitTimedSectionWarning) ){\n                        return false;\n                    }\n                }\n\n                if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'part')) {\n\n                    //if the previous part is linear, we don't enter it too\n                    previousPart = mapHelper.getItemPart(testMap, context.itemPosition - 1);\n                    if(previousPart.isLinear){\n                        return false;\n                    }\n\n                }\n                return context.isLinear === false && context.canMoveBackward === true;\n            };\n\n            /**\n             * Hide the plugin if the Previous functionality shouldn't be available\n             */\n            var toggle = function toggle(){\n                if(canDoPrevious()){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            };\n\n            //build element (detached)\n            this.$element =  $(buttonTpl({\n                control : 'move-backward',\n                title   : __('Submit and go to the previous item'),\n                icon    : 'backward',\n                text    : __('Previous')\n            }));\n\n            //attach behavior\n            function doPrevious(previousItemWarning) {\n                var context = testRunner.getTestContext();\n\n                function enableNav() {\n                    testRunner.trigger('disablenav');\n                }\n\n                testRunner.trigger('disablenav');\n\n                if(self.getState('enabled') !== false){\n                    if (previousItemWarning && context.remainingAttempts !== -1) {\n                        testRunner.trigger(\n                            'confirm.previous',\n                            __('You are about to go to the previous item. Click OK to continue and go to the previous item.'),\n                            testRunner.previous, // if the test taker accept\n                            enableNav()          // if he refuses\n                        );\n\n                    } else {\n                        testRunner.previous();\n                    }\n                }\n            }\n\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-previous');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function() {\n                    if (canDoPrevious() && self.getState('enabled') === true) {\n                        testRunner.trigger('nav-previous', [true]);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //start disabled\n            toggle();\n            self.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('nav-previous', function(previousItemWarning){\n                    doPrevious(previousItemWarning);\n                });\n        },\n\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n        <ul class=\\\"collapsible-panel plain\\\">\\n            <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n        </ul>\\n    </div>\\n    \";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"(<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"icon-unanswered \";\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \"icon-flagged \";\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"qti-panel qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n    <div class=\\\"qti-navigator-collapsible\\\">\\n        <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n        <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n    </div>\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n\\n    <div class=\\\"qti-navigator-filters\\\">\\n        <ul class=\\\"plain clearfix\\\">\\n            <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n        </ul>\\n    </div>\\n\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\n\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n        <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n        <p class=\\\"qti-navigator-message\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n        </p>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon-up\\\"></span>\\n            <span class=\\\"icon-down\\\"></span>\\n        </span>\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isLinear), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </li>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n            <p class=\\\"qti-navigator-message\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n            </p>\\n            <p class=\\\"qti-navigator-actions\\\">\\n                <button class=\\\"btn-info small\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-play r\\\"></span>\\n                </button>\\n            </p>\\n        </div>\\n        \";\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        </ul>\\n        \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                    <span class=\\\"qti-navigator-counter\\\">\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.answered)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                </span>\\n                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n            </li>\\n            \";\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-item \";\n  if (helper = helpers.cls) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cls); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></span>\\n                            <span class=\\\"qti-navigator-number\\\">\";\n  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                        </span>\\n                    </li>\\n                    \";\n  return buffer;\n  }\n\n  buffer += \"<ul class=\\\"qti-navigator-parts plain\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/navigator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'ui/autoscroll',\n    'taoQtiTest/runner/helpers/map',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigator',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree'\n], function ($, _, __, component, autoscroll, mapHelper, navigatorTpl, navigatorTreeTpl) {\n    'use strict';\n\n    /**\n     * Some default values\n     * @type {Object}\n     * @private\n     */\n    var _defaults = {\n        scope: 'test',\n        canCollapse: false,\n        preventsUnseen: true,\n        hidden: false\n    };\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active: 'active',\n        collapsed: 'collapsed',\n        collapsible: 'collapsible',\n        hidden: 'hidden',\n        disabled: 'disabled',\n        flagged: 'flagged',\n        answered: 'answered',\n        viewed: 'viewed',\n        unseen: 'unseen',\n        info: 'info',\n        icon: 'qti-navigator-icon',\n        scope: {\n            test: 'scope-test',\n            testPart: 'scope-test-part',\n            testSection: 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of icon CSS classes\n     * @type {Array}\n     * @private\n     */\n    var _iconCls = [\n        _cssCls.info,\n        _cssCls.flagged,\n        _cssCls.answered,\n        _cssCls.viewed\n    ];\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component: '.qti-navigator',\n        filterBar: '.qti-navigator-filters',\n        filter: '.qti-navigator-filter',\n        tree: '.qti-navigator-tree',\n        collapseHandle: '.qti-navigator-collapsible',\n        linearState: '.qti-navigator-linear',\n        infoAnswered: '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed: '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered: '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged: '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel: '.qti-navigator-info',\n        infoPanelLabels: '.qti-navigator-info > .qti-navigator-label',\n        tabInfoAll: '[data-mode=\"all\"] .qti-navigator-counter',\n        tabInfoUnanswered: '[data-mode=\"unanswered\"] .qti-navigator-counter',\n        tabInfoFlagged: '[data-mode=\"flagged\"] .qti-navigator-counter',\n        parts: '.qti-navigator-part',\n        partLabels: '.qti-navigator-part > .qti-navigator-label',\n        sections: '.qti-navigator-section',\n        sectionLabels: '.qti-navigator-section > .qti-navigator-label',\n        items: '.qti-navigator-item',\n        itemLabels: '.qti-navigator-item > .qti-navigator-label',\n        itemIcons: '.qti-navigator-item > .qti-navigator-icon',\n        activeItem: '.qti-navigator-item.active',\n        icons: '.qti-navigator-icon',\n        linearStart: '.qti-navigator-linear-part button',\n        counters: '.qti-navigator-counter',\n        actives: '.active',\n        collapsible: '.collapsible',\n        collapsiblePanels: '.collapsible-panel',\n        unseen: '.unseen',\n        answered: '.answered',\n        flagged: '.flagged',\n        notFlagged: ':not(.flagged)',\n        notAnswered: ':not(.answered)',\n        notInformational: ':not(.info)',\n        informational: '.info',\n        hidden: '.hidden',\n        disabled : '.disabled'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all: \"\",\n        unanswered: [_selectors.answered, _selectors.informational].join(','),\n        flagged: _selectors.notFlagged,\n        answered: _selectors.notAnswered,\n        filtered: _selectors.hidden\n    };\n\n    /**\n     *\n     * @type {Object}\n     */\n    var navigatorApi = {\n        /**\n         * Updates the stats on the flagged items in the current map\n         * @param {Number} position\n         * @param {Boolean} flag\n         */\n        updateStats: function updateStats(position, flag) {\n            var map = this.map;\n            var item;\n\n            if (map) {\n                item = mapHelper.getItemAt(map, position);\n\n                if (item) {\n                    item.flagged = flag;\n                    mapHelper.updateItemStats(map, position);\n                }\n            }\n        },\n\n        /**\n         * Gets the total number of items for the provided target\n         * @param {Object} progression\n         * @param {String} target\n         * @returns {Number}\n         */\n        getProgressionTotal: function getProgressionTotal(progression, target) {\n            var total;\n\n            if ('questions' === target) {\n                total = progression.questions;\n            } else {\n                total = progression.total;\n            }\n\n            return total;\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.controls.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n            var icon;\n\n            // update the map stats\n            this.updateStats(position, flag);\n\n            // update the item flag\n            $item.toggleClass(_cssCls.flagged, flag);\n\n            // set the item icon according to its state\n            icon = _.find(_iconCls, _.bind($item.hasClass, $item)) || _cssCls.unseen;\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n\n            // update the info panel\n            progression.flagged = this.controls.$tree.find(_selectors.flagged).length;\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, this.getProgressionTotal(progression, 'questions'));\n\n            // recompute the filters\n            this.filter(this.currentFilter);\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         */\n        filter: function filter(criteria) {\n            var self = this;\n\n            // remove the current filter by restoring all items\n            var $items = this.controls.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n\n            // filter the items according to the provided criteria\n            var filterCb = _filterMap[criteria];\n            if (filterCb) {\n                $items.filter(filterCb).addClass(_cssCls.hidden);\n            }\n\n            // update the section counters\n            this.controls.$tree.find(_selectors.sections).each(function () {\n                var $section     = $(this);\n                var $itemsFound  = $section.find(_selectors.items).not(_selectors.hidden);\n                var $filtered    = $itemsFound.not(_selectors.disabled);\n                self.writeCount($section.find(_selectors.counters), $filtered.length, $itemsFound.length);\n            });\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Update the config\n         * @param {Object} [config]\n         * @returns {navigatorApi}\n         */\n        updateConfig: function updateConfig(config) {\n            var $component = this.getElement();\n            var scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n\n            // apply the new config\n            config = _.merge(this.config, config || {});\n\n            // enable/disable the collapsing of the panel\n            $component.toggleClass(_cssCls.collapsible, config.canCollapse);\n\n            // update the component CSS class according to the scope\n            $component.removeClass(scopeClass);\n            scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n            $component.addClass(scopeClass);\n\n            return this;\n        },\n\n        /**\n         * Keep the active item visible, auto scroll if needed\n         */\n        autoScroll: function autoScroll() {\n            autoscroll(this.controls.$tree.find(_selectors.activeItem), this.controls.$tree);\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {navigatorApi}\n         * @fires navigator#update\n         */\n        update: function update(map, context) {\n            var scopedMap = this.getScopedMap(map, context);\n            var progression = scopedMap.stats || {\n                questions: 0,\n                answered: 0,\n                flagged: 0,\n                viewed: 0,\n                total: 0\n            };\n            var totalQuestions = this.getProgressionTotal(progression, 'questions');\n\n            this.map = map;\n            this.progression = progression;\n\n            // update the info panel\n            this.writeCount(this.controls.$infoAnswered, progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoUnanswered, totalQuestions - progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoViewed, progression.viewed, this.getProgressionTotal(progression, 'total'));\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, totalQuestions);\n            this.writeCount(this.controls.$infoAll, totalQuestions, null);\n\n\n            // rebuild the tree\n            if (!context.isLinear) {\n                this.controls.$filterBar.show();\n                this.controls.$linearState.hide();\n                this.controls.$tree.html(navigatorTreeTpl(scopedMap));\n\n                this.autoScroll();\n\n                this.setState('prevents-unseen', this.config.preventsUnseen);\n                if (this.config.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.controls.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.controls.$filterBar.hide();\n                this.controls.$linearState.show();\n                this.controls.$tree.empty();\n            }\n\n            // apply again the current filter\n            this.filter(this.controls.$filters.filter(_selectors.actives).data('mode'));\n\n            /**\n             * @event navigator#update the navigation data have changed\n             */\n            this.trigger('update');\n\n            return this;\n        },\n\n        /**\n         * Gets the scoped map\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {object} The scoped map\n         */\n        getScopedMap: function getScopedMap(map, context) {\n            var scopedMap = mapHelper.getScopeMapFromContext(map, context, this.config.scope);\n            var testPart = mapHelper.getPart(scopedMap, context.testPartId) || {};\n            var section = mapHelper.getSection(scopedMap, context.sectionId) || {};\n            var item = mapHelper.getItem(scopedMap, context.itemIdentifier) || {};\n\n            // set the active part/section/item\n            testPart.active = true;\n            section.active = true;\n            item.active = true;\n\n            // adjust each item with additional meta\n            return mapHelper.each(scopedMap, function(itm) {\n                var cls = [];\n                var icon = '';\n\n                if (itm.active) {\n                    cls.push('active');\n                }\n                if (itm.informational) {\n                    cls.push('info');\n                    icon = icon || 'info';\n                }\n                if (itm.flagged) {\n                    cls.push('flagged');\n                    icon = icon || 'flagged';\n                }\n                if (itm.answered) {\n                    cls.push('answered');\n                    icon = icon || 'answered';\n                }\n                if (itm.viewed) {\n                    cls.push('viewed');\n                    icon = icon || 'viewed';\n                } else {\n                    cls.push('unseen');\n                    icon = icon || 'unseen';\n                }\n\n                itm.cls = cls.join(' ');\n                itm.icon = icon;\n            });\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number|Null} total\n         * @private\n         */\n        writeCount: function writeCount($place, count, total) {\n\n            var display = 0;\n            if($place.parent().hasClass('qti-navigator-tab')){\n                display = Math.max(count, 0);\n            }\n            else if(total > 0){\n                display = Math.min(count, total) + '/' + total;\n            }\n            $place.text(display);\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         */\n        select: function select(position, open) {\n            // find the item to select and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = position && position.jquery ? position : $tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil($tree);\n            var previousPosition = 0;\n            var $previous = $tree.find(_selectors.activeItem);\n            if ( $previous.length ) {\n                previousPosition = $previous.data('position');\n            }\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this.openOnly(hierarchy);\n            }\n\n            // select the item\n            $tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n\n            position = selected.data('position');\n\n            /**\n             * An item is selected\n             *\n             * @param {Number} position - The item position on which select\n             * @param {Number} previousPosition - The item position from which select\n             * @event navigator#selected\n             */\n            this.trigger('selected', position, previousPosition);\n\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         */\n        openSelected: function openSelected() {\n            // find the selected item and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = $tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil($tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this.openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         */\n        openOnly: function openOnly(opened, root) {\n            (root || this.controls.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        togglePanel: function togglePanel(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.controls.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {navigatorApi}\n         */\n        toggle: function toggle(show) {\n            if (typeof show === 'undefined') {\n                show = this.is('hidden');\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     *\n     * @param {Object} config\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\n     * @param {Boolean} [config.canCollapse] Allow the test taker to collapse the component\n     * @param {Boolean} [config.canFlag] Allow the test taker to flag items\n     * @param {Boolean} [config.hidden] Hide the component at init\n     * @param {Object} map The current test map\n     * @param {Object} context The current test context\n     * @returns {*}\n     */\n    function navigatorFactory(config, map, context) {\n\n        var navigator;\n\n        /**\n         * Flags an item\n         * @param {jQuery} $item\n         */\n        function flagItem($item) {\n            var position = $item.data('position');\n            var flagged = !$item.hasClass(_cssCls.flagged);\n\n            // update the display\n            navigator.setItemFlag(position, flagged);\n\n            /**\n             * An item is flagged\n             * @event navigator#flag\n             * @param {Number} position - The item position on which jump\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             */\n            navigator.trigger('flag', position, flagged);\n        }\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        function jump($item) {\n            var position = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event navigator#jump\n             * @param {Number} position - The item position on which jump\n             */\n            navigator.trigger('jump', position);\n        }\n\n        navigator = component(navigatorApi, _defaults)\n            .setTemplate(navigatorTpl)\n\n\n            // uninstalls the component\n            .on('destroy', function () {\n                this.controls = null;\n            })\n\n            // keep the activ item visible\n            .on('show', function () {\n                this.autoScroll();\n            })\n\n            // renders the component\n            .on('render', function () {\n                var self = this;\n\n                // main component elements\n                var $component = this.getElement();\n                var $filterBar = $component.find(_selectors.filterBar);\n                var $filters = $filterBar.find('li');\n                var $tree = $component.find(_selectors.tree);\n\n                // links the component to the underlying DOM elements\n                this.controls = {\n                    // access to info panel displaying counters\n\n                    $infoAnswered: $component.find(_selectors.infoAnswered),\n                    $infoViewed: $component.find(_selectors.infoViewed),\n                    $infoAll: $component.find(_selectors.tabInfoAll),\n                    $infoUnanswered: this.config.showLegend ?\n                        $component.find(_selectors.infoUnanswered) :\n                        $component.find(_selectors.tabInfoUnanswered),\n                    $infoFlagged: this.config.showLegend ?\n                        $component.find(_selectors.infoFlagged) :\n                        $component.find(_selectors.tabInfoFlagged),\n\n                    // access to filter switches\n                    $filterBar: $filterBar,\n                    $filters: $filters,\n\n                    // access to the tree of parts/sections/items\n                    $tree: $tree,\n\n                    // access to the panel displayed when a linear part is reached\n                    $linearState: $component.find(_selectors.linearState)\n                };\n\n                // apply options\n                this.updateConfig();\n\n                // click on the collapse handle: collapse/expand the review panel\n                $component.on('click' + _selectors.component, _selectors.collapseHandle, function () {\n                    if (!self.is('disabled')) {\n                        $component.toggleClass(_cssCls.collapsed);\n                        if ($component.hasClass(_cssCls.collapsed)) {\n                            self.openSelected();\n                        }\n                    }\n                });\n\n                // click on the info panel title: toggle the related panel\n                $component.on('click' + _selectors.component, _selectors.infoPanelLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.infoPanel), _selectors.infoPanel);\n                    }\n                });\n\n                // click on a part title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.partLabels, function () {\n                    var $panel;\n\n                    if (!self.is('disabled')) {\n                        $panel = $(this).closest(_selectors.parts);\n\n                        if (self.togglePanel($panel, _selectors.parts)) {\n                            if ($panel.hasClass(_cssCls.active)) {\n                                self.openSelected();\n                            } else {\n                                self.openOnly($panel.find(_selectors.sections).first(), $panel);\n                            }\n                        }\n                    }\n\n                });\n\n                // click on a section title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.sectionLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.sections), _selectors.sections);\n                    }\n                });\n\n                // click on an item: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.itemLabels, function (event) {\n                    var $item, $target;\n\n                    if (!self.is('disabled')) {\n                        $item = $(this).closest(_selectors.items);\n\n                        if (!$item.hasClass(_cssCls.disabled)) {\n                            $target = $(event.target);\n                            if (self.config.canFlag && $target.is(_selectors.icons) && !$component.hasClass(_cssCls.collapsed)) {\n                                // click on the icon, just flag the item, unless the panel is collapsed\n                                if (!$item.hasClass(_cssCls.unseen) && !$item.hasClass(_cssCls.info)) {\n                                    flagItem($item);\n                                }\n                            } else if (!$item.hasClass(_cssCls.active)){\n                                // go to the selected item\n                                self.select($item);\n                                jump($item);\n                            }\n                        }\n                    }\n                });\n\n                // click on the start button inside a linear part: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.linearStart, function () {\n                    var $btn;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n\n                        // go to the first item of the linear part\n                        if (!$btn.hasClass(_cssCls.disabled)) {\n                            $btn.addClass(_cssCls.disabled);\n                            jump($btn);\n                        }\n                    }\n\n                });\n\n                // click on a filter button\n                $filterBar.on('click' + _selectors.component, _selectors.filter, function () {\n                    var $btn, mode;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n                        mode = $btn.data('mode');\n\n                        // select the button\n                        $filters.removeClass(_cssCls.active);\n                        $component.removeClass(_cssCls.collapsed);\n                        $btn.addClass(_cssCls.active);\n\n                        // filter the items\n                        self.filter(mode);\n\n                        //after filtering, ensure that the active item (if exists) is visible\n                        self.autoScroll();\n                    }\n                });\n\n                this.update(map, context);\n            });\n\n        // set default filter\n        navigator.currentFilter = 'all';\n\n        // the component will be ready\n        return navigator.init(config);\n    }\n\n    return navigatorFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Review panel\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/review',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/plugins/navigation/review/navigator'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, navigatorFactory) {\n    'use strict';\n\n    /**\n     * The display states of the buttons\n     */\n    var buttonData = {\n        setFlag: {\n            control: 'set-item-flag',\n            title: __('Flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Flag for Review')\n        },\n        unsetFlag: {\n            control: 'unset-item-flag',\n            title: __('Do not flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Unflag for Review')\n        },\n        showReview: {\n            control: 'show-review',\n            title: __('Show the review screen'),\n            icon: 'right',\n            text: __('Show Review')\n        },\n        hideReview: {\n            control: 'hide-review',\n            title: __('Hide the review screen'),\n            icon: 'left',\n            text: __('Hide Review')\n        }\n    };\n\n    /**\n     * Gets the definition of the flagItem button related to the context\n     * @param {Object} context - the test context\n     * @returns {Object}\n     */\n    function getFlagItemButtonData(context) {\n        var dataType = context.itemFlagged ? 'unsetFlag' : 'setFlag';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Gets the definition of the toggleNavigator button related to the context\n     * @param {Object} navigator - the navigator component\n     * @returns {Object}\n     */\n    function getToggleButtonData(navigator) {\n        var dataType = navigator.is('hidden') ? 'showReview' : 'hideReview';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Update the button based on the provided data\n     * @param {Component} button - the element to update\n     * @param {Object} data - the button data\n     */\n    function updateButton(button, data) {\n        var $button = button.getElement();\n        if (button.is('rendered')) {\n            if ($button.data('control') !== data.control) {\n                $button\n                    .data('control', data.control)\n                    .attr('title', data.title);\n\n                $button.find('.icon').attr('class', 'icon icon-' + data.icon);\n                $button.find('.text').text(data.text);\n\n                if (_.contains(data.control, 'flag')) {\n                    if (button.is('active')) {\n                        button.turnOff();\n                    } else {\n                        button.turnOn();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the current context allows to mark the item for review\n     * @param {Object} testRunner\n     * @returns {Boolean}\n     */\n    function canFlag(testRunner) {\n        var context = testRunner.getTestContext();\n        var map = testRunner.getTestMap();\n        var item = mapHelper.getItemAt(map, context.itemPosition);\n        return !!(!context.isLinear && context.options.markReview && !(item && item.informational));\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n        name: 'review',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testContext = testRunner.getTestContext();\n            var testMap = testRunner.getTestMap();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var navigatorConfig = testConfig.review || {};\n            var previousItemPosition;\n\n            /**\n             * Tells if the component is enabled\n             * @returns {Boolean}\n             */\n            function isPluginAllowed() {\n                var context = testRunner.getTestContext();\n                return navigatorConfig.enabled && context && context.options && context.options.reviewScreen;\n            }\n\n            /**\n             * Mark an item for review\n             * @param {Number} position\n             * @param {Boolean} flag\n             * @returns {Promise}\n             */\n            function flagItem(position, flag) {\n                self.disable();\n\n                return testRunner.getProxy()\n                    .callTestAction('flagItem', {\n                        position: position,\n                        flag: flag\n                    })\n                    .then(function () {\n                        var context = testRunner.getTestContext();\n\n                        // update the state in the context if the flagged item is the current one\n                        if (context.itemPosition === position) {\n                            context.itemFlagged = flag;\n                        }\n\n                        // update the display of the flag button\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n\n                        // update the item state\n                        self.navigator.setItemFlag(position, flag);\n                        self.enable();\n                    })\n                    .catch(function () {\n                        // rollback on the item flag\n                        self.navigator.setItemFlag(position, !flag);\n                        self.enable();\n                    });\n            }\n\n            /**\n             * Mark the current item for review\n             */\n            function flagCurrentItem() {\n                var context = testRunner.getTestContext();\n                if (self.getState('enabled') !== false) {\n                    flagItem(context.itemPosition, !context.itemFlagged);\n                }\n            }\n\n            /**\n             * Shows/hides the review panel\n             *\n             * @param [{Boolean} forcedState], true will show the panel\n             */\n            function togglePanel(forcedState) {\n                var isHidden = _.isUndefined(forcedState) ? self.navigator.is('hidden') : forcedState;\n                if (isHidden) {\n                    self.explicitlyHidden = false;\n                    self.navigator.show();\n                } else {\n                    self.explicitlyHidden = true;\n                    self.navigator.hide();\n                }\n                updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n            }\n\n            this.navigator = navigatorFactory(navigatorConfig, testMap, testContext)\n                .on('selected', function(position, previousPosition){\n                    previousItemPosition = previousPosition;\n                })\n                .on('jump', function (position) {\n                    if (self.getState('enabled') !== false) {\n                        self.disable();\n                        testRunner.jump(position, 'item');\n                    }\n                })\n                .on('flag', function (position, flag) {\n                    if (self.getState('enabled') !== false) {\n                        flagItem(position, flag);\n                    }\n                })\n                .render();\n\n            // restore current item in the navigator if movement not allowed\n            testRunner.on('alert.notallowed', function() {\n                self.navigator.select(previousItemPosition);\n            });\n\n            this.explicitlyHidden = false;\n\n            // register buttons in the toolbox component\n            this.toggleButton = this.getAreaBroker().getToolbox().createEntry(getToggleButtonData(this.navigator));\n            this.toggleButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-reviewpanel');\n            });\n\n            this.flagItemButton = this.getAreaBroker().getToolbox().createEntry(getFlagItemButtonData(testContext));\n            this.flagItemButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-flagitem');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.flag) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.flag, this.getName(), true), function () {\n                        testRunner.trigger('tool-flagitem');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-reviewpanel');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            if (!isPluginAllowed()) {\n                this.hide();\n            }\n\n            //disabled by default\n            this.disable();\n\n            togglePanel(testConfig.review.defaultOpen);\n\n            //change plugin state\n            testRunner\n                .on('render', function () {\n                    if (isPluginAllowed()) {\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('loaditem', function () {\n                    var context = testRunner.getTestContext();\n                    var map = testRunner.getTestMap();\n\n                    if (isPluginAllowed()) {\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n                        self.navigator\n                            .update(map, context)\n                            .updateConfig({\n                                canFlag: !context.isLinear && context.options.markReview\n                            });\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('enabletools', function () {\n                    if (isPluginAllowed()) {\n                        self.enable();\n                    }\n                })\n                .on('disabletools', function () {\n                    if (isPluginAllowed()) {\n                        self.disable();\n                    }\n                })\n                .on('tool-flagitem', function () {\n                    if (isPluginAllowed() && canFlag(testRunner)) {\n                        flagCurrentItem();\n                    }\n                })\n                .on('tool-reviewpanel', function () {\n                    if (isPluginAllowed() && self.getState('enabled')) {\n                        togglePanel();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var areaBroker = this.getAreaBroker();\n            var $panelContainer = areaBroker.getPanelArea();\n            $panelContainer.append(this.navigator.getElement());\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            this.navigator.destroy();\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            var testRunner = this.getTestRunner();\n            var testContext = testRunner.getTestContext();\n\n            this.flagItemButton.enable();\n            this.toggleButton.enable();\n            this.navigator.enable();\n            if (testContext.itemFlagged) {\n                this.flagItemButton.turnOn();\n            } else {\n                this.flagItemButton.turnOff();\n            }\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.flagItemButton.disable();\n            this.flagItemButton.turnOff();\n\n            this.toggleButton.disable();\n\n            this.navigator.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            var testRunner = this.getTestRunner();\n            if (canFlag(testRunner)) {\n                this.flagItemButton.show();\n            } else {\n                this.flagItemButton.hide();\n            }\n            this.toggleButton.show();\n\n            if (!this.explicitlyHidden) {\n                this.navigator.show();\n            } else {\n                this.navigator.hide();\n            }\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.flagItemButton.hide();\n            this.toggleButton.hide();\n            this.navigator.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Skip\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/skip',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the skip\n     */\n    var buttonData = {\n        skip : {\n            control : 'skip',\n            title   : __('Skip  and go to the next item'),\n            icon    : 'external',\n            text    : __('Skip')\n        },\n        end : {\n            control : 'skip-end',\n            title   : __('Skip and go to the end of the test'),\n            icon    : 'external',\n            text    : __('Skip and end test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'skip',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var toggle = function toggle(){\n                var context = testRunner.getTestContext();\n                if(context.options.allowSkipping === true){\n                    self.show();\n                    return true;\n                }\n\n                self.hide();\n                return false;\n            };\n\n            function doSkip() {\n                testRunner.skip();\n            }\n\n            this.$element = createElement(testRunner.getTestContext());\n\n            this.$element.on('click', function(e){\n                var enable = _.bind(self.enable, self);\n                var context = testRunner.getTestContext();\n\n                e.preventDefault();\n\n                if(self.getState('enabled') !== false){\n                    self.disable();\n                    if(context.options.endTestWarning && context.isLast){\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                'test', testRunner),\n                            doSkip, // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n                    } else {\n                        doSkip();\n                    }\n                }\n            });\n\n            toggle();\n            self.disable();\n\n            testRunner\n                .on('loaditem', function(){\n                    if(toggle()){\n                        updateElement(self.$element, testRunner.getTestContext());\n                    }\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_validateResponses\n *\n * This attribute controls the behaviour of delivery engines when the candidate\n * submits an invalid response. An invalid response is defined to be a response\n * which does not satisfy the constraints imposed by the interaction with which\n * it is associated (see interaction for more information). When\n * validateResponses is turned on (true) then the candidates are not allowed to\n * submit the item until they have provided valid responses for all\n * interactions. When turned off (false) invalid responses may be accepted by\n * the system. The value of this attribute is only applicable when the item is\n * in a testPart with individual submission mode (see Navigation and\n * Submission).\n */\n\ndefine('taoQtiTest/runner/plugins/navigation/validateResponses',[\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/currentItem'\n], function(_, __, pluginFactory, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Plugin\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'validateResponses',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         * @returns {this}\n         */\n        init: function init() {\n            this.getTestRunner().before('move', function () {\n                var self = this;\n                var testContext = this.getTestContext();\n                var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');\n\n                if ( isInteracting && testContext.enableValidateResponses &&  testContext.validateResponses) {\n                    return new Promise(function (resolve, reject) {\n                        if(_.size(currentItemHelper.getDeclarations(self)) === 0){\n                            return resolve();\n                        }\n                        if (currentItemHelper.isAnswered(self, false)) {\n                            return resolve();\n                        }\n                        if (!self.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\n                            self.setState('alerted.notallowed', true);\n                            self.trigger(\n                                'alert.notallowed',\n                                __('A valid response to this item is required.'),\n                                function () {\n                                    self.trigger('resumeitem');\n                                    reject();\n                                    self.setState('alerted.notallowed', false);\n                                }\n                            );\n                        }\n                    });\n                }\n\n            });\n\n            return this;\n        }\n    });\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Warn the test taker before closing the browser window\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/warnBeforeLeaving',[\n    'i18n',\n    'taoTests/runner/plugin'\n], function (__, pluginFactory) {\n    'use strict';\n\n    /**\n     * There's only a few chance to have this message displayed.\n     * Most browsers doesn't support custom message anymore.\n     * See https://www.chromestatus.com/feature/5349061406228480\n     */\n    var warnMessage = __('Please confirm you want to leave the test.');\n\n    /**\n     * The beforeunload listener\n     * @param {Event} e\n     * @returns {String} the custom message (for some browser, just need to be a string)\n     */\n    var warnListener = function warnListener(e){\n        e.returnValue = warnMessage;\n        return warnMessage;\n    };\n\n    /**\n     * Plugin factory\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'warnBeforeLeaving',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         */\n        init: function init() {\n            this.enable();\n        },\n\n        /**\n         * Destroy plugin (called during runner's destruction)\n         */\n        destroy : function destroy(){\n            this.disable();\n        },\n\n        /**\n         * Enables the warning\n         */\n        enable : function enable(){\n            window.addEventListener('beforeunload', warnListener);\n        },\n\n        /**\n         * Disables the warning\n         */\n        disable : function disable(){\n            window.removeEventListener('beforeunload', warnListener);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/security/disableRightClick',[\n    'taoTests/runner/plugin'\n], function (pluginFactory) {\n    'use strict';\n\n    return pluginFactory({\n\n        name: 'disableRightClick',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var rightClickEvents = ['contextmenu', 'mousedown', 'mouseup'];\n\n            rightClickEvents.forEach(function(eventName) {\n                window.document.addEventListener(eventName, function disableRightClick(event) {\n                    if (event.button === 2) {\n                        event.preventDefault();\n                    }\n                });\n            });\n        }\n    });\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Answer Eliminator Plugin\n *\n * While the platform's answer eliminator works on a per-item base, this variation allows\n * answer elimination on a test level. Essentially it allows to add a class 'eliminable'\n * to a choice interaction, from there the aforementioned item-based behaviour and styling takes\n * over.\n *\n * Alternative styling will be on a per customer basis and should always be published as a recipe\n * in the theme-toolkit.\n *\n * @author Dieter Raber <dieter@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerElimination/eliminator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'eliminator';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        // when hiding the buttons, don't remove existing eliminations\n        removeEliminationsOnClose: false,\n        // when showing the buttons, restore previously set eliminations\n        restoreEliminationsOnOpen: false\n    };\n\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n\n            // register the button in the toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'eliminator',\n                title : __('Eliminate choices'),\n                icon : 'eliminate',\n                text : __('Answer Eliminator')\n            });\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-eliminator\n                return !!options.eliminator;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                self.$choiceInteractions.toggleClass('eliminable');\n                if (isEliminable()) {\n                    enableEliminator();\n                } else {\n                    disableEliminator();\n                }\n            }\n\n            function isEliminable() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                return self.$choiceInteractions.hasClass('eliminable');\n            }\n\n            function enableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.button.turnOn();\n                self.trigger('start');\n\n                if(config.restoreEliminationsOnOpen) {\n                    $choices.each(function() {\n                        var input = this.querySelector('.real-label input');\n                        if(this.dataset.wasEliminated) {\n                            this.dataset.wasEliminated = null;\n                            this.classList.add('eliminated');\n                            input.setAttribute('disabled', 'disabled');\n                            input.checked = false;\n                        }\n                    });\n                }\n            }\n\n            function disableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.$choiceInteractions.removeClass('eliminable');\n                self.button.turnOff();\n                self.trigger('end');\n\n                $choices.each(function() {\n                    if(this.classList.contains('eliminated')) {\n                        this.dataset.wasEliminated = true;\n                        this.classList.remove('eliminated');\n                        this.querySelector('.real-label input').removeAttribute('disabled');\n                    }\n                });\n            }\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePluginButton)\n                .on('renderitem', function conditionalInit() {\n                    // show button only when in the presence of choice interactions\n                    self.$choiceInteractions = $container.find('.qti-choiceInteraction');\n                    if(!self.$choiceInteractions.length) {\n                        self.hide();\n                        return;\n                    }\n                    if (isPluginEnabled()) {\n                        self.show();\n                    }\n                })\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    disableEliminator();\n                })\n\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-answer-masking-toggle', function () {\n                    if (isEliminable()) {\n                        disableEliminator();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"answer-mask\\\">\\n    <span class=\\\"answer-mask-toggle\\\"></span>\\n</div>\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/answerMasking',[\n    'lodash',\n    'jquery',\n    'core/statifier',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask'\n], function(_, $, statifier, componentFactory, maskTpl) {\n    'use strict';\n\n    var ns = '.answerMasking';\n\n    /**\n     * @param {jQuery} $contentArea - DOM element containing the rendered item\n     */\n    return function answerMaskingFactory($contentArea) {\n        var answerMasking,\n            allMasks = [],\n\n            maskApi = {\n                /**\n                 * Toggle mask visibility\n                 * @returns {component}\n                 */\n                toggle: function toggle() {\n                    if (this.is('masked')) {\n                        return this.reveal();\n                    } else {\n                        return this.mask();\n                    }\n                },\n\n                /**\n                 * Show the choice under the current mask\n                 * @returns {component}\n                 */\n                reveal: function reveal() {\n                    var $container = this.getContainer();\n                    $container.removeClass('masked');\n                    $container.find('input').removeAttr('disabled');\n\n                    this.setState('masked', false);\n\n                    return this;\n                },\n\n                /**\n                 * Cover the whole choice with the mask\n                 * @returns {component}\n                 */\n                mask: function mask() {\n                    var $container = this.getContainer();\n                    $container.addClass('masked');\n                    $container.find('input').attr('disabled', 'disabled');\n\n                    this.setState('masked', true);\n\n                    return this;\n                }\n            };\n\n        /**\n         * Creates a ui/component to serve as a mask over a QTI Choice\n         * @param {jQuery} $container - the qti-choice element\n         * @returns {component}\n         */\n        function createMask($container) {\n            return componentFactory(maskApi)\n                .setTemplate(maskTpl)\n                .on('render', function() {\n                    var self = this,\n                        $component = this.getElement();\n\n                    $component.on('click' + ns, function(e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        self.toggle();\n                    });\n                })\n                .on('destroy', function() {\n                    var $component = this.getElement();\n                    $component.off(ns);\n                })\n                .init()\n                .render($container)\n                .mask();\n        }\n\n        /**\n         * The answer masking helper\n         */\n        answerMasking = {\n            /**\n             * Enable the answer masking functionality by creating masks over the Qti Choices\n             */\n            enable: function enable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction'),\n                    $qtiChoices = $contentArea.find('.qti-choice');\n\n                allMasks = [];\n\n                $choiceInteractions.addClass('maskable');\n\n                $qtiChoices.each(function () {\n                    var $choice = $(this);\n                    allMasks.push(createMask($choice));\n                });\n\n                this.setState('enabled', true);\n            },\n\n            /**\n             * Remove any answerMasking-related markup from the rendered item\n             */\n            disable: function disable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction');\n                $choiceInteractions.removeClass('maskable');\n\n                allMasks.forEach(function(mask) {\n                    mask.reveal(); // remove class on container\n                    mask.destroy();\n                });\n\n                allMasks = [];\n\n                this.setState('enabled', false);\n            },\n\n            /**\n             * Return the current state of the masks\n             * @returns {Boolean[]} - true if the choice is masked, false if the choice is revealed\n             */\n            getMasksState: function getMasksState() {\n                var state = allMasks.map(function (mask) {\n                    return mask.is('masked');\n                });\n                return state;\n            },\n\n            /**\n             * Restore a previously saved state for the masked choices\n             * @param {Boolean[]} state - array of boolean, most probably given by the getMasksState method\n             */\n            setMasksState: function setMasksState(state) {\n                state = state || [];\n\n                state.forEach(function (masked, index) {\n                    var mask = allMasks[index];\n\n                    if (_.isObject(mask) && _.isFunction(mask.reveal) && ! masked) {\n                        mask.reveal();\n                    }\n                });\n            }\n        };\n\n        statifier(answerMasking);\n\n        return answerMasking;\n    };\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/answerMasking/answerMasking'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, answerMaskingFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'answer-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Stores the masking state for each item in the test\n     * @type {Object}\n     */\n    var itemStates = {};\n\n    /**\n     * Default Configuration\n     */\n    var defaultConfig = {\n        restoreStateOnToggle: true,\n        restoreStateOnMove: true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultConfig),\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $contentArea = this.getAreaBroker().getContentArea();\n\n            var answerMasking = answerMaskingFactory($contentArea);\n\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-answerMasking\n                return options.answerMasking && itemContainsChoiceInteraction();\n            }\n\n            function itemContainsChoiceInteraction() {\n                var $container = self.getAreaBroker().getContentArea().parent();\n                return $container.find('.qti-choiceInteraction').length;\n            }\n\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (! answerMasking.getState('enabled')) {\n                    enableMasking();\n                } else {\n                    disableMasking();\n                }\n            }\n\n            function enableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                answerMasking.enable();\n                if (pluginConfig.restoreStateOnToggle) {\n                    answerMasking.setMasksState(itemStates[itemId]);\n                }\n                self.button.turnOn();\n                self.trigger('start');\n            }\n\n            function disableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                if (answerMasking.getState('enabled')) {\n                    itemStates[itemId] = answerMasking.getMasksState();\n                }\n\n                answerMasking.disable();\n                self.button.turnOff();\n                self.trigger('end');\n            }\n\n            // create buttons\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Answer Masking'),\n                icon: 'result-nok',\n                control: 'answer-masking',\n                text: __('Answer Masking')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    var testContext = testRunner.getTestContext(),\n                        itemId = testContext.itemIdentifier;\n\n                    if (! pluginConfig.restoreStateOnMove) {\n                        itemStates[itemId] = [];\n                    }\n\n                    togglePluginButton();\n                })\n                .on('enabletools renderitem', function () {\n                    togglePluginButton(); // we repeat this here as we need the rendered item markup in order to decide whether the plugin is enabled\n                    self.enable();\n                })\n                .on('beforeunloaditem', function() {\n                    disableMasking();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    disableMasking();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-eliminator-toggle', function () {\n                    disableMasking();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"mask\\\">\\n   <div class=\\\"inner\\\"></div>\\n   <div class=\\\"controls\\\">\\n        <a href=\\\"#\\\" class=\\\"view\\\"  title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Preview the covered area\", options) : helperMissing.call(depth0, \"__\", \"Preview the covered area\", options)))\n    + \"\\\"><span class=\\\"icon-preview\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"close\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close the mask\", options) : helperMissing.call(depth0, \"__\", \"Close the mask\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n   </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Create a movable and resizable element in order to mask areas.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/mask',[\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function (_, movableComponent, areaMaskingTpl) {\n    'use strict';\n\n    var defaultConfig = {\n        previewDelay: 3000,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a new masking component\n     * @returns {maskComponent} the component (uninitialized)\n     */\n    function maskingComponentFactory () {\n\n        /**\n         * @typedef {Object} maskComponent\n         */\n        var maskComponent = movableComponent({\n            /**\n             * Preview the content under the masked area\n             * @returns {maskComponent} chains\n             *\n             * @fires maskComponent#preview\n             */\n            preview : function preview(){\n                var self   = this;\n                var delay  = this.config.previewDelay || 1000;\n                if( this.is('rendered') && !this.is('disabled') && !this.is('previewing') ){\n                    this.setState('previewing', true)\n                        .trigger('preview');\n                    _.delay(function(){\n                        self.setState('previewing', false);\n                    }, delay);\n                }\n                return this;\n            }\n        }, defaultConfig);\n\n\n        maskComponent\n            .setTemplate(areaMaskingTpl)\n            .on('render', function(){\n                var self     = this;\n                var $element = this.getElement();\n\n                $element\n                    .on('click touchstart', '.view', function(e){\n                        e.preventDefault();\n                        self.preview();\n                    })\n                    .on('click touchstart', '.close', function(e){\n                        e.preventDefault();\n                        self.destroy();\n                    });\n            });\n\n        return maskComponent;\n    }\n\n    return maskingComponentFactory;\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Area Masking Plugin\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/areaMasking',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, maskComponent){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'area-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        max : 5,\n        foo : true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n\n            function addMask() {\n                maskComponent()\n                    .on('render', function(){\n                        self.masks.push(this);\n                        self.button.turnOn();\n\n                        /**\n                         * @event areaMasking#maskadd\n                         */\n                        self.trigger('maskadd');\n                    })\n                    .on('destroy', function(){\n                        self.masks = _.without(self.masks, this);\n                        if(self.masks.length < config.max){\n                            self.enable();\n                        }\n                        if (self.masks.length === 0) {\n                            self.button.turnOff();\n                            self.trigger('close');\n                        }\n\n                        /**\n                         * @event areaMasking#maskclose\n                         */\n                        self.trigger('maskclose');\n                    })\n                    .init({\n                        x : self.masks.length * 10,\n                        y : self.masks.length * 10\n                    })\n                    .render($container);\n            }\n\n            //keep a ref to all masks\n            this.masks = [];\n\n            // register the element in the Toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'area-masking',\n                text : __('Masking'),\n                title : __('Covers parts of the item'),\n                icon : 'eye-slash'\n            });\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext(),\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-areaMasking\n                return !!options.areaMasking;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    //remove all masks\n                    _.invoke(self.masks, 'destroy');\n                })\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        if (self.masks.length === 0) {\n                            self.trigger('open');\n                        }\n                        if (self.masks.length < config.max) {\n                            addMask();\n                        } else if (config.max === 1) {\n                            _.invoke(self.masks, 'destroy');\n                        }\n                    }\n                });\n\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Calculator\n *\n * @author Sam <sam@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/calculator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'ui/calculator',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, calculatorFactory, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    var _default = {\n        height : 360,\n        width : 240,\n        top : 50,\n        left : 10,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'calculator',\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var areaBroker = this.getAreaBroker();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var config = pluginsConfig.calculator || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n\n                //to be activated with the special category x-tao-option-calculator\n                return !!options.calculator;\n            }\n\n            /**\n             * Is calculator activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {//allow calculator\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Build the calculator component\n             * @param {Function} [calcTpl] - an optional alternative template for the calculator\n             */\n            function buildCalculator(calcTpl){\n                self.calculator = calculatorFactory(_.defaults({\n                    renderTo: self.$calculatorContainer,\n                    replace: true,\n                    draggableContainer: areaBroker.getContainer(),\n                    alternativeTemplate : calcTpl || null\n                }, _default)).on('show', function () {\n                    self.trigger('open');\n                    self.button.turnOn();\n                }).on('hide', function () {\n                    self.trigger('close');\n                    self.button.turnOff();\n                }).show();\n            }\n\n            /**\n             * Show/hide the calculator\n             */\n            function toggleCalculator() {\n                if (self.getState('enabled') !== false) {\n                    if (self.calculator) {\n                        //just show/hide the calculator widget\n                        if (self.calculator.is('hidden')) {\n                            self.calculator.show();\n                        } else {\n                            self.calculator.hide();\n                        }\n                    } else {\n                        //build calculator widget\n                        if(config.template){\n                            require(['tpl!' + config.template.replace(/\\.tpl$/, '')], function(calcTpl){\n                                buildCalculator(calcTpl);\n                            }, function(){\n                                //in case of error, display the default calculator:\n                                buildCalculator();\n                            });\n                        }else{\n                            buildCalculator();\n                        }\n\n                    }\n                }\n            }\n\n            //build element (detached)\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'calculator',\n                title : __('Open Calculator'),\n                icon : 'table',\n                text : __('Calculator')\n            });\n            this.$calculatorContainer = $('<div class=\"widget-calculator\">');\n\n            //init calculator instance var, it will be created only necessary\n            this.calculator = null;\n\n            //attach behavior\n            this.button.on('click', function (e){\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if($(e.target).closest('.widget-calculator').length){\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-calculator');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-calculator');\n                    }, {\n                        avoidInput: true,\n                        allowIn: '.widget-calculator'\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    if(self.calculator){\n                        //destroy calculator to create a new instance of calculator each time\n                        self.calculator.destroy();\n                        self.calculator = null;\n                    }\n                })\n                .on('tool-calculator', function () {\n                    if (isEnabled()) {\n                        toggleCalculator();\n                    }\n                });\n        },\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var areaBroker = this.getAreaBroker();\n            areaBroker.getContainer().append(this.$calculatorContainer);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n\n            this.$calculatorContainer.remove();\n            if(this.calculator){\n                this.calculator.destroy();\n            }\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/comment/comment', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div data-control=\\\"qti-comment\\\" class=\\\"hidden\\\">\\n    <textarea data-control=\\\"qti-comment-text\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Your comment…\", options) : helperMissing.call(depth0, \"__\", \"Your comment…\", options)))\n    + \"\\\"></textarea>\\n    <button data-control=\\\"qti-comment-cancel\\\" class=\\\"btn-info small\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cancel\", options) : helperMissing.call(depth0, \"__\", \"Cancel\", options)))\n    + \"</button>\\n    <button data-control=\\\"qti-comment-send\\\" class=\\\"btn-info small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Send\", options) : helperMissing.call(depth0, \"__\", \"Send\", options)))\n    + \"</button>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Comment form\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/comment/comment',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/stacker',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/tools/comment/comment'\n], function ($, __, pluginFactory, hider, stackerFactory, shortcut, namespaceHelper, commentTpl) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'comment',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var stacker = stackerFactory('test-runner');\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext();\n                return !!context.options.allowComment;\n            }\n\n            /**\n             * Can we comment ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Show/hide the comment panel\n             */\n            function toggleComment() {\n                if (self.getState('enabled') !== false) {\n                    //just show/hide the form\n                    hider.toggle(self.$form);\n                    if (!hider.isHidden(self.$form)) {\n                        //reset the form on each display\n                        self.$input.val('').focus();\n                        self.button.turnOn();\n                        stacker.bringToFront(self.$form);\n                    } else {\n                        self.button.turnOff();\n                    }\n                }\n            }\n\n            // register button in toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'comment',\n                title: __('Leave a comment'),\n                icon: 'tag',\n                text: __('Comment')\n            });\n\n            //get access to controls\n            this.button.on('render', function() {\n                self.$button = self.button.getElement();\n                self.$form = $(commentTpl()).appendTo(self.$button);\n                self.$input = self.$button.find('[data-control=\"qti-comment-text\"]');\n                self.$cancel = self.$button.find('[data-control=\"qti-comment-cancel\"]');\n                self.$submit = self.$button.find('[data-control=\"qti-comment-send\"]');\n\n                stacker.autoBringToFront(self.$form);\n\n                //hide the form without submit\n                self.$cancel.on('click', function () {\n                    hider.hide(self.$form);\n                    self.button.turnOff();\n                });\n\n                //submit the comment, then hide the form\n                self.$submit.on('click', function () {\n                    var comment = self.$input.val();\n\n                    if (comment) {\n                        self.disable();\n                        self.button.turnOff();\n\n                        testRunner.getProxy()\n                            .callTestAction('comment', {\n                                comment: comment\n                            })\n                            .then(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            })\n                            .catch(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            });\n                    }\n                });\n            });\n\n\n            //attach behavior\n            this.button.on('click', function (e) {\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if ($(e.target).closest('[data-control=\"qti-comment\"]').length) {\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-comment');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-comment');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-comment', function () {\n                    if (isEnabled()) {\n                        toggleComment();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.disable();\n            this.button.turnOff();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"document-viewer-plugin hidden\\\">\\n    <div class=\\\"viewer-overlay\\\"></div>\\n    <div class=\\\"viewer-panel\\\">\\n        <div class=\\\"viewer-header\\\">\\n            <span class=\\\"viewer-title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon icon-close\\\"></span>\\n        </div>\\n        <div class=\\\"viewer-content\\\">\";\n  if (helper = helpers.content) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.content); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n        <div class=\\\"viewer-footer\\\"></div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : View a document\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/documentViewer/documentViewer',[\n    'jquery',\n    'lodash',\n    'ui/hider',\n    'ui/documentViewer',\n    'ui/documentViewer/providers/pdfViewer',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel'\n], function ($, _, hider, viewerFactory, pdfViewer, pluginFactory, panelTpl) {\n    'use strict';\n\n    /**\n     * The name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'documentViewer';\n\n    /**\n     * Shows the panel, trigger the `panelshow` event\n     *\n     * @param plugin\n     */\n    function showPanel(plugin) {\n        hider.show(plugin.controls.$panel);\n        plugin.trigger('panelshow');\n        $(window).on('resize.' + plugin.getName(), _.debounce(_.partial(resizeViewer, plugin), 50));\n    }\n\n    /**\n     * Hides the panel, trigger the `panelhide` event\n     *\n     * @param plugin\n     */\n    function hidePanel(plugin) {\n        hider.hide(plugin.controls.$panel);\n        plugin.trigger('panelhide');\n        $(window).off('resize.' + plugin.getName());\n    }\n\n    /**\n     * Hides the panel if it is visible\n     *\n     * @param plugin\n     * @returns {Boolean} Returns `true` if the panel was visible and has been hidden\n     */\n    function hideIfVisible(plugin) {\n        var isVisible = !hider.isHidden(plugin.controls.$panel, true);\n        if (isVisible) {\n            hidePanel(plugin);\n        }\n        return isVisible;\n    }\n\n    /**\n     * Initializes the event handlers for the panel container\n     *\n     * @param plugin\n     */\n    function initPanelEvents(plugin) {\n        var namespace = '.' + plugin.getName();\n        var stopEvents = ['click', 'mousedown', 'mouseup', 'touchstart', 'touchend', 'keyup', 'keydow', 'keypress', 'scroll', 'drop'].join(namespace + ' ') + namespace;\n        var hideViewer = _.partial(hidePanel, plugin);\n\n        function stopPropagation(e) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n        }\n\n        plugin.controls.$overlay\n            .off(namespace)\n            .on('click' + namespace, hideViewer)\n            .on(stopEvents, stopPropagation);\n\n        plugin.controls.$panel\n            .off(namespace)\n            .on('click' + namespace, '.icon-close', hideViewer)\n            .on(stopEvents, stopPropagation);\n    }\n\n    /**\n     * Resizes the viewer to fit the panel content area\n     * @param plugin\n     */\n    function resizeViewer(plugin) {\n        var $content = plugin.controls.$content;\n        plugin.viewer.setSize($content.width(), $content.height());\n    }\n\n    // all document viewers need to be registered\n    viewerFactory.registerProvider('pdf', pdfViewer);\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var $panel = $(panelTpl());\n\n            /**\n             * @param {Object} data\n             * @param {String} data.label - document title\n             * @param {String} data.document - document url\n             */\n            function displayViewer(data) {\n                if (self.getState('enabled') !== false) {\n                    showPanel(self);\n                    self.controls.$title.text(data.label);\n                    resizeViewer(self);\n                    self.viewer.load(data.document, 'pdf');\n                }\n            }\n\n            this.controls = {\n                $panel: $panel,\n                $overlay: $panel.find('.viewer-overlay'),\n                $title: $panel.find('.viewer-title'),\n                $content: $panel.find('.viewer-content')\n            };\n\n            this.viewer = viewerFactory({\n                renderTo: this.controls.$content,\n                replace: true,\n                fitToWidth: true,\n                allowSearch: true\n            });\n\n            //update plugin state based on changes\n            testRunner\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('renderitem', function () {\n                    self.getAreaBroker().getContentArea()\n                        .append(self.controls.$panel)\n                        .off('.' + self.getName())\n                        .on('viewDocument.' + self.getName(), function (event) {\n                            var data = event.originalEvent.detail;\n                            displayViewer(data);\n                        });\n                    initPanelEvents(self);\n                })\n                .on('move', function () {\n                    hideIfVisible(self);\n                })\n                .on('skip', function () {\n                    hideIfVisible(self);\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-documentViewer', function(data) {\n                    displayViewer(data);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.getAreaBroker().getContentArea().off('.' + this.getName());\n\n            if (this.viewer) {\n                this.viewer.destroy();\n            }\n\n            if (this.controls.$panel) {\n                this.controls.$panel.remove();\n            }\n\n            this.viewer = null;\n            this.controls = {};\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            hideIfVisible(this);\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            hideIfVisible(this);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n/**\n * This plugin allows the test taker to select text inside an item.\n * Highlight is preserved when navigating between items\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/highlighter',[\n    'lodash',\n    'jquery',\n    'ui/highlighter'\n], function (\n    _,\n    $,\n    highlighterFactory\n) {\n    'use strict';\n    var selection;\n\n    if (!window.getSelection) throw new Error('Browser does not support getSelection()');\n\n    selection = window.getSelection();\n\n    /**\n     * Returns an array of active ranges.\n     * If browser doesn't support multiple Ranges, returns only the first range\n     * see note on https://w3c.github.io/selection-api/#methods\n     *\n     * @returns {Range[]}\n     */\n    function getAllRanges() {\n        var i, allRanges = [];\n\n        for (i = 0; i < selection.rangeCount; i++) {\n            allRanges.push(selection.getRangeAt(i));\n        }\n        return allRanges;\n    }\n\n    /**\n     * The highlighter Factory\n     */\n    return function(testRunner) {\n\n        /**\n         * Are we in highlight mode, meaning that each new selection is automatically highlighted\n         * without having to press any button\n         * @type {boolean}\n         */\n        var isHighlighting = false;\n\n        /**\n         * Store, for each item, an array containing the its highlight index\n         * @type {Object}\n         */\n        var itemsHighlights = {};\n\n        /**\n         * The helper that does the highlight magic\n         */\n        var highlightHelper = highlighterFactory({\n            className: 'txt-user-highlight',\n            containerSelector: '.qti-itemBody'\n        });\n\n        // add event to automatically highlight the recently made selection if needed\n        $(document).on('mouseup.highlighter', function() {\n            if (isHighlighting && !selection.isCollapsed) {\n                highlightHelper.highlightRanges(getAllRanges());\n                selection.removeAllRanges();\n            }\n        });\n\n        /**\n         * The highlighter instance\n         */\n        return {\n            /**\n             * toggle highlighting mode on and off\n             * @param {Boolean} bool - wanted state\n             */\n            toggleHighlighting: function toggleHighlighting(bool) {\n                isHighlighting = bool;\n                if (isHighlighting) {\n                    testRunner.trigger('plugin-start.highlighter');\n                } else {\n                    testRunner.trigger('plugin-end.highlighter');\n                }\n            },\n\n            /**\n             * Either highlight the current or selection, or toggle highlighting mode\n             */\n            trigger: function trigger() {\n                if (!isHighlighting) {\n                    if (!selection.isCollapsed) {\n                        testRunner.trigger('plugin-start.highlighter');\n                        highlightHelper.highlightRanges(getAllRanges());\n                        testRunner.trigger('plugin-end.highlighter');\n                        selection.removeAllRanges();\n                    } else {\n                        this.toggleHighlighting(true);\n                    }\n                } else {\n                    this.toggleHighlighting(false);\n                }\n            },\n\n            /**\n             * save the highlight index for the current item\n             * @param itemId\n             */\n            saveHighlight: function saveHighlight(itemId) {\n                var index = highlightHelper.getHighlightIndex();\n                if (index && index.length > 0) {\n                    itemsHighlights[itemId] = index;\n                }\n            },\n\n\n            /**\n             * restore the highlight index on the current item\n             * @param itemId\n             */\n            restoreHighlight: function restoreHighlight(itemId) {\n                var index = itemsHighlights[itemId];\n                if (index && index.length > 0) {\n                    highlightHelper.highlightFromIndex(index);\n                }\n            },\n\n            /**\n             * remove all highlights\n             */\n            clearHighlights: function clearHighlights() {\n                highlightHelper.clearHighlights();\n                selection.removeAllRanges();\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Text Highlighter\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/highlighter/highlighter'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, highlighterFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'highlighter',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            var highlighter = highlighterFactory(testRunner);\n\n            // create buttons\n            this.buttonMain = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Highlight Text'),\n                icon: 'text-marker',\n                control: 'highlight-trigger',\n                text: __('Highlight')\n            });\n\n            this.buttonRemove = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Clear all active highlights'),\n                icon: 'result-nok',\n                control: 'highlight-clear',\n                text: __('Clear Highlights')\n            });\n\n            // attach user events\n            this.buttonMain\n                .on('mousedown', function(e) { // using 'mousedown' instead of 'click' to avoid losing current selection\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight');\n                });\n\n            this.buttonRemove\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight-remove');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-highlight');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-highlighter\n                return !!options.highlighter;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('renderitem', function() {\n                    var testContext = testRunner.getTestContext();\n                    if(isEnabled()){\n                        highlighter.restoreHighlight(testContext.itemIdentifier);\n                    }\n                })\n                .on('beforeunloaditem', function() {\n                    var testContext = testRunner.getTestContext();\n                    if(isEnabled()){\n                        highlighter.saveHighlight(testContext.itemIdentifier);\n                    }\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    highlighter.toggleHighlighting(false);\n                })\n                .on('tool-highlight', function () {\n                    if (isEnabled()) {\n                        highlighter.trigger();\n                    }\n                })\n                .on('tool-highlight-remove', function () {\n                    highlighter.clearHighlights();\n                })\n                .on('plugin-start.highlighter', function() {\n                    self.buttonMain.turnOn();\n                })\n                .on('plugin-end.highlighter', function() {\n                    self.buttonMain.turnOff();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            $(document).off('.highlighter');\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.buttonMain.enable();\n            this.buttonRemove.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.buttonMain.disable();\n            this.buttonRemove.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.buttonMain.show();\n            this.buttonRemove.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.buttonMain.hide();\n            this.buttonRemove.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : item Theme Switcher\n *\n * @author\n */\ndefine('taoQtiTest/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/store',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/themes',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, storeFactory, pluginFactory, hider, themeHandler, shortcut, namespaceHelper) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'itemThemeSwitcher';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            //the storechange event is fired early (before runner's init is done)\n            //so we attach the handler early\n            var testRunner = this.getTestRunner();\n            testRunner.on('storechange', function handleStoreChange() {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var themesConfig = themeHandler.get('items') || {};\n            var state = {\n                availableThemes: [],\n                defaultTheme: '',\n                selectedTheme: ''\n            };\n            var allMenuEntries = [];\n\n            /**\n             * Load the selected theme\n             * @param themeId\n             */\n            function changeTheme(themeId) {\n                var $qtiItem = $('.qti-item');\n                var previousTheme = state.selectedTheme;\n                state.selectedTheme = themeId;\n\n                if ($qtiItem) {\n                    _.defer(function(){\n                        $qtiItem.trigger('themechange', [state.selectedTheme]);\n                    });\n                }\n                if (self.storage) {\n                    self.storage.setItem('itemThemeId', themeId);\n                }\n\n                if (previousTheme !== state.selectedTheme) {\n                    testRunner.trigger('themechange', state.selectedTheme, previousTheme);\n                }\n            }\n\n            //init plugin state\n            if (themesConfig) {\n                if (themesConfig.default) {\n                    state.defaultTheme = themesConfig.default;\n                    state.selectedTheme = themesConfig.default;\n                }\n                if (themesConfig.available) {\n                    _.forEach(themesConfig.available, function (theme) {\n                        state.availableThemes.push({\n                            id: theme.id,\n                            label: theme.name\n                        });\n                    });\n                }\n            }\n\n            // register toolbox button\n            this.menuButton = this.getAreaBroker().getToolbox().createMenu({\n                control: 'color-contrast',\n                title: __('Change the current color preset'),\n                icon: 'contrast',\n                text: __('Contrast')\n            }).on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-themeswitcher-toggle');\n            }).on('openmenu', function() {\n                testRunner.trigger('plugin-open.' + pluginName, state.selectedTheme);\n            }).on('closemenu', function() {\n                testRunner.trigger('plugin-close.' + pluginName, state.selectedTheme);\n            });\n\n            // register menu entries\n            state.availableThemes.forEach(function (theme) {\n                var themeEntry = self.getAreaBroker().getToolbox().createEntry({\n                    control: theme.id,\n                    title: theme.label,\n                    icon: 'preview',\n                    text: __(theme.label)\n                });\n\n                themeEntry.setMenuId('color-contrast');\n\n                themeEntry.on('click', function(e) {\n                    var themeId = this.config.control;\n                    e.preventDefault();\n\n                    self.menuButton.turnOffAll();\n                    this.turnOn();\n\n                    changeTheme(themeId);\n                });\n\n                if (state.defaultTheme === theme.id) {\n                    themeEntry.on('render', function() {\n                        this.turnOn();\n                    });\n                }\n                allMenuEntries.push(themeEntry);\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-themeswitcher-toggle');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    self.show();\n                })\n                .on('renderitem', function () {\n                    self.enable();\n                    changeTheme(state.selectedTheme);\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                })\n                .on('tool-themeswitcher-toggle', function () {\n                    if (self.getState('enabled') !== false) {\n                        self.menuButton.toggleMenu();\n                    }\n                });\n\n            return storeFactory(pluginName + '-' + testRunner.getConfig().serviceCallId)\n                .then(function (itemThemesStore) {\n                    if (self.shouldClearStorage) {\n                        return itemThemesStore.clear().then(function () {\n                            return itemThemesStore;\n                        });\n                    }\n                    return itemThemesStore;\n                }).then(function (itemThemesStore) {\n                    testRunner\n                        .after('renderitem enableitem', function () {\n                            self.storage = itemThemesStore;\n\n                            self.storage.getItem('itemThemeId')\n                                .then(function (itemThemeId) {\n                                    if (itemThemeId && state.selectedTheme !== itemThemeId) {\n                                        changeTheme(itemThemeId);\n\n                                        allMenuEntries.forEach(function (menuEntry) {\n                                            if (menuEntry.getId() === itemThemeId) {\n                                                menuEntry.turnOn();\n                                            } else {\n                                                menuEntry.turnOff();\n                                            }\n                                        });\n                                    }\n                                });\n                        })\n\n                        .before('finish', function() {\n                            return new Promise(function(resolve) {\n                                self.storage.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.menuButton.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.menuButton.disable();\n\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.menuButton.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.menuButton.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * A compound mask is a mask built with multiple ui/components that interacts with each other.\n * The compound mask itself is not a ui/component but mimic most of its API.\n *\n * Most mask transformations (resize, drag) are achieved by updating a very simple transform model (position, dimensions)\n * which is latter applied to the actual individual components at a proper time\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/compoundMask',[\n    'jquery',\n    'lodash',\n    'core/statifier',\n    'core/eventifier',\n    'ui/component',\n    'ui/component/placeable',\n    'ui/component/draggable',\n    'ui/component/resizable',\n    'ui/component/stackable'\n], function(\n    $,\n    _,\n    statifier,\n    eventifier,\n    componentFactory,\n    makePlaceable,\n    makeDraggable,\n    makeResizable,\n    makeStackable\n) {\n    'use strict';\n\n    var defaultDimensions = {\n        outerWidth:  600,\n        outerHeight: 400,\n        innerWidth:  500,\n        innerHeight: 20\n    };\n    var defaultPosition = {\n        outerX: 0,\n        outerY: 0,\n        innerX: 50,\n        innerY: 50\n    };\n    var defaultOptions = {\n        dragMinWidth: 10,\n        dragMinHeight: 10,\n        resizeHandleSize: 10,\n        innerDragHeight: 20\n    };\n    var stackingOptions = {\n        stackingScope: 'test-runner'\n    };\n    var constrains;\n\n    /**\n     * @param {Object} options\n     * @param {Number} options.resizeHandleSize - size of the resize handlers on each resizable edge\n     * @param {Number} options.dragMinWidth - minimal width for the draggable area of each component.\n     * @param {Number} options.dragMinHeight - minimal height for the draggable area of each component.\n     * @param {Number} options.innerDragHeight - height of the inner window drag handle\n     * @param {Object} dimensions\n     * @param {Number} dimensions.outerWidth - overall mask width\n     * @param {Number} dimensions.outerHeight - overall mask height\n     * @param {Number} dimensions.innerWidth - inner window width\n     * @param {Number} dimensions.innerHeight - inner window height\n     * @param {Number} position\n     * @param {Number} position.outerX - overall mask x\n     * @param {Number} position.outerY - overall mask y\n     * @param {Number} position.innerX - inner window mask x\n     * @param {Number} position.innerY - inner window mask y\n     */\n    return function compoundMaskFactory(options, dimensions, position) {\n        var compoundMask,\n            allParts = {},\n            innerDrag,\n            closer,\n            visualGuides = {};\n\n        /**\n         * ============================================\n         * Definition of Mask & Overlay component types\n         * ============================================\n         */\n\n        /**\n         * Create a mask component. They are used for masking (obviously) but also resizing the compound mask\n         * @param {Object} maskConfig\n         * @param {String} maskConfig.id\n         * @param {Function} maskConfig.place - size and position the mask according to the transform model\n         * @param {Function} maskConfig.placeOverlay - size and position the overlay according to the transform model\n         * @param {Function} maskConfig.beforeResize - used to set the resize limit depending on which edge the resizing occurs\n         * @param {Function} maskConfig.onResize - how the resize affect the transform model\n         * @param {Object} maskConfig.edges - Interact configuration to specify which edges can be used for resizing\n         * @param {Number} maskConfig.minWidth\n         * @param {Number} maskConfig.minHeight\n         */\n        function createMask(maskConfig) {\n            var mask,\n                maskAPI = {\n                    place: maskConfig.place,\n                    placeOverlay: maskConfig.placeOverlay,\n\n                    styleResizableEdges: function styleResizableEdges() {\n                        var $element = this.getElement();\n                        _.forOwn(this.config.edges, function (isResizable, edgeId) {\n                            if (isResizable) {\n                                $element.addClass('border-' + edgeId);\n                            }\n                        });\n                    }\n                };\n\n            mask = componentFactory(maskAPI, maskConfig);\n            makeResizable(mask);\n            makeStackable(mask, stackingOptions);\n\n            return mask\n                .on('render', function() {\n                    var $element = this.getElement();\n\n                    this.styleResizableEdges();\n\n                    $element\n                        .addClass('line-reader-mask ' + maskConfig.id)\n                        .on('mousedown', function() {\n                            bringAllToFront();\n                        });\n\n                    // uncomment this to see what's going on with masks:\n                    // $element.css({ border: '1px solid olive'});\n                })\n                .on('resizestart', function () {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('beforeresize', maskConfig.beforeResize || _.noop)\n                .on('resize', maskConfig.onResize || _.noop)\n                .on('resizeend', function () {\n                    applyTransformsToOverlays();\n                    applyTransformsToInnerDrag();\n                    applyTransformsToCloser();\n\n                    invokeOnMasks('setState', ['resizing', false]);\n                    invokeOnOverlays('show');\n                    innerDrag.show();\n                    closer.show();\n                })\n                .init();\n        }\n\n\n        /**\n         * Create a overlay component. Overlay are invisible and are used for dragging.\n         * When clicked, the whole mask is hidden and only the overlay is displayed, after being resized to fit the whole mask surface\n         * this allows for performance improvement as well as giving the dragged element proper dragging boundaries.\n         * Also, visual guides are added, like a fake inner window, during the drag\n         * @param {Object} overlayConfig\n         * @param {String} overlayConfig.id\n         */\n        function createOverlay(overlayConfig) {\n            var overlay,\n                overlayAPI = {\n                    transformOverlay: function transformOverlay() {\n                        var $element = this.getElement();\n\n                        this._sizeBackup = this.getSize();\n                        this._posBackup = this.getPosition();\n\n                        this.setSize(dimensions.outerWidth, dimensions.outerHeight)\n                            .moveTo(position.outerX, position.outerY);\n                        $element.addClass('moving');\n\n                        this.setState('transformed', true);\n                    },\n\n                    restoreOverlay: function restoreOverlay() {\n                        var $element = this.getElement();\n\n                        if (this.is('transformed')) {\n\n                            this.setSize(this._sizeBackup.width, this._sizeBackup.height)\n                                .moveTo(this._posBackup.x, this._posBackup.y);\n                            $element.removeClass('moving');\n\n                            this._sizeBackup = null;\n                            this._posBackup = null;\n\n                            this.setState('transformed', false);\n                        }\n                    },\n\n                    appendVisualGuides: function appendVisualGuides() {\n                        var $element = this.getElement(),\n                            borderWidth = 1, // this mirror the $lrBorderWidth css variable\n                            borderOffset = borderWidth * 2;\n\n                        $element.append(visualGuides.$maskBg);\n                        $element.append(visualGuides.$innerWindow);\n\n                        visualGuides.$maskBg.css({\n                            width:  dimensions.outerWidth - borderOffset,\n                            height: dimensions.outerHeight - borderOffset,\n                            'border-top-width':     dimensions.topHeight - borderOffset,\n                            'border-right-width':   dimensions.rightWidth - borderOffset,\n                            'border-bottom-width':  dimensions.bottomHeight - borderOffset,\n                            'border-left-width':    dimensions.leftWidth - borderOffset\n                        });\n\n                        visualGuides.$innerWindow.css({\n                            width:  dimensions.innerWidth,\n                            height: dimensions.innerHeight,\n                            left:   dimensions.leftWidth - borderOffset,\n                            top:    dimensions.topHeight - borderOffset\n                        });\n                    },\n\n                    removeVisualGuides: function removeVisualGuides() {\n                        visualGuides.$maskBg.remove();\n                        visualGuides.$innerWindow.remove();\n                    }\n                };\n\n            overlay = componentFactory(overlayAPI, overlayConfig);\n            makeDraggable(overlay);\n            makeStackable(overlay, stackingOptions);\n\n            return overlay\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement(),\n                        // captures touch and mouse\n                        // also fixes issue with IE not capturing 'mousedown' etc\n                        pointerEventsPrefix = window.PointerEvent ? 'pointer' : 'mouse';\n\n\n                    $element\n                        .addClass('line-reader-overlay ' + overlayConfig.id)\n                        .on(pointerEventsPrefix + 'down', function() {\n                            bringAllToFront();\n                            self.transformOverlay();\n                        })\n                        .on(pointerEventsPrefix + 'up', function() {\n                            self.restoreOverlay();\n                        });\n\n                    // uncomment this to see what's going on with overlays:\n                    // $element.css({ opacity: 0.5, 'background-color': 'yellow', border: '1px solid brown '});\n                })\n                .on('dragstart', function() {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnMasks('hide');\n                    this.appendVisualGuides();\n                })\n                .on('dragmove', function moveAllPartsTogether(xOffsetRelative, yOffsetRelative) {\n                    // update the transform model\n                    position.outerX += xOffsetRelative;\n                    position.outerY += yOffsetRelative;\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n                })\n                .on('dragend', function() {\n                    this.removeVisualGuides();\n                    // although they are already display, calling show() again on the overlays\n                    // will force their z-Index at the top of the stack\n                    invokeOnAll('show');\n                    innerDrag.show();\n                    closer.show();\n\n                    // apply the new transform model\n                    applyTransforms();\n                })\n                .init();\n        }\n\n\n        /**\n         * ==========================\n         * Inner Drag Handle & Closer\n         * ==========================\n         */\n\n        /**\n         * This handle allows to drag the inner window\n         */\n        function createInnerDragHandle() {\n            // uncomment this (and a few lines below) if debugging is needed:\n            // var $boundingBox = $('<div>').css({ position: 'fixed', 'box-sizing': 'border-box', border: '1px solid red' });\n\n            innerDrag = componentFactory();\n\n            makeStackable(innerDrag, stackingOptions);\n            makeDraggable(innerDrag, {\n                dragRestriction: function dragRestriction() {\n                    var fixedXY = allParts.nw.mask.getElement().offset(),\n                        rect;\n\n                    rect = {\n                        x: fixedXY.left + constrains.minWidth,\n                        y: fixedXY.top + (constrains.minHeight + dimensions.innerHeight + options.resizeHandleSize),\n                        width: dimensions.outerWidth - (constrains.minWidth * 2 ),\n                        height: dimensions.outerHeight -\n                            (dimensions.innerHeight + constrains.minHeight + constrains.minBottomHeight - options.innerDragHeight)\n                    };\n\n                    // uncomment to see what's going on:\n                    // allParts.ne.mask.getContainer().append($boundingBox);\n                    // $boundingBox.css({ width: rect.width, height: rect.height, top: rect.y, left: rect.x });\n\n                    return rect;\n                }\n            })\n                .on('render', function() {\n                    var $element = this.getElement(),\n                        $dragIcon = $('<div>', {\n                            'class': 'icon icon-move'\n                        });\n\n                    $element.addClass('line-reader-inner-drag');\n                    $element.append($dragIcon);\n                    $element.on('mousedown', function(e) {\n                        e.stopPropagation();\n                        bringAllToFront();\n                    });\n                })\n                .on('dragstart', function() {\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('dragmove', function(xOffsetRelative, yOffsetRelative) {\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n\n                    dimensions.leftWidth += xOffsetRelative;\n                    dimensions.topHeight += yOffsetRelative;\n\n                    dimensions.rightWidth   -= xOffsetRelative;\n                    dimensions.bottomHeight -= yOffsetRelative;\n\n                    applyTransformsToMasks();\n                })\n                .on('dragend', function() {\n                    invokeOnOverlays('show');\n                    innerDrag.bringToFront();\n                    closer.show();\n                    invokeOnMasks('setState', ['resizing', false]);\n\n                    applyTransformsToOverlays();\n                })\n                .init();\n        }\n\n        /**\n         * Close button for the compound mask\n         */\n        function createCloser() {\n            closer = componentFactory();\n\n            makeStackable(closer, stackingOptions);\n            makePlaceable(closer)\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement(),\n                        $closeIcon = $('<div>', {\n                            'class': 'icon icon-result-nok'\n                        });\n\n                    $element.append($closeIcon);\n                    $element.addClass('line-reader-closer');\n\n                    $element.on('mousedown', function() {\n                        bringAllToFront();\n                    });\n\n                    $element.on('click', function(e) {\n                        e.stopPropagation();\n                        self.trigger('click');\n                    });\n                })\n                .init();\n        }\n\n        /**\n         * =================\n         * Utility functions\n         * =================\n         */\n        function bringAllToFront() {\n            invokeOnAll('bringToFront');\n            innerDrag.bringToFront();\n            closer.bringToFront();\n        }\n\n        function invokeOnAll(fn, args) {\n            invokeOnMasks(fn, args);\n            invokeOnOverlays(fn, args);\n        }\n\n        function invokeOnMasks(fn, args) {\n            invokeOn('mask', fn, args);\n        }\n\n        function invokeOnOverlays(fn, args) {\n            invokeOn('overlay', fn, args);\n        }\n\n        /**\n         * Invoke a method on all compound mask parts, whether mask or overlays\n         * @param {String} target - mask | overlay\n         * @param {String} fn - the name of the method to invoke\n         * @param {*[]} args - arguments passed on invoke\n         */\n        function invokeOn(target, fn, args) {\n            _.forOwn(allParts, function(part) {\n                if (_.isObject(part[target]) && _.isFunction(part[target][fn])) {\n                    part[target][fn].apply(part[target], args);\n                }\n            });\n        }\n\n        /**\n         * =================================\n         * Transform model related functions\n         * =================================\n         */\n\n        function applyTransforms() {\n            applyTransformsToMasks();\n            applyTransformsToOverlays();\n            applyTransformsToInnerDrag();\n            applyTransformsToCloser();\n        }\n\n        function applyTransformsToMasks() {\n            invokeOnMasks('place');\n        }\n\n        function applyTransformsToOverlays() {\n            _.forOwn(allParts, function(part) {\n                part.mask.placeOverlay(part.overlay);\n            });\n        }\n\n        function applyTransformsToInnerDrag() {\n            if (innerDrag) {\n                innerDrag\n                    .setSize(dimensions.innerWidth, options.innerDragHeight)\n                    .moveTo(\n                        position.innerX,\n                        position.innerY + dimensions.innerHeight + options.resizeHandleSize\n                    );\n            }\n        }\n\n        function applyTransformsToCloser() {\n            if (closer) {\n                closer\n                    .setSize(\n                        constrains.minWidth - options.resizeHandleSize,\n                        constrains.minHeight - options.resizeHandleSize\n                    )\n                    .moveTo(\n                        position.outerX + dimensions.outerWidth - constrains.minWidth + 3, // manual adjustment so it looks better\n                        position.outerY + options.resizeHandleSize\n                    );\n            }\n        }\n\n        /**\n         * Check that the given transform model respect the current constrains.\n         * If not, correct them\n         */\n        function correctTransforms() {\n            if (dimensions.topHeight < constrains.minHeight) {\n                dimensions.topHeight = constrains.minHeight;\n                position.innerY = position.outerY + constrains.minHeight;\n            }\n            if (dimensions.innerHeight < constrains.minHeight) {\n                dimensions.innerHeight = constrains.minHeight;\n            }\n            if (dimensions.bottomHeight < constrains.minBottomHeight) {\n                dimensions.bottomHeight = constrains.minBottomHeight;\n            }\n            dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + dimensions.bottomHeight;\n\n            if (dimensions.leftWidth < constrains.minWidth) {\n                dimensions.leftWidth = constrains.minWidth;\n                position.innerX = position.outerX + constrains.minWidth;\n            }\n            if (dimensions.innerWidth < constrains.minWidth) {\n                dimensions.innerWidth = constrains.minWidth;\n            }\n            if (dimensions.rightWidth < constrains.minWidth) {\n                dimensions.rightWidth = constrains.minWidth;\n            }\n            dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + dimensions.rightWidth;\n        }\n\n        /**\n         * Update the transform model during a resize affecting the top height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setTopHeight(newHeight, newY, fromTop) {\n            dimensions.topHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.outerHeight = newHeight + dimensions.innerHeight + dimensions.bottomHeight;\n                position.outerY = newY;\n            } else {\n                dimensions.innerHeight = dimensions.outerHeight - newHeight - dimensions.bottomHeight;\n                position.innerY = position.outerY + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the right width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setRightWidth(newWidth, newX, fromLeft) {\n            dimensions.rightWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.innerWidth = newX - position.innerX;\n            } else {\n                dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + newWidth;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the bottom height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setBottomHeight(newHeight, newY, fromTop) {\n            dimensions.bottomHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.innerHeight = newY - position.innerY;\n                dimensions.bottomHeight = newHeight;\n            } else {\n                dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the left width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setLeftWidth(newWidth, newX, fromLeft) {\n            dimensions.leftWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.outerWidth = newWidth + dimensions.innerWidth + dimensions.rightWidth;\n                position.outerX = newX;\n            } else {\n                dimensions.innerWidth = dimensions.outerWidth - newWidth - dimensions.rightWidth;\n                position.innerX = position.outerX + newWidth;\n            }\n        }\n\n\n        /**\n         * ======================================\n         * Mask parts and other elements creation\n         * ======================================\n         */\n\n        function createCompoundMask() {\n\n            // North\n            createPart({\n                id: 'n',\n                edges: { top: true, right: false, bottom: true, left: false },\n\n                // move and dimension the mask\n                place: function place() {\n                    this.moveTo(\n                        position.innerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                // move and dimension the overlay\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                // set a resize limit whenever resize happens on an inner edge (here, the top inner edge, eg. the bottom of the mask),\n                // so the min/max width/height limit for \"inner component\" is respected\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? null\n                        : dimensions.topHeight + (dimensions.innerHeight - constrains.minHeight);\n                },\n\n                // set the new transform values (dimension and position) resulting from the current mask resize, and apply them\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-east\n            createPart({\n                id: 'ne',\n                edges: { top: true, right: true, bottom: false, left: false },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.outerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // East\n            createPart({\n                id: 'e',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? dimensions.rightWidth + (dimensions.innerWidth - constrains.minWidth)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South east\n            createPart({\n                id: 'se',\n                edges: { top: false, right: true, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setRightWidth(width, x, fromLeft);\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South\n            createPart({\n                id: 's',\n                edges: { top: true, right: false, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX ,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? dimensions.bottomHeight + (dimensions.innerHeight - constrains.minHeight)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South-west\n            createPart({\n                id: 'sw',\n                edges: { top: false, right: false, bottom: true, left: true },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // West\n            createPart({\n                id: 'w',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? null\n                        : dimensions.leftWidth + (dimensions.innerWidth - constrains.minWidth);\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-west\n            createPart({\n                id: 'nw',\n                edges: { top: true, right: false, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n        }\n\n        function createPart(partConfig) {\n            allParts[partConfig.id] = {\n                mask: createMask(_.assign({}, constrains, partConfig)),\n                overlay: createOverlay(partConfig)\n            };\n        }\n\n\n        function createVisualGuides() {\n            visualGuides.$maskBg = $('<div>', {\n                'class': 'mask-bg'\n            });\n            visualGuides.$innerWindow = $('<div>', {\n                'class': 'inner-window'\n            });\n        }\n\n\n        /**\n         * =========================\n         * The compoundMask instance\n         * =========================\n         */\n\n        dimensions  = _.defaults(dimensions || {}, defaultDimensions);\n        position    = _.defaults(position   || {}, defaultPosition);\n        options     = _.defaults(options    || {}, defaultOptions);\n\n        constrains = {\n            minWidth:           (options.resizeHandleSize * 2) + options.dragMinWidth,\n            minHeight:          (options.resizeHandleSize * 2) + options.dragMinHeight,\n            minBottomHeight:    (options.resizeHandleSize * 2) + options.innerDragHeight\n        };\n\n        compoundMask = {\n            init: function init() {\n                var self = this;\n\n                this.setTransforms(dimensions, position);\n\n                createCompoundMask();\n                createVisualGuides();\n                createInnerDragHandle();\n                createCloser();\n\n                closer.on('click', function() {\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                return this;\n            },\n\n            render: function render($container) {\n                invokeOnAll('render', [$container]);\n                innerDrag.render($container);\n                closer.render($container);\n                applyTransforms();\n                return this;\n            },\n\n            destroy: function destroy() {\n                invokeOnAll('destroy');\n                visualGuides = null;\n                innerDrag = null;\n                closer = null;\n                return this;\n            },\n\n            show: function show() {\n                invokeOnAll('show');\n                innerDrag.show();\n                closer.show();\n                this.setState('hidden', false);\n                return this;\n            },\n\n            hide: function hide() {\n                invokeOnAll('hide');\n                innerDrag.hide();\n                closer.hide();\n                this.setState('hidden', true);\n                return this;\n            },\n\n            /**\n             * Allow updating the transform model\n             * @param {Object} dim\n             * @param {Number} dim.outerWidth - overall mask width\n             * @param {Number} dim.outerHeight - overall mask height\n             * @param {Number} dim.innerWidth - inner window width\n             * @param {Number} dim.innerHeight - inner window height\n             * @param {Number} pos\n             * @param {Number} pos.outerX - overall mask x\n             * @param {Number} pos.outerY - overall mask y\n             * @param {Number} pos.innerX - inner window x\n             * @param {Number} pos.innerY - inner window y\n             */\n            setTransforms: function setTransforms(dim, pos) {\n                dimensions  = _.defaults(dim || {}, dimensions);\n                position    = _.defaults(pos || {}, position);\n\n                // automatically complete the dimensions\n                dimensions.topHeight    = pos.innerY - pos.outerY;\n                dimensions.rightWidth   = dim.outerWidth - (pos.innerX - pos.outerX) - dim.innerWidth;\n                dimensions.bottomHeight = dim.outerHeight - (pos.innerY - pos.outerY) - dim.innerHeight;\n                dimensions.leftWidth    = pos.innerX - pos.outerX;\n\n                correctTransforms();\n                applyTransforms();\n            },\n\n            getDimensions: function getDimensions() {\n                return dimensions;\n            },\n\n            getPosition: function getPosition() {\n                return position;\n            },\n\n            getParts: function getParts() {\n                return allParts;\n            }\n        };\n\n        statifier(compoundMask);\n        eventifier(compoundMask);\n\n        return compoundMask;\n    };\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Line Reader\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/lineReader/compoundMask'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, compoundMaskFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'line-reader';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Options for the compoundMask factory\n     * @type {Object}\n     */\n    var maskOptions = {\n        dragMinWidth: 7,\n        dragMinHeight: 7,\n        resizeHandleSize: 7,\n        innerDragHeight: 20\n    };\n\n    var dimensions,\n        position;\n\n    /**\n     * These functions are a first effort to place the mask on the first line on the item\n     * They make a lot of assumptions:\n     * - the item starts with a text\n     * - the padding is set on the .qti-item container\n     * - the padding is consistent with the minWidth/minHeight configuration of the mask\n     * - and some other...\n     * @param {jQuery} $container - where the mask is appended\n     */\n    function getDimensions($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            lineHeight = Math.ceil(parseFloat($qtiContent.css('line-height'))) || 20; // reasonable default line height\n\n        return {\n            outerWidth:     $qtiItem.width() + (maskOptions.resizeHandleSize * 4) + (maskOptions.dragMinWidth * 2),\n            outerHeight:    175, // reasonable default height\n            innerWidth:     $qtiItem.width(),\n            innerHeight:    lineHeight\n        };\n    }\n    function getPosition($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            itemPosition = $qtiItem.position() || {},\n\n            paddingLeft = parseInt($qtiItem.css('padding-left'), 10),\n            paddingTop = parseInt($qtiItem.css('padding-top'), 10),\n\n            textPadding = 3, // this is to let the text breathe a bit\n\n            innerX = parseInt(itemPosition.left, 10) + paddingLeft - textPadding,\n            innerY = parseInt(itemPosition.top, 10) + paddingTop - textPadding;\n\n        return {\n            outerX: innerX - (maskOptions.resizeHandleSize * 2) - maskOptions.dragMinWidth,\n            outerY: 0,\n            innerX: innerX,\n            innerY: innerY\n        };\n    }\n\n    function containerWidthHasChanged($container) {\n        var newDimensions = getDimensions($container);\n        return newDimensions.outerWidth !== dimensions.outerWidth;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this,\n\n                testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $container = testRunner.getAreaBroker().getContentArea().parent();\n\n            this.compoundMask = compoundMaskFactory(maskOptions)\n                .init()\n                .render($container)\n                .on('close', function() {\n                    closeMask();\n                })\n                .hide();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-lineReader\n                return !!options.lineReader;\n            }\n\n            function toggleButton() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function toggleMask() {\n                if (self.compoundMask.getState('hidden')) {\n                    if (containerWidthHasChanged($container)) {\n                        transformMask($container);\n                    }\n                    openMask();\n                } else {\n                    closeMask();\n                }\n            }\n\n            function openMask() {\n                self.compoundMask.show();\n                self.trigger('start');\n                self.button.turnOn();\n            }\n\n            function closeMask() {\n                if (! self.compoundMask.getState('hidden')) {\n                    self.compoundMask.hide();\n                }\n                self.trigger('end');\n                self.button.turnOff();\n            }\n\n            function transformMask($maskContainer) {\n                dimensions = getDimensions($maskContainer);\n                position = getPosition($maskContainer);\n                self.compoundMask.setTransforms(\n                    _.clone(dimensions),\n                    _.clone(position)\n                );\n            }\n\n            // create button\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Line Reader'),\n                icon: 'insert-horizontal-line',\n                control: 'line-reader',\n                text: __('Line Reader')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggleButton)\n                .on('renderitem', function() {\n                    transformMask($container);\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    closeMask();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMask();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.compoundMask.destroy();\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"magnifier\\\">\\n    <div class=\\\"level\\\">\";\n  if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    <div class=\\\"overlay\\\"></div>\\n    <div class=\\\"inner\\\"></div>\\n    <div class=\\\"controls close\\\">\\n        <a href=\\\"#\\\" class=\\\"closeMagnifier\\\" data-control=\\\"closeMagnifier\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close Magnifier\", options) : helperMissing.call(depth0, \"__\", \"Close Magnifier\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n    </div>\\n    <div class=\\\"controls zoom\\\">\\n        <a href=\\\"#\\\" class=\\\"control\\\"  data-control=\\\"zoomOut\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify less\", options) : helperMissing.call(depth0, \"__\", \"Magnify less\", options)))\n    + \"\\\"><span class=\\\"icon-remove\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"control\\\" data-control=\\\"zoomIn\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify more\", options) : helperMissing.call(depth0, \"__\", \"Magnify more\", options)))\n    + \"\\\"><span class=\\\"icon-add\\\"></span></a>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel',[\n    'jquery',\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, movableComponent, magnifierPanelTpl) {\n    'use strict';\n\n    /**\n     * The screen pixel ratio\n     * @type {Number}\n     */\n    var screenRatio = window.screen.width / window.screen.height;\n\n    /**\n     * Standard debounce delay for heavy process\n     * @type {Number}\n     */\n    var debounceDelay = 50;\n\n    /**\n     * Standard scrolling throttling for the scrolling\n     * It can be lower than the debounce delay as it is lighter in process and it improves the user experience\n     * @type {Number}\n     */\n    var scrollingDelay = 20;\n\n    /**\n     * The default base size\n     * @type {Number}\n     */\n    var defaultBaseSize = 116;\n\n    /**\n     * The minimum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMin = 2;\n\n    /**\n     * The maximum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMax = 8;\n\n    /**\n     * The default zoom level\n     * @type {Number}\n     */\n    var defaultLevel = defaultLevelMin;\n\n    /**\n     * Some default values\n     * @type {Object}\n     */\n    var defaultConfig = {\n        level: defaultLevel,\n        levelMin: defaultLevelMin,\n        levelMax: defaultLevelMax,\n        levelStep: .5,\n        baseSize: defaultBaseSize,\n        width: defaultBaseSize * defaultLevel,\n        height: defaultBaseSize * defaultLevel / screenRatio,\n        minWidth: defaultBaseSize * defaultLevelMin,\n        minHeight: defaultBaseSize * defaultLevelMin / screenRatio,\n        maxRatio: .5,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a magnifier panel component\n     * @param {Object} config\n     * @param {Number} [config.level] - The default zoom level\n     * @param {Number} [config.levelMin] - The minimum allowed zoom level\n     * @param {Number} [config.levelMax] - The maximum allowed zoom level\n     * @param {Number} [config.levelStep] - The level increment applied when using the controls + and -\n     * @param {Number} [config.baseSize] - The base size used to assign the width and the height according to the zoom level\n     * @param {Number} [config.maxRatio] - The ratio for the maximum size regarding the size of the window\n     * @returns {magnifierPanel} the component (initialized)\n     */\n    function magnifierPanelFactory(config) {\n        var initConfig = _.defaults(config || {}, defaultConfig);\n        var zoomLevelMin = parseFloat(initConfig.levelMin);\n        var zoomLevelMax = parseFloat(initConfig.levelMax);\n        var zoomLevelStep = parseFloat(initConfig.levelStep);\n        var zoomLevel = adjustZoomLevel(initConfig.level);\n        var maxRatio = parseFloat(initConfig.maxRatio);\n        var baseSize = parseInt(initConfig.baseSize, 10);\n        var zoomSize = baseSize * zoomLevel;\n        var $initTarget = null;\n        var controls = null;\n        var observer = null;\n        var targetWidth, targetHeight, dx, dy;\n        var scrolling = [];\n\n        /**\n         * @typedef {Object} magnifierPanel\n         */\n        var magnifierPanel = movableComponent({\n            /**\n             * Gets the current zoom level\n             * @returns {Number}\n             */\n            getZoomLevel: function getZoomLevel() {\n                return zoomLevel;\n            },\n\n            /**\n             * Gets the targeted content the magnifier will zoom\n             * @returns {jQuery}\n             */\n            getTarget: function getTarget() {\n                return controls && controls.$target;\n            },\n\n            /**\n             * Sets the targeted content the magnifier will zoom\n             * @param {jQuery} $newTarget\n             * @returns {magnifierPanel}\n             * @fires targetchange\n             * @fires update\n             */\n            setTarget: function setTarget($newTarget) {\n                if (controls) {\n                    controls.$target = $newTarget;\n                    controls.$viewTarget = null;\n\n                    setScrollingListener();\n\n                    /**\n                     * @event magnifierPanel#targetchange\n                     * @param {jQuery} $target\n                     */\n                    this.trigger('targetchange', controls.$target);\n\n                    this.update();\n                } else {\n                    $initTarget = $newTarget;\n                }\n\n                return this;\n            },\n\n            /**\n             * Sets the zoom level of the magnifier\n             * @param {Number} level\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomTo: function zoomTo(level) {\n                if (level && _.isFinite(level)) {\n                    zoomLevel = adjustZoomLevel(level);\n                }\n\n                applyZoomLevel();\n                showZoomLevel();\n                updateMaxSize();\n                updateZoom();\n\n                /**\n                 * @event magnifierPanel#zoom\n                 * @param {Number} zoomLevel\n                 */\n                this.trigger('zoom', zoomLevel);\n\n                return this;\n            },\n\n            /**\n             * Increments the zoom level of the magnifier\n             * @param {Number} step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomBy: function zoomBy(step) {\n                if (step && _.isFinite(step)) {\n                    this.zoomTo(zoomLevel + parseFloat(step));\n                }\n                return this;\n            },\n\n            /**\n             * Zoom-in using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomIn: function zoomIn() {\n                return this.zoomBy(zoomLevelStep);\n            },\n\n            /**\n             * Zoom-out using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomOut: function zoomOut() {\n                return this.zoomBy(-zoomLevelStep);\n            },\n\n            /**\n             * Places the magnifier sight at a particular position on the target content\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {magnifierPanel}\n             */\n            zoomAt: function zoomAt(x, y) {\n                var position;\n                if (controls) {\n                    position = this.translate(x, y);\n                    controls.$inner.css({\n                        top: -position.top,\n                        left: -position.left\n                    });\n                }\n            },\n\n            /**\n             * Translates screen coordinates to zoom coordinates\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {Object}\n             */\n            translate: function translate(x, y) {\n                return {\n                    top: translateMagnifier(y, targetHeight, this.config.height),\n                    left: translateMagnifier(x, targetWidth, this.config.width)\n                };\n            },\n\n            /**\n             * Updates the magnifier with the target content\n             * @returns {magnifierPanel}\n             * @fires update\n             */\n            update: function update() {\n                if (controls && controls.$target) {\n                    controls.$clone = controls.$target.clone().removeAttr('id');\n                    controls.$clone.find('iframe').remove();\n                    controls.$clone.find('[name],[id],[data-serial]').removeAttr('name id data-serial');\n                    controls.$inner.empty().append(controls.$clone);\n\n                    applySize();\n                    applyZoomLevel();\n                    updateZoom();\n                    updateMaxSize();\n                    applyScrolling();\n\n                    /**\n                     * @event magnifierPanel#update\n                     */\n                    this.trigger('update');\n                }\n\n                return this;\n            }\n        }, defaultConfig);\n\n        /**\n         * Will update the magnifier content with the actual content\n         * @type {Function}\n         */\n        var updateMagnifier = _.debounce(_.bind(magnifierPanel.update, magnifierPanel), debounceDelay);\n\n        /**\n         * Will update the magnifier content with the scrolling position\n         * @type {Function}\n         */\n        var scrollingListenerCallback = _.throttle(function (event) {\n\n            var $target = $(event.target);\n            var scrollingTop = event.target.scrollTop;\n            var scrollLeft = event.target.scrollLeft;\n            var scrollId, scrollData;\n\n            //check if the element is already known as a scrollable element\n            if (controls && controls.$clone && $target.data('magnifier-scroll')) {\n\n                scrollId = $target.data('magnifier-scroll');\n                scrollData = _.find(scrolling, {id: scrollId});\n                scrollData.scrollTop = scrollingTop;\n                scrollData.scrollLeft = scrollLeft;\n\n                //if in clone, scroll it\n                scrollInClone(scrollData);\n\n            } else {\n                //if the element is not yet identified as a scrollable element, tag it and register its id\n                scrollId = _.uniqueId('scrolling_');\n                $target.attr('data-magnifier-scroll', scrollId);\n                scrolling.push({\n                    id: scrollId,\n                    scrollTop: scrollingTop,\n                    scrollLeft: scrollLeft\n                });\n\n                //update all\n                magnifierPanel.update();\n            }\n\n        }, scrollingDelay);\n\n        /**\n         * Scroll an element in the clone\n         *\n         * @param {Object} scrollData\n         * @param {String} scrollData.id\n         * @param {Number} [scrollData.scrollTop]\n         * @param {Number} [scrollData.scrollLeft]\n         */\n        function scrollInClone(scrollData) {\n            var $clonedTarget;\n            if (controls && controls.$clone && scrollData && scrollData.id) {\n                $clonedTarget = controls.$clone.find('[data-magnifier-scroll=' + scrollData.id + ']');\n                if ($clonedTarget.length) {\n                    if (_.isNumber(scrollData.scrollTop)) {\n                        $clonedTarget[0].scrollTop = scrollData.scrollTop;\n                    }\n                    if (_.isNumber(scrollData.scrollLeft)) {\n                        $clonedTarget[0].scrollLeft = scrollData.scrollLeft;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Initializes the listener for scrolling event and transfer the scrolling\n         */\n        function setScrollingListener() {\n            window.addEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Stops the listener for scrolling event\n         */\n        function removeScrollingListener() {\n            window.removeEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Applies scrolling programmatically from the recorded list of elements to be scrolled\n         */\n        function applyScrolling() {\n            _.forEach(scrolling, scrollInClone);\n        }\n\n        /**\n         * Adjusts a provided zoom level to fit the constraints\n         * @param {Number|String} level\n         * @returns {Number}\n         */\n        function adjustZoomLevel(level) {\n            return Math.max(zoomLevelMin, Math.min(parseFloat(level), zoomLevelMax));\n        }\n\n        /**\n         * Applies the zoom level to the content\n         */\n        function applyZoomLevel() {\n            if (controls) {\n                controls.$inner.css({\n                    transform: 'scale(' + zoomLevel + ')'\n                });\n            }\n        }\n\n        /**\n         * Shows the zoom level using a CSS animation\n         */\n        function showZoomLevel() {\n            var $newZoomLevel;\n            if (controls) {\n                $newZoomLevel = controls.$zoomLevel.clone(true).html(zoomLevel);\n                controls.$zoomLevel.before($newZoomLevel).remove();\n                controls.$zoomLevel = $newZoomLevel;\n            }\n        }\n\n        /**\n         * Updates the max size according to the window's size\n         */\n        function updateMaxSize() {\n            var $window = $(window);\n            magnifierPanel.config.maxWidth = $window.width() * maxRatio;\n            magnifierPanel.config.maxHeight = $window.height() * maxRatio;\n        }\n\n        /**\n         * Forwards the size of the target to the cloned content\n         */\n        function applySize() {\n            if (controls && controls.$clone) {\n                targetWidth = controls.$target.width();\n                targetHeight = controls.$target.height();\n\n                controls.$clone\n                    .width(targetWidth)\n                    .height(targetHeight);\n            }\n        }\n\n        /**\n         * Place the zoom sight at the right place inside the magnifier\n         */\n        function updateZoom() {\n            var position;\n            if (controls && controls.$target) {\n                position = magnifierPanel.getPosition();\n\n                position.x += dx + controls.$target.scrollLeft();\n                position.y += dy + controls.$target.scrollTop();\n\n                magnifierPanel.zoomAt(position.x, position.y);\n            }\n        }\n\n        /**\n         * Creates the observer that will react to DOM changes to update the magnifier\n         */\n        function createObserver() {\n            observer = new window.MutationObserver(updateMagnifier);\n        }\n\n        /**\n         * Starts to observe the DOM of the magnifier target\n         */\n        function startObserver() {\n            if (controls && controls.$target) {\n                observer.observe(controls.$target.get(0), {\n                    childList: true,        // Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.\n                    attributes: true,       // Set to true if mutations to target's attributes are to be observed.\n                    characterData: true,    // Set to true if mutations to target's data are to be observed.\n                    subtree: true           // Set to true if mutations to target and target's descendants are to be observed.\n                });\n            }\n            setScrollingListener();\n        }\n\n        /**\n         * Stops to observe the DOM of the magnifier target\n         */\n        function stopObserver() {\n            observer.disconnect();\n            removeScrollingListener();\n        }\n\n        /**\n         * Translates a screen coordinate into the magnifier\n         * @param {Number} coordinate\n         * @param {Number} actualSize\n         * @param {Number} magnifierSize\n         * @returns {Number}\n         */\n        function translateMagnifier(coordinate, actualSize, magnifierSize) {\n            var delta = 0;\n            var ratio = zoomLevel;\n\n            if (actualSize) {\n                delta = ((actualSize * (zoomLevel - 1)) / 2);\n                ratio = (actualSize * zoomLevel - magnifierSize) / (actualSize - magnifierSize);\n            }\n\n            return coordinate * ratio - delta;\n        }\n\n        /**\n         * Gets the top element from a particular absolute point.\n         * @param {Number} x - the page X-coordinate of the point\n         * @param {Number} y - the page Y-coordinate of the point\n         * @returns {HTMLElement}\n         */\n        function getElementFromPoint(x, y) {\n            var el;\n\n            if (controls) {\n                controls.$overlay.addClass('hidden');\n            }\n\n            el = document.elementFromPoint(x, y);\n\n            if (controls) {\n                controls.$overlay.removeClass('hidden');\n            }\n\n            return el;\n        }\n\n        /**\n         * Find the related node in the target. The both trees must have the same content.\n         * @param {jQuery|HTMLElement} node - the node for which find a relation\n         * @param {jQuery|HTMLElement} root - the root of the tree that contains the actual node\n         * @param {jQuery|HTMLElement} target - the root of the tree that could contains the related node\n         * @returns {jQuery}\n         */\n        function findSourceNode(node, root, target) {\n            var $node = $(node);\n            var $root = $(root);\n            var $target = $(target);\n            var indexes = [$node.index()];\n\n            // compute map of node's parents indexes\n            $node.parents().each(function () {\n                var $this = $(this);\n                if (!$this.is($root)) {\n                    indexes.push($this.index());\n                } else {\n                    return false;\n                }\n            });\n\n            // the last index is related to the root, so ignore it\n            indexes.pop();\n\n            // now try to find the same node using the path provided by the indexes map\n            if (indexes.length) {\n                $node = $target;\n                _.forEachRight(indexes, function (index) {\n                    $node = $node.children().eq(index);\n                    if (!$node.length) {\n                        return false;\n                    }\n                });\n            } else {\n                // nothing to search for...\n                $node = $();\n            }\n            return $node;\n        }\n\n        initConfig.width = zoomSize;\n        initConfig.height = zoomSize / screenRatio;\n        initConfig.minWidth = baseSize * zoomLevelMin;\n        initConfig.minHeight = baseSize * zoomLevelMin / screenRatio;\n\n        magnifierPanel\n            .setTemplate(magnifierPanelTpl)\n            .on('render', function () {\n                var self = this;\n                var $component = this.getElement();\n\n                this.setState('hidden', true);\n\n                // compute the padding of the magnifier content\n                dx = ($component.outerWidth() - $component.width()) / 2;\n                dy = ($component.outerHeight() - $component.height()) / 2;\n\n                controls = {\n                    $target: $initTarget,\n                    $inner: $('.inner', $component),\n                    $zoomLevel: $('.level', $component),\n                    $overlay: $('.overlay', $component)\n                };\n                $initTarget = null;\n\n                // click on zoom-in or zoom-out controls\n                $component.on('click touchstart', '.zoom', function (event) {\n                    var $button = $(event.target).closest('.control');\n                    var action = $button.data('control');\n\n                    event.preventDefault();\n                    if (action && self[action]) {\n                        self[action]();\n                    }\n                });\n\n                // click on close controls\n                $component.on('click touchstart', '.closeMagnifier', function (event) {\n                    event.preventDefault();\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                // interact through the magnifier glass with the zoomed content\n                $component.on('click touchstart', '.overlay', function (event) {\n                    if (!self.is('noclick')) {\n                        findSourceNode(\n                            getElementFromPoint(event.pageX, event.pageY),\n                            controls.$inner,\n                            controls.$target\n                        ).click().focus();\n                    } else {\n                        // was a 'dragend' click, just ignore\n                        self.setState('noclick', false);\n                    }\n                });\n\n                createObserver();\n                updateMaxSize();\n                applyZoomLevel();\n            })\n            .on('dragstart resizestart', function () {\n                // prevent the 'dragend' click to be understood as an actual click\n                this.setState('noclick', true);\n            })\n            .on('move resize', function () {\n                updateZoom();\n            })\n            .on('show', function () {\n                updateMagnifier();\n                startObserver();\n            })\n            .on('hide', function () {\n                stopObserver();\n            })\n            .on('resize', function () {\n                updateMaxSize();\n            })\n            .on('destroy', function () {\n                stopObserver();\n                $initTarget = null;\n                controls = null;\n                observer = null;\n            })\n            .init(initConfig);\n\n        return magnifierPanel;\n    }\n\n    return magnifierPanelFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifier',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, magnifierPanelFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'magnifier';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultOptions = {\n        zoomMin: 2,    // Smallest magnification factor\n        zoomMax: 8,    // Biggest magnification factor\n        zoomStep: .5   // Increment between min an max\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultOptions);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var magnifierPanel = null;\n\n            /**\n             * Creates the magnifier panel on demand\n             * @returns {magnifierPanel}\n             * @fires plugin-magnifier-create.magnifier\n             */\n            function getMagnifierPanel() {\n                var $container;\n\n                if (!magnifierPanel) {\n                    $container = testRunner.getAreaBroker().getContainer();\n\n                    magnifierPanel = magnifierPanelFactory({\n                        levelMin: pluginConfig.zoomMin,\n                        levelMax: pluginConfig.zoomMax,\n                        levelStep: pluginConfig.zoomStep\n                    })\n                        .on('show', function () {\n                            /**\n                             * @event plugin-magnifier-show.magnifier\n                             */\n                            self.trigger('magnifier-show');\n                        })\n                        .on('hide', function () {\n                            /**\n                             * @event plugin-magnifier-hide.magnifier\n                             */\n                            self.trigger('magnifier-hide');\n                        })\n                        .on('zoom', function (level) {\n                            /**\n                             * @event plugin-magnifier-zoom.magnifier\n                             * @param {Number} zoomLevel\n                             */\n                            self.trigger('magnifier-zoom', level);\n                        })\n                        .on('close', function () {\n                            hideMagnifier();\n                        })\n                        .setTarget($container)\n                        .render($container.parent());\n\n                    /**\n                     * @event plugin-magnifier-create.magnifier\n                     */\n                    self.trigger('magnifier-create');\n                }\n                return magnifierPanel;\n            }\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-magnifier\n                return !!options.magnifier;\n            }\n\n            /**\n             * Shows/hides the plugin GUI according to context\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Shows/hides the magnifier\n             */\n            function toggleMagnifier() {\n                if (self.getState('enabled')) {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    } else {\n                        showMagnifier();\n                    }\n                }\n            }\n\n            /**\n             * Opens the magnifier panel\n             * @fires plugin-magnifier-show.magnifier\n             */\n            function showMagnifier() {\n                getMagnifierPanel();\n\n                if (magnifierPanel.is('hidden')) {\n                    magnifierPanel.show();\n                }\n                self.button.turnOn();\n                testRunner.trigger('plugin-open.' + pluginName);\n\n                self.setState('active', true);\n            }\n\n            /**\n             * Closes the magnifier panel\n             * @fires plugin-magnifier-hide.magnifier\n             */\n            function hideMagnifier() {\n                self.setState('active', false);\n\n                self.button.turnOff();\n                testRunner.trigger('plugin-close.' + pluginName);\n\n                if (magnifierPanel && !magnifierPanel.is('hidden')) {\n                    magnifierPanel.hide();\n                }\n            }\n\n            // build element\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'magnify',\n                title: __('Displays a customisable magnifier'),\n                text: __('Magnifying Glass'),\n                icon: 'find'\n            });\n\n            // attach behavior\n            this.button.on('click', function (event) {\n                event.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n            // runner life cycle\n                .on('loaditem', function () {\n                    togglePlugin();\n                    self.disable();\n                })\n                .on('renderitem', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel\n                            .update()\n                            .zoomTo(pluginConfig.zoomMin);\n                    }\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                    self.disable();\n                })\n                .on('destroy', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel.destroy();\n                    }\n                    magnifierPanel = null;\n                })\n\n                // commands that controls the magnifier\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMagnifier();\n                    }\n                })\n                .on(actionPrefix + 'in', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomIn();\n                    }\n                })\n                .on(actionPrefix + 'out', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomOut();\n                    }\n                })\n                .on(actionPrefix + 'close', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/textToSpeech/textToSpeech', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"text-to-speech hidden\\\">\\n    <div class=\\\"action click-to-speak\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Click to speak\", options) : helperMissing.call(depth0, \"__\", \"Click to speak\", options)))\n    + \"\\\"><span class=\\\"icon-click-to-speak\\\"></span></div>\\n\\n    <div class=\\\"action play\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Play\", options) : helperMissing.call(depth0, \"__\", \"Play\", options)))\n    + \"\\\"><span class=\\\"icon-play\\\"></span></div>\\n    <div class=\\\"action pause\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Pause\", options) : helperMissing.call(depth0, \"__\", \"Pause\", options)))\n    + \"\\\"><span class=\\\"icon-pause\\\"></span></div>\\n\\n    <div class=\\\"action stop\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Stop\", options) : helperMissing.call(depth0, \"__\", \"Stop\", options)))\n    + \"\\\"><span class=\\\"icon-stop\\\"></span></div>\\n\\n    <div class=\\\"action settings\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Settings\", options) : helperMissing.call(depth0, \"__\", \"Settings\", options)))\n    + \"\\\">\\n        <span class=\\\"icon-settings\\\"></span>\\n        <div class=\\\"settings-menu\\\">\\n            <div class=\\\"option volume\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Volume\", options) : helperMissing.call(depth0, \"__\", \"Volume\", options)))\n    + \"\\\">\\n                <span class=\\\"icon-volume\\\"></span>\\n                <div class=\\\"slider-container\\\">\\n                    <div class=\\\"slider\\\"></div>\\n                </div>\\n                <div class=\\\"hover-container\\\"></div>\\n            </div>\\n            <div class=\\\"option speed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Speech speed\", options) : helperMissing.call(depth0, \"__\", \"Speech speed\", options)))\n    + \"\\\">\\n                <span class=\\\"icon-speed\\\"></span>\\n                <div class=\\\"slider-container\\\">\\n                    <div class=\\\"slider\\\"></div>\\n                </div>\\n                <div class=\\\"hover-container\\\"></div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/tools/textToSpeech/textToSpeech',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\ndefine('taoQtiTest/runner/plugins/tools/textToSpeech/textToSpeech',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/tools/textToSpeech/textToSpeech',\n    'css!taoQtiTest/runner/plugins/tools/textToSpeech/textToSpeech',\n    'nouislider',\n    'mathJax'\n], function (\n    $,\n    _,\n    __,\n    componentFactory,\n    tpl\n) {\n    'use strict';\n\n    /**\n     * The factory\n     * @param {jQuery} [options.$contentArea = '$(body)']\n     * @param {Boolean} [options.enableClickToSpeak = false]\n     * @param {Array} [options.ignoreEls = ['header', '.left-bar', '.right-bar', '.modal', 'footer', '.action-bar', '.sts-scope', '.media-container']]\n     * @param {String} [options.toolbarUrl = '//taotoolbar.speechstream.net/tao/configQA.js']\n     * @param {Object} [config]\n     * @returns {ui/component}\n     */\n    return function factory(options, config) {\n        var component;\n        var texthelpMapping = {\n            properties: {\n                pageCompleteCallback:    'eba_page_complete_callback',\n                texthelpSpeechStream:    'TexthelpSpeechStream',\n                volumeValue:             'eba_volume_value'\n            },\n            functions: {\n                barDynamicStart:         '$rw_barDynamicStart',\n                barCacheInit:            '$rw_barCacheInit',\n                barInit:                 '$rw_barInit',\n                cachePage:               '$rw_cachePage',\n                disableSpeech:           '$rw_disableSpeech',\n                enableClickToSpeak:      '$rw_enableClickToSpeak',\n                enableContinuousReading: '$rw_enableContinuousReading',\n                enableSpeech:            '$rw_enableSpeech',\n                event_pause:             '$rw_event_pause',\n                event_play:              '$rw_event_play',\n                getSpeed:                '$rw_getSpeed',\n                getVoice:                '$rw_getVoice',\n                hasReachedEnd:           '$rw_hasReachedEnd',\n                isPaused:                '$rw_isPaused',\n                isSpeaking:              '$rw_isSpeaking',\n                isTextSelectedForPlay:   '$rw_isTextSelectedForPlay',\n                isUsingMathjax:          '$rw_isUsingMathjax',\n                setSpeedValue:           '$rw_setSpeedValue',\n                setUsingMath:            '$rw_setUsingMath',\n                setUsingMathjax:         '$rw_setUsingMathjax',\n                setUsingMaths:           '$rw_setUsingMaths',\n                setVolumeValue:          '$rw_setVolumeValue',\n                stopSpeech:              '$rw_stopSpeech',\n                tagSentences:            '$rw_tagSentences',\n                userParameters:          '$rw_userParameters'\n            }\n        };\n        var speed;\n        var volume;\n\n        _.assign(options || {}, {\n            contentArea: $('body'),\n            enableClickToSpeak: false,\n            ignoreEls: ['header', '.left-bar', '.right-bar', '.modal', 'footer', '.action-bar', '.sts-scope', '.media-container'],\n            toolbarUrl: '//taotoolbar.speechstream.net/tao/configQA.js'\n        });\n\n        component = componentFactory({\n            /**\n             * Execute texthelp function\n             * @param {String} action\n             * @param {...} arguments\n             */\n            _exec: function _exec(action) {\n                var args = [].slice.call(arguments, 1);\n                var fn = window[texthelpMapping.functions[action]];\n\n                if (fn && _.isFunction(fn)) {\n                    return fn.apply(this, args);\n                }\n            },\n\n            /**\n             * Get texthelp property\n             * @param {String} property\n             */\n            _get: function _get(property) {\n                return window[texthelpMapping.properties[property]];\n            },\n\n            /**\n             * Set texthelp property\n             * @param {String} property\n             * @param {*} value\n             */\n            _set: function _set(property, value) {\n                var prop = texthelpMapping.properties[property];\n\n                if (prop) {\n                    return window[prop] = value;\n                }\n            },\n\n            /**\n             * Initialize texthelp\n             */\n            _init: function _init() {\n                var self = this;\n\n                // Initialize texthelp\n                this._exec('barDynamicStart');\n                this._exec('barInit');\n\n                // Set some default texthelp options\n                this._exec('enableClickToSpeak', options.enableClickToSpeak);\n                this._exec('setSpeedValue', speed);\n                this._exec('setVolumeValue', volume);\n\n                // Set texthelp callbacks\n                // todo: page complete isn't fired by texthelp (something to do with caching)\n                this._set('pageCompleteCallback', function () {\n                    self.trigger('stop');\n                });\n\n                return this;\n            },\n\n            /**\n             * Re-initialize texthelp\n             */\n            updateTexthelpCache: function updateTexthelpCache(deliveryId, itemId) {\n                var tss = this._get('texthelpSpeechStream');\n\n                tss.g_strBookId = deliveryId;\n                tss.g_strPageId = itemId;\n\n                this._exec('tagSentences', options.$contentArea.selector);\n\n                return this;\n            },\n\n            /**\n             * Enable texthelp\n             */\n            enable: function enable() {\n                this._exec('enableSpeech');\n                return this;\n            },\n\n            /**\n             * Disable texthelp\n             */\n            disable: function disable() {\n                this._exec('disableSpeech');\n                return this;\n            },\n\n            /**\n             * Play\n             */\n            play: function play() {\n                if (!this._exec('isSpeaking') || this._exec('isPaused')) {\n                    this._exec('event_play');\n                    this.trigger('play');\n                }\n\n                return this;\n            },\n\n            /**\n             * Pause\n             */\n            pause: function pause() {\n                this._exec('event_pause');\n                this.trigger('pause');\n\n                return this;\n            },\n\n            /**\n             * Stop\n             */\n            stop: function stop() {\n                this._exec('stopSpeech');\n                this.trigger('stop');\n\n                return this;\n            },\n\n            /**\n             * Speech speed\n             */\n            setSpeed: function setSpeed(e, value) {\n                speed = +value;\n\n                this._exec('setSpeedValue', speed);\n                this.trigger('setSpeed', speed);\n\n                return this;\n            },\n\n            /**\n             * Volume\n             */\n            setVolume: function setVolume(e, value) {\n                volume = +value;\n\n                this._exec('setVolumeValue', volume);\n                this.trigger('setVolume', volume);\n\n                return this;\n            },\n\n            /**\n             * Click to pronounce\n             */\n            clickToSpeak: function clickToSpeak() {\n                var self = this;\n\n                options.enableClickToSpeak = !options.enableClickToSpeak;\n\n                this._exec('enableClickToSpeak', options.enableClickToSpeak);\n                this._exec('enableContinuousReading', !options.enableClickToSpeak); // continuous reading is off when click to speak is on\n                this.trigger('clickToSpeak');\n\n                //adding each item a special class by presence of which normal click handling could be prevented and passed to click-to-speak handling\n                options['$contentArea'].find('.qti-item').each(function() {\n                    $(this).toggleClass('prevent-click-handler');\n                });\n\n                //we should disable click-to-speak while navigating through test, if it was enabled on some item page\n                //just to ensure that after other item load click-to-speak will function normally, and tao click handlers won't work on item-part click\n                options['$navigationArea'].on('click', 'a', function() {\n                    if (options['$contentArea'].find('.qti-item.prevent-click-handler').length > 0) {\n                        self.clickToSpeak();\n                    }\n                });\n\n                return this;\n            }\n        }, {\n            // defaults\n        })\n        .setTemplate(tpl)\n        .on('init', function () {\n            var self = this;\n\n            speed = 40; // default speed\n            volume = 40; // default volume\n\n            // we have to mark some blocks as ignored to prevent TTS accessing it\n            $(options.ignoreEls.join(',')).attr('ignore', true);\n\n            require([options.toolbarUrl], function () {\n                var tss = self._get('texthelpSpeechStream');\n\n                require([\"//\" + tss.g_strServer + \"/SpeechStream/v\" + tss.g_strBuild + \"/texthelpMain.js\"], function () {\n                    self._init();\n                });\n            });\n        })\n        .init(config)\n        .on('render', function () {\n            var $this = this.getElement();\n\n            // prevents clicks from removing highlighted text\n            $this.on('mousedown', function (e) {\n                e.preventDefault();\n                return false;\n            });\n\n            // Action clicks\n            $this.find('.action').on('click', function (e) {\n                var $action = $(this);\n\n                // prevents disabled actions from being triggered\n                if ($action.hasClass('disabled')) {\n                    e.stopImmediatePropagation();\n                }\n\n                // hides settings menu when another action clicked\n                if (!$action.closest('.settings').length) {\n                    $this.find('.settings').removeClass('active');\n                    $this.find('.settings > .settings-menu').hide();\n                }\n            });\n\n            // Show/hide settings menu\n            $this.find('.settings').on('click', function () {\n                $(this).toggleClass('active');\n                $this.find('.settings-menu').toggle();\n            });\n\n            // Settings menu\n            $this.find('.settings > .settings-menu')\n            .on('click', function (e) { // prevent child elements triggering a click on settings menu\n                e.stopPropagation();\n            })\n            .hide(); // Hide settings menu to begin\n\n            // Hide/show volume and speed sliders\n            $this.find('.settings > .settings-menu > .option')\n            .on('hover', function () {\n                $(this).find('.slider-container').show();\n            })\n            .on('mouseleave', function () {\n                $(this).find('.slider-container').hide();\n            });\n\n            // Hide slider to begin\n            $this.find('.settings > .settings-menu > .option > .slider-container').hide();\n\n            // Text to speech actions\n            $this.find('.click-to-speak').on('click', this.clickToSpeak);\n            $this.find('.play')          .on('click', this.play);\n            $this.find('.pause')         .on('click', this.pause)       .hide();\n            $this.find('.stop')          .on('click', this.stop);\n\n            // Settings menu's volume slider action\n            $this.find('.settings > .settings-menu > .volume .slider')\n            .noUiSlider({\n                animate: true,\n                connected: true,\n                range: {\n                    min: 0,\n                    max: 100\n                },\n                start: volume,\n                step: 10\n            })\n            .on('change', this.setVolume);\n\n            // Settings menu's speed slider\n            $this.find('.settings > .settings-menu > .speed .slider')\n            .noUiSlider({\n                animate: true,\n                connected: true,\n                range: {\n                    min: 0,\n                    max: 100\n                },\n                start: speed,\n                step: 15 //actual step for speed slider, so the values will be 0,15,30,etc,etc,100.\n            })\n            .on('change', this.setSpeed);\n        })\n        .on('clickToSpeak', function () {\n            var $el = this.getElement();\n\n            if (options.enableClickToSpeak) {\n                $el.find('.click-to-speak').addClass('active');\n                $el.find('.play').addClass('disabled').show();\n                $el.find('.pause').addClass('disabled').hide();\n                options.$contentArea.css('cursor', 'pointer');\n            } else {\n                $el.find('.click-to-speak').removeClass('active');\n                $el.find('.play').removeClass('disabled').show();\n                $el.find('.pause').removeClass('disabled').hide();\n                options.$contentArea.css('cursor', 'default');\n            }\n        })\n        .on('play', function () {\n            var $el = this.getElement();\n\n            $el.find('.play').hide();\n            $el.find('.pause').show();\n        })\n        .on('pause', function () {\n            var $el = this.getElement();\n\n            $el.find('.play').show();\n            $el.find('.pause').hide();\n        })\n        .on('stop', function () {\n            var $el = this.getElement();\n\n            $el.find('.play').show();\n            $el.find('.pause').hide();\n        });\n\n        return component;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\ndefine('taoQtiTest/runner/plugins/tools/textToSpeech/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/stacker',\n    'taoQtiTest/runner/plugins/tools/textToSpeech/textToSpeech',\n], function (\n    $,\n    _,\n    __,\n    pluginFactory,\n    hider,\n    stackerFactory,\n    ttsFactory\n) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'textToSpeech',\n\n        /**\n         * Initialize plugin\n         * @returns {this}\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.ttsButton = this.getAreaBroker().getToolbox().createEntry({\n                control: 'tts',\n                icon: 'headphones',\n                text: __('Text to Speech'),\n                title: __('Text to Speech')\n            })\n            .on('render', function () {\n                var stacker = stackerFactory('test-runner');\n\n                self.tts = ttsFactory({\n                    $contentArea: testRunner.getAreaBroker().getContentArea(),\n                    $navigationArea: testRunner.getAreaBroker().getNavigationArea()\n                })\n                .render(self.ttsButton.getElement())\n                .disable() // disable & hide by default\n                .hide();\n\n                stacker.autoBringToFront(self.tts.getElement());\n            })\n            .on('click', function (e) {\n                var ttsEl = self.tts.getElement();\n\n                // prevent action if the click is made inside the tts controls which is a sub part of the button\n                if ($(e.target).closest(ttsEl).length) {\n                    return;\n                }\n\n                hider.toggle(ttsEl);\n\n                if (ttsEl.hasClass('hidden')) {\n                    self.tts.disable();\n                } else {\n                    self.tts.enable();\n                }\n            })\n            .disable() // disable & hide by default\n            .hide();\n\n            testRunner\n            .on('loaditem', function () {\n                self.disable();\n                self.ttsButton.hide();\n            })\n            .on('enabletools', function () {\n                self.enable();\n            })\n            .on('renderitem', function () {\n                var context = testRunner.getTestContext();\n                var config = testRunner.getConfig();\n\n                if (context.options.textToSpeech) {\n                    self.enable();\n                    self.ttsButton.show();\n\n                    self.tts.updateTexthelpCache(\n                        config.serviceCallId,\n                        this.itemRunner._item.attributes.identifier\n                    );\n                }\n            })\n            .on('disabletools unloaditem', function () {\n                self.disable();\n            });\n\n            return this;\n        },\n\n        /**\n         * Enable plugin\n         */\n        enable: function enable() {\n            if (this.tts) {\n                this.tts.enable();\n            }\n\n            if (this.ttsButton) {\n                this.ttsButton.enable();\n            }\n        },\n\n        /**\n         * Disable plugin\n         */\n        disable: function disable() {\n            if (this.tts) {\n                this.tts.disable();\n            }\n\n            if (this.ttsButton) {\n                this.ttsButton.disable();\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author dieter <dieter@taotesting.com>\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\ndefine('taoQtiTest/runner/plugins/tools/zoom',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'ui/transformer',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, __, hider, transformer, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The standard zoom level, in percentage\n     * @type {Number}\n     */\n    var standard = 100;\n\n    /**\n     * Zoom-In/Zoom-Out steps\n     * @type {Number}\n     */\n    var increment = 10;\n\n    /**\n     * The zoom boundaries, in percentage\n     * @type {Object}\n     */\n    var threshold = {\n        lower: 10,\n        upper: 200\n    };\n\n    /**\n     * Sets the zoom level\n     * @param {jQuery} $target\n     * @param {Number} level - Zoom percentage\n     */\n    var setZoomLevel = function($target, level) {\n        transformer.setTransformOrigin($target, '0 0');\n        transformer.scale($target, level / 100);\n    };\n\n    /**\n     * Restores the standard zoom level\n     * @param {jQuery} $target\n     */\n    var resetZoom = function($target) {\n        transformer.reset($target);\n    };\n\n    /**\n     * Forces a browser repaint\n     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top\n     * @param {jQuery} $target\n     */\n    var forceRepaint = function($target) {\n        var sel = $target[0];\n        if (sel) {\n            sel.style.display = 'none';\n            sel.offsetHeight; // no need to store this anywhere, the reference is enough\n            sel.style.display = '';\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'zoom',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isConfigured() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-zoom\n                return !!options.zoom;\n            }\n\n            /**\n             * Is zoom activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isConfigured()) {//allow zoom\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function zoomAction(dir) {\n\n                var inc = increment * dir;\n                var el, sx, sy, before, after, margin;\n\n                if (self.$zoomTarget) {\n                    el = self.$zoomTarget[0];\n\n                    before = el.getBoundingClientRect();\n\n                    sx = self.$container.scrollLeft();\n                    sy = self.$container.scrollTop();\n\n                    self.zoom = Math.max(threshold.lower, Math.min(threshold.upper, self.zoom + inc));\n\n                    if (self.zoom === standard) {\n                        resetZoom(self.$zoomTarget);\n                    } else {\n                        setZoomLevel(self.$zoomTarget, self.zoom);\n                    }\n\n                    // force a browser repaint to fix a scrollbar issue with WebKit\n                    forceRepaint(self.$zoomTarget);\n\n                    after = el.getBoundingClientRect();\n\n                    sx = Math.max(0, sx + (after.width - before.width) / 2);\n                    sy = Math.max(0, sy + (after.height - before.height) / 2);\n\n                    self.$container.scrollLeft(sx).scrollTop(sy);\n                }\n            }\n\n            function zoomIn() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(1);\n                }\n            }\n\n            function zoomOut() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(-1);\n                }\n            }\n\n            //build element (detached)\n            this.buttonZoomOut = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomOut',\n                title : __('Zoom out'),\n                icon : 'remove'\n            });\n\n            this.buttonZoomIn = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomIn',\n                title : __('Zoom in'),\n                icon : 'add'\n            });\n\n            //attach behavior\n            this.buttonZoomIn.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomin');\n            });\n\n            //attach behavior\n            this.buttonZoomOut.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomout');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.in) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.in, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomin');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.out) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.out, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomout');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function (){\n                    self.zoom = standard;\n\n                    togglePlugin();\n                    self.disable();\n                })\n                .on('renderitem', function (){\n                    self.$container = $('#qti-content');\n                    self.$zoomTarget = $('.qti-item');\n\n                    self.enable();\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                })\n                .on('tool-zoomin', zoomIn)\n                .on('tool-zoomout', zoomOut);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.buttonZoomIn.enable();\n            this.buttonZoomOut.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.buttonZoomIn.disable();\n            this.buttonZoomOut.disable();\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.buttonZoomIn.show();\n            this.buttonZoomOut.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.buttonZoomIn.hide();\n            this.buttonZoomOut.hide();\n        }\n    });\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.test-runner-scope .content-wrapper p.key-navigation-group,.test-runner-scope .content-wrapper div.key-navigation-group{padding:5px !important}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction){border-width:1px !important;border-style:solid;border-color:transparent}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).focusin{border-color:#0e5d91 !important;outline:none}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).qti-interaction .qti-choice.key-navigation-highlight{background:#e7eff4 !important}.test-runner-scope .content-wrapper span.key-navigation-group{border:none !important}.test-runner-scope .content-wrapper span.key-navigation-group.focusin{outline:solid #0e5d91 1px !important;outline-offset:1px}.test-runner-scope .test-sidebar .key-navigation-group.focusin{background:#e7eff4}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight .qti-navigator-tab{border-width:2px}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus{outline:none}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus .qti-navigator-tab{border-top-color:#222 !important;border-left-color:#222 !important;border-right-color:#222 !important}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight{padding-left:8px;border-left:solid 2px #222}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight .key-navigation-highlight:focus{outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group.focusin{-webkit-box-shadow:0 0 6px 2px #3e7da7;-moz-box-shadow:0 0 6px 2px #3e7da7;-ms-box-shadow:0 0 6px 2px #3e7da7;-o-box-shadow:0 0 6px 2px #3e7da7;box-shadow:0 0 6px 2px #3e7da7}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus{margin-bottom:0;border-bottom-color:#e7eff4 !important;outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus.active{border-bottom-color:transparent !important;background:#e7eff4 !important}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus:not(.active):not(:active) .li-inner{color:#e7eff4}header .settings-menu .key-navigation-group{padding-right:5px}header .settings-menu .key-navigation-group.focusin{background-color:rgba(14,93,145,0.5);padding-bottom:10px}header .settings-menu .key-navigation-highlight:focus{height:54px;color:white !important;border-bottom:solid 2px white !important}\\n\\n/*# sourceMappingURL=key-navigation.css.map */.text-to-speech{border:1px solid #ddd;border-radius:2px;-webkit-border-radius:2px;background-color:#f3f1ef;bottom:37px;box-shadow:0 0 15px 1px rgba(0,0,0,0.2);color:#222;left:-2px;padding:2px;position:absolute;width:146px}.text-to-speech>.action{background-color:#f3f1ef;display:inline-block;height:28px;position:relative;width:32px}.text-to-speech>.action>span{color:#222;font-size:15px !important;padding:0 !important;vertical-align:middle;left:0px}.text-to-speech>.action>.settings-menu{border:1px solid #ddd;border-radius:2px;-webkit-border-radius:2px;background-color:#f3f1ef;bottom:30px;box-shadow:0 0 15px 1px rgba(0,0,0,0.2);left:-1px;padding:2px;position:absolute}.text-to-speech>.action>.settings-menu>.option{background-color:#f3f1ef;height:30px;position:relative;width:30px}.text-to-speech>.action>.settings-menu>.option>span{color:#222;font-size:15px;padding:0;vertical-align:middle;left:0px}.text-to-speech>.action>.settings-menu>.option>span.icon-volume{left:1px}.text-to-speech>.action>.settings-menu>.option>.slider-container{border:1px solid #ddd;border-radius:2px;-webkit-border-radius:2px;background-color:#f3f1ef;height:12px;left:26px;margin:8px;padding:2px;position:relative;top:-22px;width:80px}.text-to-speech>.action>.settings-menu>.option>.slider-container .noUi-horizontal{height:6px}.text-to-speech>.action>.settings-menu>.option>.slider-container .noUi-horizontal .noUi-handle{top:-7px}.text-to-speech>.action>.settings-menu>.option>.hover-container{height:44px;left:20px;position:absolute;top:-8px;width:106px;z-index:-1}.text-to-speech>.action>.settings-menu>.option:hover{background-color:#f3f1ef}.text-to-speech>.action>.settings-menu>.option:hover>span{color:#9c9c9c}.text-to-speech>.action:hover{background-color:#f3f1ef}.text-to-speech>.action:hover>span{color:#9c9c9c}.text-to-speech>.action.active{background-color:#a4a9b1}.text-to-speech>.action.active>span{color:#4e4e4e}.text-to-speech>.action.disabled{background-color:#f3f1ef !important}.text-to-speech>.action.disabled>span{color:#d3d3d3}\\n\\n/*# sourceMappingURL=textToSpeech.css.map */');\n"]}