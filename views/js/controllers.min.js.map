{"version":3,"sources":["routes.js","creator/helpers/baseType.js","creator/helpers/cardinality.js","creator/helpers/outcomeValidator.js","creator/helpers/qtiElement.js","creator/helpers/outcome.js","creator/helpers/category.js","creator/modelOverseer.js","../provider/testItems.js","creator/views/item.js","creator/templates/testpart!tpl","creator/templates/section!tpl","creator/templates/rubricblock!tpl","creator/templates/itemref!tpl","creator/templates/outcomes!tpl","tpl!taoQtiTest/controller/creator/templates/test-props","tpl!taoQtiTest/controller/creator/templates/testpart-props","tpl!taoQtiTest/controller/creator/templates/section-props","tpl!taoQtiTest/controller/creator/templates/itemref-props","tpl!taoQtiTest/controller/creator/templates/itemref-props-weight","tpl!taoQtiTest/controller/creator/templates/rubricblock-props","tpl!taoQtiTest/controller/creator/templates/category-presets","creator/templates/index.js","creator/views/property.js","creator/views/actions.js","creator/helpers/categorySelector.js","creator/helpers/sectionCategory.js","creator/helpers/qtiTest.js","creator/views/itemref.js","creator/encoders/dom2qti.js","creator/helpers/ckConfigurator.js","creator/views/rubricblock.js","creator/helpers/sectionBlueprints.js","creator/views/section.js","creator/views/testpart.js","creator/views/test.js","creator/helpers/processingRule.js","creator/helpers/scoring.js","creator/creator.js","../testRunner/actionBarHook.js","../testRunner/actionBarTools.js","../testRunner/tpl/navigator!tpl","../testRunner/tpl/navigatorTree!tpl","../testRunner/testReview.js","../testRunner/progressUpdater.js","../testRunner/testMetaData.js","../../serviceApi/ServiceApi.js","../../serviceApi/UserInfoService.js","../../serviceApi/StateStorage.js","runtime/testRunner.js"],"names":["define","Creator","css","actions","index","_","baseTypeEnum","IDENTIFIER","BOOLEAN","INTEGER","FLOAT","STRING","POINT","PAIR","DIRECTED_PAIR","DURATION","FILE","URI","INT_OR_IDENTIFIER","COORDS","ANY","SAME","baseTypeHelper","asArray","getValid","type","defaultType","isFinite","getNameByConstant","getConstantByName","isUndefined","getValue","value","isString","toLowerCase","parseInt","parseFloat","isNaN","name","String","trim","constant","operator","assign","cardinalityEnum","SINGLE","MULTIPLE","ORDERED","RECORD","cardinalityHelper","cardinality","defaultCardinality","validateIdentifier","identifier","identifierValidator","test","validateOutcome","outcome","checkIdentifier","allowedTypes","validOutcome","isPlainObject","validIdentifier","isArray","indexOf","validateOutcomes","outcomes","valid","forEach","outcomeValidator","forceArray","qtiElementHelper","create","properties","element","qti-type","TypeError","find","collection","checkType","qtiElement","types","found","lookupElement","tree","path","nodeName","key","steps","split","nodeNames","len","length","i","partial","has","lookupProperty","result","propertyName","pop","outcomeHelper","getProcessingRuleExpression","outcomeRule","getProcessingRuleProperty","getOutcomeIdentifier","isObject","getOutcomeDeclarations","testModel","outcomeDeclarations","getOutcomeProcessingRules","outcomeProcessing","outcomeRules","eachOutcomeDeclarations","cb","eachOutcomeProcessingRules","eachOutcomeProcessingRuleExpressions","browseExpressions","processingRule","expression","expressions","listOutcomes","isFunction","push","removeOutcomes","check","declarations","rules","indexBy","remove","createOutcome","views","interpretation","longInterpretation","normalMaximum","normalMinimum","masteryValue","baseType","addOutcomeProcessing","addOutcome","replaceOutcomes","concat","isCategoryOption","category","eachCategories","testParts","testPart","assessmentSections","assessmentSection","sectionParts","itemRef","categories","listCategories","keys","listOptions","options","eventifier","statifier","categoryHelper","modelOverseerFactory","model","config","modelOverseer","getModel","setModel","newModel","trigger","this","getConfig","getOutcomesList","map","declaration","getOutcomesNames","getCategories","getOptions","__","urlUtil","request","defaultConfig","getItemClasses","url","route","getItems","getItemClassProperties","defaults","params","classUri","$","loggerFactory","testItemProviderFactory","resourceSelectorFactory","feedback","logger","testItemProvider","onError","err","error","message","$container","selectorConfig","multiple","then","classes","uri","filters","on","self","clearSelection","items","update","catch","updateFilters","values","hb","template","Handlebars","depth0","helpers","partials","data","compilerInfo","merge","stack1","helper","buffer","escapeExpression","call","hash","helperMissing","title","href","label","program1","each","inverse","noop","fn","program","program2","functionType","program4","modes","program5","selected","program3","description","scoring","hasBlueprint","orderIndex","groupId","groupLabel","presets","qtiCategory","id","section","rubricBlock","testProps","testPartProps","sectionProps","itemRefProps","itemRefPropsWeight","rubricBlockProps","categoryPresets","testpart","itemref","rubricblock","itemrefweight","categorypresets","ui","DataBinder","templates","tmplName","propValidation","$view","e","isValid","namespace","$togglers","removeClass","addClass","groupValidator","open","databinder","binderOptions","children","hide","appendTo","filter","startDomComponent","bind","getView","isOpen","onOpen","stopPropagation","onClose","destroy","toggle","not","show","propertyView","propView","preventDefault","$elt","hasClass","disabledClass","blur","activeClass","btnOnClass","move","$actionContainer","containerClass","elementClass","$element","parents","click","$elements","is","fadeOut","insertBefore","fadeIn","insertAfter","movable","actionContainerElt","$moveUp","$moveDown","removable","$delete","disable","enable","tooltip","categorySelectorFactory","updateCategories","selectedCategories","indeterminatedCategories","presetSelected","toArray","categoryEl","presetIndeterminate","customSelected","$customCategoriesSelect","siblings","textContent","customIndeterminate","categorySelector","$presetsCheckboxes","$presetsContainer","createForm","currentCategories","presetsTpl","customCategories","difference","allQtiCategoriesPresets","append","allPresets","$checkbox","$preset","target","closest","prop","defer","select2","width","tags","tokenSeparators","formatNoMatches","maximumInputLength","updateFormState","indeterminate","checked","$li","content","text","extractCategoriesFromPresets","reduce","prev","current","groupIds","pluck","setPresets","errorHandler","isValidSectionModel","setCategories","toRemove","toAdd","all","propagated","addCategories","removeCategories","arrays","union","compact","apply","intersection","sort","throw","_ns","extractIdentifiers","obj","identifiers","flatten","getIdentifier","qtiType","lockedIdentifiers","suggestion","contains","idFormatValidator","qtiIdPattern","validate","callback","testidFormatValidator","qtiTestIdPattern","idAvailableValidator","original","filterQtiType","addMissingQtiType","parentType","isNumber","replace","consolidateModel","ordering","undefined","shuffle","part","rubricBlocks","validateModel","feedbackBlock","outcomeIdentifier","Error","sectionCategory","qtiTestHelper","setUp","refModel","$itemRef","propHandler","removePropHandler","categoriesProperty","weightsProperty","$categoryField","val","join","$weightList","weightTpl","defaultData","weights","resize","listenActionState","document","$parent","$target","throttle","$refs","first","$actions","innerWidth","outerWidth","getAttributes","object","omit","attrToStr","attributes","acc","isEmpty","normalizeNodeName","normalized","toLocaleLowerCase","normalizedNodes","feedbackblock","outcomeidentifier","showhide","encode","modelValue","startTag","decode","nodeValue","$nodeValue","elt","nodeType","xmlBase","class","lang","transform","childNodes","ckConfigurator","mathJax","editor","toolbarType","underline","hider","dialogAlert","namespaceHelper","ckeditor","Dom2QtiEncoder","filterPlugin","plugin","ckConfig","plugins","reject","extraPlugins","rubricModel","$rubricBlock","bindEvent","$el","eventName","namespaceAll","uid","off","ensureWrap","html","charAt","editorToModel","rubric","wrapper","$rubricBlockContent","modelToEditor","updateFeedback","activated","matchValue","changeFeedback","$feedbackOutcomeLine","$feedbackMatchLine","changeHandler","changedModel","updateOutcomes","$feedbackOutcome","minimumResultsForSearch","$feedbackActivated","removeAttr","rbViews","$propContainer","$select","syncRubricBlockContent","debounce","uniqueId","before","feedbackOutcome","changedRubricBlock","inline","setBlueprint","blueprint","getBlueprint","getUrl","ajax","dataType","fail","itemRefView","rubricBlockView","sectionBlueprint","sectionModel","$section","$title","$selectionSwitcher","$selectionSelect","$selectionWithRep","switchSelection","incrementer","selection","blueprintProperty","addItemRef","$refList","itemData","$items","eq","initBlueprint","routes","blueprintByTestSection","success","blueprintsById","delay","method","results","minimumInputLength","allowClear","placeholder","labels","$itemsPanel","$placeholder","$placeholders","size","defaultItemData","itemSessionControl","maxAttempts","clone","item","attr","itemRefModel","adder","templateData","$sections","sectionView","partModel","$testPart","$identifier","sectionIndex","$testParts","testPartView","testView","changeScoring","noOptions","newScoringState","JSON","stringify","$cutScoreLine","$categoryScoreLine","$weightIdentifierLine","$descriptions","scoringState","$generate","testPartIndex","navigationMode","submissionMode","added","unaryOperator","processingRuleHelper","minOperands","maxOperands","addTypeAndCardinality","binaryOperator","left","right","acceptedCardinalities","acceptedBaseTypes","includeCategories","excludeCategories","addSectionIdentifier","sectionIdentifier","addWeightIdentifier","weightIdentifier","validateOutcomeList","setExpression","addExpression","setOutcomeValue","gte","lte","divide","sum","terms","testVariables","variableIdentifier","outcomeMaximum","numberPresented","baseValue","variable","match","isNull","outcomeCondition","outcomeIf","outcomeElse","outcomeElseIfs","instruction","format","addTotalScoreOutcomes","weight","scoreIdentifier","addMaxScoreOutcomes","addRatioOutcomes","identifierTotal","identifierMax","addCutScoreOutcomes","countIdentifier","cutScore","addGlobalCutScoreOutcomes","ratioIdentifier","addFeedbackScoreOutcomes","passed","notPassed","formatCategoryOutcome","toUpperCase","belongToRecipe","recipe","onlyCategories","signature","weighted","matchRecipe","outcomeRecipe","matchRecipeOutcome","outcomeMatch","categoryIdentifier","categoryWeighted","categoryFeedback","include","outcomesRecipes","signatures","getSignatures","signatureMatch","getRecipes","descriptors","getOutcomesRecipe","mode","processingRecipe","listScoringModes","handleCategories","categoryScore","hasCategoryOutcome","categoryOutcomes","outcomeDeclaration","getCutScore","uniq","defaultCutScore","Math","max","getWeightIdentifier","getOutcomeProcessing","included","processing","diff","count","detectScoring","processingModes","defaultScoreIdentifier","removeScoring","scoringOutcomes","getOutcomes","none","custom","total","cut","clean","writer","scoreWeighted","feedbackOk","feedbackFailed","outcomesWriters","ratio","descriptor","totalModeOutcomes","whichOutcome","categoryOutcome","categoryOutcomeIdentifier","categoryScoreIdentifier","categoryCountIdentifier","scoringHelper","init","generate","recipes","module","history","DataBindController","itemView","itemrefView","validators","start","binder","$saver","categoriesPresets","back","isItemRef","isSection","encoders","dom2qti","beforeSave","takeControl","get","register","window","event","save","Promise","isValidConfig","toolconfig","hook","triggerItemLoaded","tool","itemLoaded","initQtiTool","$toolsContainer","testContext","testRunner","itemIsLoaded","tools","resolve","require","$button","$existingBtn","isValidHook","clear","isVisible","render","_appendInOrder","$after","$before","order","prepend","$btn","_order","after","$doc","actionBarHook","registeredQtiTools","qtiTools","registerTools","getRegisteredTools","getRegistered","isRegistered","list","container","promises","forIn","getId","region","hidden","active","sections","program29","program6","program7","answered","program8","program9","flagged","program11","program13","viewed","program17","program15","position","program21","program19","program24","program22","program27","program25","itemId","parts","navigatorTpl","navigatorTreeTpl","capitalize","_cssCls","collapsed","collapsible","disabled","unseen","icon","scope","testSection","_selectors","component","filterBar","collapseHandle","linearState","infoAnswered","infoViewed","infoUnanswered","infoFlagged","infoPanel","infoPanelLabels","partLabels","sectionLabels","itemLabels","itemIcons","icons","linearStart","counters","actives","collapsiblePanels","notFlagged","notAnswered","_filterMap","unanswered","filtered","_optionsMap","reviewScope","reviewPreventsUnseen","canCollapse","_reviewScopes","testReview","initOptions","putOnRight","insertMethod","currentFilter","$component","_loadDOM","_initEvents","_updateDisplayOptions","$infoAnswered","$infoViewed","$infoUnanswered","$infoFlagged","$filterBar","$filters","$tree","$linearState","toggleClass","_openSelected","$panel","_togglePanel","_openOnly","$item","_mark","_select","_jump","_filter","criteria","_updateSectionCounters","jquery","hierarchy","parentsUntil","add","opened","root","panel","collapseSelector","_setItemIcon","_adjustItemIcon","defaultIcon","iconCls","cls","_toggleFlag","flag","itemPosition","$filtered","nb","_writeCount","scopeClass","$root","_updateOptions","optionKey","contextKey","_updateInfos","progression","Number","$place","_getProgressionOfTest","numberItems","numberCompleted","numberFlagged","_getProgressionOfTestPart","numberItemsPart","numberCompletedPart","numberPresentedPart","numberFlaggedPart","_getProgressionOfTestSection","numberItemsSection","numberCompletedSection","numberPresentedSection","numberFlaggedSection","_updateTree","navigatorMap","reviewScopePart","reviewScopeSection","_partsFilter","preventsUnseen","empty","setItemFlag","updateNumberFlagged","fields","currentPosition","currentFound","currentSection","currentPart","itemFound","itemSection","itemPart","field","getProgression","progressInfoMethod","dom","arguments","extraParameters","progressUpdaters","progressBar","progressLabel","progressbar","write","progressIndicator","progressIndicatorMethod","percentageProgression","floor","positionProgression","progressScope","progressIndicatorScope","progressScopeCounter","counter","setLocalStorageData","currentKey","testMetaData","getLocalStorageKey","localStorage","setItem","domException","removed","removeItem","getLocalStorageData","getItem","parse","_testServiceCallId","_data","testServiceCallId","SECTION_EXIT_CODE","COMPLETED_NORMALLY","QUIT","COMPLETE_TIMEOUT","TIMEOUT","FORCE_QUIT","IN_PROGRESS","ERROR","TEST_EXIT_CODE","COMPLETE","TERMINATED","INCOMPLETE","INCOMPLETE_QUIT","INACTIVE","CANDIDATE_DISAGREED_WITH_NDA","getTestServiceCallId","setTestServiceCallId","setData","addData","overwrite","getData","clearData","UrlParser","ServiceApi","baseUrl","parameters","serviceCallId","stateStorage","userService","paused","connected","state","hasBeenPaused","SIG_SUCCESS","SIG_ERROR","prototype","loadInto","frame","$frame","callUrl","getCallUrl","isCORSAllowed","checkCORS","connect","contentWindow","__knownParent__","onServiceApiReady","param","getUserPropertyValues","property","getServiceCallId","getState","setState","set","getHasBeenPaused","setHasBeenPaused","getParameter","onFinish","onFinishCallback","onKill","onKillCallback","onExit","onExitCallback","kill","exit","finish","valueArray","UserInfoService","requestUrl","hasOwnProperty","service","r","StateStorage","submitUrl","actionBarTools","progressUpdater","testMetaDataFactory","iframeNotifier","MathJax","deleter","moment","modal","timerIds","currentTimes","lastDates","timeDiffs","waitingTime","$timers","$controls","timerIndex","sessionStateService","optionNextSection","optionNextSectionWarning","optionReviewScreen","optionEndTestWarning","optionNoExitTimedSectionWarning","TestRunner","TEST_STATE_INITIAL","TEST_STATE_INTERACTING","TEST_STATE_MODAL_FEEDBACK","TEST_STATE_SUSPENDED","TEST_STATE_CLOSED","TEST_NAVIGATION_LINEAR","TEST_NAVIGATION_NONLINEAR","TEST_ITEM_STATE_INTERACTING","beforeTransition","parent","disableGui","$itemFrame","$rubricBlocks","$timerWrapper","setTimeout","afterTransition","enableGui","ITEM","ITEM_START_TIME_CLIENT","Date","now","jump","isJumpOutOfSection","isCurrentItemActive","isTimedSection","exitTimedSection","killItemSession","actionCall","keepItemTimed","duration","markForReview","markForReviewUrl","cache","async","itemFlagged","updateTools","moveForward","doExitSection","isTimeout","action","exitSection","itemPositionSection","shouldDisplayEndTestWarning","displayEndTestWarning","isLast","hasOption","nextAction","confirmLabel","cancelLabel","showItemCount","displayExitMessage","moveBackward","jumpPosition","getCurrentSectionItems","isJumpToOtherSection","exitCode","SECTION","qtiRunner","getQtiRunner","doExitTimedSection","updateItemApi","keepTimerUpToTimeout","nextSection","doNextSection","scopeSuffixMap","scopeSuffix","$confirmBox","unansweredCount","flaggedCount","isCurrentItemAnswered","toString","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","itemServiceApi","itemSessionState","getCurrentItemState","response","base","option","itemFrame","getElementById","itemWindow","itemContainerFrame","itemContainerWindow","timeConstraints","qtiClassName","sectionItems","partId","testPartId","navMap","partIndex","skip","doSkip","timeout","updateTimer","confirmBox","confirmBtn","setTestContext","eval","itemServiceApiCall","initMetadata","getSessionStateService","accuracy","restart","updateContext","updateProgress","updateNavigation","updateTestReview","updateInformation","updateRubrics","updateExitButton","resetCurrentItemState","$contentBox","adjustFrame","visibility","itemIdentifier","showSkip","showSkipEnd","showNextSection","allowSkipping","$skip","$skipEnd","$nextSection","createTimer","cst","$timer","$label","$time","formatTime","seconds","hasTimers","clearTimeout","$topActionBar","allowLateSubmission","timerWarning","warnings","showed","point","closestPreviousWarning","setInterval","getTime","round","clearInterval","warning","findLast","timeWarning","remaining","humanize","rubrics","prependTo","Hub","Queue","$exit","$moveForward","$moveEnd","$moveBackward","canMoveBackward","considerProgress","$progressBox","testTitle","sectionText","isDeepestSectionVisible","sectionTitle","$position","$titleGroup","$logout","logoutButton","exitButton","frameContentHeight","rubricHeight","outerHeight","finalHeight","innerHeight","$bottomActionBar","height","$sideBars","$sideBar","contents","$naviButtons","hideGui","showGui","totalSeconds","sec_num","hours","minutes","processError","serviceApi","extraParams","metaData","TEST","setCurrentItemState","currentItemState","$skipButtons","$forwardButtons","$progressBar","$progressLabel","$contentPanel","ajaxError","jqxhr","status","getDuration","reviewScreen","reviewRegion","reviewCanCollapse","animate","opacity","responseId"],"mappings":"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","file":"routes.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n * \n * \n */\n\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\ndefine('taoQtiTest/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'Creator': {\n            'css': 'creator', \n            'actions': {\n                'index' : 'controller/creator/creator'\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * The BaseType enumeration (port of \\qtism\\common\\enums\\BaseType).\n *\n * From IMS QTI:\n *\n * A base-type is simply a description of a set of atomic values (atomic to this specification).\n * Note that several of the baseTypes used to define the runtime data model have identical\n * definitions to those of the basic data types used to define the values for attributes\n * in the specification itself. The use of an enumeration to define the set of baseTypes\n * used in the runtime model, as opposed to the use of classes with similar names, is\n * designed to help distinguish between these two distinct levels of modelling.\n *\n * @author Jérôme Bogaerts <jerome@taotesting.com>\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/baseType',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The list of QTI base types\n     * @type {Object}\n     */\n    var baseTypeEnum = {\n        /**\n         * From IMS QTI:\n         *\n         * The set of identifier values is the same as the set of values\n         * defined by the identifier class.\n         *\n         * @type {Number}\n         */\n        IDENTIFIER: 0,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of boolean values is the same as the set of values defined\n         * by the boolean class.\n         *\n         * @type {Number}\n         */\n        BOOLEAN: 1,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of integer values is the same as the set of values defined\n         * by the integer class.\n         *\n         * @type {Number}\n         */\n        INTEGER: 2,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of float values is the same as the set of values defined by the\n         * float class.\n         *\n         * @type {Number}\n         */\n        FLOAT: 3,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of string values is the same as the set of values defined by the\n         * string class.\n         *\n         * @type {Number}\n         */\n        STRING: 4,\n\n        /**\n         * From IMS QTI:\n         *\n         * A point value represents an integer tuple corresponding to a graphic point.\n         * The two integers correspond to the horizontal (x-axis) and vertical (y-axis)\n         * positions respectively. The up/down and left/right senses of the axes are\n         * context dependent.\n         *\n         * @type {Number}\n         */\n        POINT: 5,\n\n        /**\n         * From IMS QTI:\n         *\n         * A pair value represents a pair of identifiers corresponding to an association\n         * between two objects. The association is undirected so (A,B) and (B,A) are equivalent.\n         *\n         * @type {Number}\n         */\n        PAIR: 6,\n\n        /**\n         * From IMS QTI:\n         *\n         * A directedPair value represents a pair of identifiers corresponding to a directed\n         * association between two objects. The two identifiers correspond to the source\n         * and destination objects.\n         *\n         * @type {Number}\n         */\n        DIRECTED_PAIR: 7,\n\n        /**\n         * From IMS QTI:\n         *\n         * A duration value specifies a distance (in time) between two time points.\n         * In other words, a time period as defined by [ISO8601], but represented as\n         * a single float that records time in seconds. Durations may have a fractional\n         * part. Durations are represented using the xsd:double datatype rather than\n         * xsd:dateTime for convenience and backward compatibility.\n         *\n         * @type {Number}\n         */\n        DURATION: 8,\n\n        /**\n         * From IMS QTI:\n         *\n         * A file value is any sequence of octets (bytes) qualified by a content-type and an\n         * optional filename given to the file (for example, by the candidate when uploading\n         * it as part of an interaction). The content type of the file is one of the MIME\n         * types defined by [RFC2045].\n         *\n         * @type {Number}\n         */\n        FILE: 9,\n\n        /**\n         * From IMS QTI:\n         *\n         * A URI value is a Uniform Resource Identifier as defined by [URI].\n         *\n         * @type {Number}\n         */\n        URI: 10,\n\n        /**\n         * From IMS QTI:\n         *\n         * An intOrIdentifier value is the union of the integer baseType and\n         * the identifier baseType.\n         *\n         * @type {Number}\n         */\n        INT_OR_IDENTIFIER: 11,\n\n        /**\n         * In qtism, we consider an extra 'coords' baseType.\n         *\n         * @type {Number}\n         */\n        COORDS: 12,\n\n        /**\n         * Express that the operands can have any BaseType from the BaseType enumeration and\n         * can be different.\n         *\n         * @type {Number}\n         */\n        ANY: 12,\n\n        /**\n         * Express that all the operands must have the same\n         * baseType.\n         *\n         * @type {Number}\n         */\n        SAME: 13\n    };\n\n    var baseTypeHelper = _({\n        /**\n         * Gets the the list of QTI base types\n         * @returns {Object}\n         */\n        asArray: function asArray() {\n            return baseTypeEnum;\n        },\n\n        /**\n         * Gets a valid type or the default\n         * @param {String|Number} type\n         * @param {String|Number} [defaultType]\n         * @returns {*}\n         */\n        getValid: function getValid(type, defaultType) {\n            if (_.isFinite(type)) {\n                if (!baseTypeHelper.getNameByConstant(type)) {\n                    type = false;\n                }\n            } else {\n                type = baseTypeHelper.getConstantByName(type);\n            }\n\n            if (false === type) {\n                if (!_.isUndefined(defaultType) && defaultType !== -1) {\n                    type = baseTypeHelper.getValid(defaultType, -1);\n                } else {\n                    type = -1;\n                }\n            }\n\n            return type;\n        },\n\n        /**\n         * Adjusts a value with respect to the type\n         * @param {String|Number} type\n         * @param {*} value\n         * @returns {*}\n         */\n        getValue: function getValue(type, value) {\n            if (_.isString(type)) {\n                type = baseTypeHelper.getConstantByName(type);\n            }\n\n            switch (type) {\n                case baseTypeEnum.URI:\n                case baseTypeEnum.STRING:\n                case baseTypeEnum.IDENTIFIER:\n                    return value + '';\n\n                case baseTypeEnum.BOOLEAN:\n                    if (_.isString(value)) {\n                        switch (value.toLowerCase()) {\n                            case 'true':\n                                return true;\n                            case 'false':\n                                return false;\n                        }\n                    }\n                    return !!value;\n\n                case baseTypeEnum.INTEGER:\n                    return parseInt(value, 10) || 0;\n\n                case baseTypeEnum.FLOAT:\n                    return parseFloat(value) || 0;\n\n                case baseTypeEnum.INT_OR_IDENTIFIER:\n                    if (!_.isNaN(parseInt(value, 10))) {\n                        return parseInt(value, 10) || 0;\n                    } else {\n                        return '' + value;\n                    }\n            }\n\n            return value;\n        },\n\n        /**\n         * Get a constant value from the BaseType enumeration by baseType name.\n         *\n         * * 'identifier' -> baseTypes.IDENTIFIER\n         * * 'boolean' -> baseTypes.BOOLEAN\n         * * 'integer' -> baseTypes.INTEGER\n         * * 'float' -> baseTypes.FLOAT\n         * * 'string' -> baseTypes.STRING\n         * * 'point' -> baseTypes.POINT\n         * * 'pair' -> baseTypes.PAIR\n         * * 'directedPair' -> baseTypes.DIRECTED_PAIR\n         * * 'duration' -> baseTypes.DURATION\n         * * 'file' -> baseTypes.FILE\n         * * 'uri' -> baseTypes.URI\n         * * 'intOrIdentifier' -> baseTypes.INT_OR_IDENTIFIER\n         * * extra 'coords' -> baseTypes.COORDS\n         *\n         * @param {String} name The baseType name.\n         * @return {Number|Boolean} The related enumeration value or `false` if the name could not be resolved.\n         */\n        getConstantByName: function getConstantByName(name) {\n            switch (String(name).trim().toLowerCase()) {\n                case 'identifier':\n                    return baseTypeEnum.IDENTIFIER;\n\n                case 'boolean':\n                    return baseTypeEnum.BOOLEAN;\n\n                case 'integer':\n                    return baseTypeEnum.INTEGER;\n\n                case 'float':\n                    return baseTypeEnum.FLOAT;\n\n                case 'string':\n                    return baseTypeEnum.STRING;\n\n                case 'point':\n                    return baseTypeEnum.POINT;\n\n                case 'pair':\n                    return baseTypeEnum.PAIR;\n\n                case 'directedpair':\n                    return baseTypeEnum.DIRECTED_PAIR;\n\n                case 'duration':\n                    return baseTypeEnum.DURATION;\n\n                case 'file':\n                    return baseTypeEnum.FILE;\n\n                case 'uri':\n                    return baseTypeEnum.URI;\n\n                case 'intoridentifier':\n                    return baseTypeEnum.INT_OR_IDENTIFIER;\n\n                case 'coords':\n                    return baseTypeEnum.COORDS;\n\n                case 'any':\n                    return baseTypeEnum.ANY;\n\n                case 'same':\n                    return baseTypeEnum.SAME;\n\n                default:\n                    return false;\n            }\n        },\n\n        /**\n         * Get the QTI name of a BaseType.\n         *\n         * @param {Number} constant A constant value from the BaseType enumeration.\n         * @param {Boolean} [operator] A flag that allow to switch between operator an value types to prevent duplicate name issue\n         * @return {String|Boolean} The QTI name or false if not match.\n         */\n        getNameByConstant: function getNameByConstant(constant, operator) {\n            switch (constant) {\n                case baseTypeEnum.IDENTIFIER:\n                    return 'identifier';\n\n                case baseTypeEnum.BOOLEAN:\n                    return 'boolean';\n\n                case baseTypeEnum.INTEGER:\n                    return 'integer';\n\n                case baseTypeEnum.FLOAT:\n                    return 'float';\n\n                case baseTypeEnum.STRING:\n                    return 'string';\n\n                case baseTypeEnum.POINT:\n                    return 'point';\n\n                case baseTypeEnum.PAIR:\n                    return 'pair';\n\n                case baseTypeEnum.DIRECTED_PAIR:\n                    return 'directedPair';\n\n                case baseTypeEnum.DURATION:\n                    return 'duration';\n\n                case baseTypeEnum.FILE:\n                    return 'file';\n\n                case baseTypeEnum.URI:\n                    return 'uri';\n\n                case baseTypeEnum.INT_OR_IDENTIFIER:\n                    return 'intOrIdentifier';\n\n                case baseTypeEnum.COORDS:\n                case baseTypeEnum.ANY:\n                    if (operator) {\n                        return 'any';\n                    } else {\n                        return 'coords';\n                    }\n\n                case baseTypeEnum.SAME:\n                    return 'same';\n\n                default:\n                    return false;\n            }\n        }\n    }).assign(baseTypeEnum).value();\n\n    return baseTypeHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * The Cardinality enumeration (port of \\qtism\\common\\enums\\Cardinality).\n *\n * From IMS QTI:\n *\n * An expression or itemVariable can either be single-valued or multi-valued. A multi-valued\n * expression (or variable) is called a container. A container contains a list of values,\n * this list may be empty in which case it is treated as NULL. All the values in a multiple\n * or ordered container are drawn from the same value set, however, containers may contain\n * multiple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value\n * for a container. A container with cardinality multiple and value [A,B,C] is equivalent\n * to a similar one with value [C,B,A] whereas these two values would be considered distinct\n * for containers with cardinality ordered. When used as the value of a response variable\n * this distinction is typified by the difference between selecting choices in a multi-response\n * multi-choice task and ranking choices in an order objects task. In the language of [ISO11404]\n * a container with multiple cardinality is a \"bag-type\", a container with ordered cardinality\n * is a \"sequence-type\" and a container with record cardinality is a \"record-type\".\n *\n * The record container type is a special container that contains a set of independent values\n * each identified by its own identifier and having its own base-type. This specification\n * does not make use of the record type directly however it is provided to enable\n * customInteractions to manipulate more complex responses and customOperators to\n * return more complex values, in addition to the use for detailed information about\n * numeric responses described in the stringInteraction abstract class.\n *\n * @author Jérôme Bogaerts <jerome@taotesting.com>\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/cardinality',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The list of QTI cardinalities\n     * @type {Object}\n     */\n    var cardinalityEnum = {\n        /**\n         * Single term cardinality\n         *\n         * @type {Number}\n         */\n        SINGLE: 0,\n\n        /**\n         * Multiple terms cardinality\n         *\n         * @type {Number}\n         */\n        MULTIPLE: 1,\n\n        /**\n         * Ordered terms cardinality\n         *\n         * @type {Number}\n         */\n        ORDERED: 2,\n\n        /**\n         * Record term cardinality\n         *\n         * @type {Number}\n         */\n        RECORD: 3,\n\n        /**\n         * Express that all the expressions involved in an operator have\n         * the same cardinality.\n         *\n         * @type {Number}\n         */\n        SAME: 4,\n\n        /**\n         * Express that all the expressions involved in an operator may\n         * have any cardinality.\n         *\n         * @type {Number}\n         */\n        ANY: 5\n    };\n\n    var cardinalityHelper = _({\n        /**\n         * Gets the the list of QTI cardinalities\n         * @returns {Object}\n         */\n        asArray: function asArray() {\n            return cardinalityEnum;\n        },\n\n        /**\n         * Gets a valid cardinality or the default\n         * @param {String|Number} cardinality\n         * @param {String|Number} [defaultCardinality]\n         * @returns {*}\n         */\n        getValid: function getValid(cardinality, defaultCardinality) {\n            if (_.isFinite(cardinality)) {\n                if (!cardinalityHelper.getNameByConstant(cardinality)) {\n                    cardinality = false;\n                }\n            } else {\n                cardinality = cardinalityHelper.getConstantByName(cardinality);\n            }\n\n            if (false === cardinality) {\n                if (!_.isUndefined(defaultCardinality) && defaultCardinality !== cardinalityEnum.SINGLE) {\n                    cardinality = cardinalityHelper.getValid(defaultCardinality, cardinalityEnum.SINGLE);\n                } else {\n                    cardinality = cardinalityEnum.SINGLE;\n                }\n            }\n\n            return cardinality;\n        },\n\n        /**\n         * Get a constant value from its name.\n         *\n         * @param {String} name The name of the constant, as per QTI spec.\n         * @return {Number|Boolean} The constant value or `false` if not found.\n         */\n        getConstantByName: function getConstantByName(name) {\n            switch (String(name).trim().toLowerCase()) {\n                case 'single':\n                    return cardinalityEnum.SINGLE;\n\n                case 'multiple':\n                    return cardinalityEnum.MULTIPLE;\n\n                case 'ordered':\n                    return cardinalityEnum.ORDERED;\n\n                case 'record':\n                    return cardinalityEnum.RECORD;\n\n                case 'same':\n                    return cardinalityEnum.SAME;\n\n                case 'any':\n                    return cardinalityEnum.ANY;\n\n                default:\n                    return false;\n            }\n        },\n\n        /**\n         * Get the name of a constant from its value.\n         *\n         * @param {Number} constant The constant value to search the name for.\n         * @return {String|Boolean} The name of the constant or false if not found.\n         */\n        getNameByConstant: function getNameByConstant(constant) {\n            switch (constant) {\n                case cardinalityEnum.SINGLE:\n                    return 'single';\n\n                case cardinalityEnum.MULTIPLE:\n                    return 'multiple';\n\n                case cardinalityEnum.ORDERED:\n                    return 'ordered';\n\n                case cardinalityEnum.RECORD:\n                    return 'record';\n\n                case cardinalityEnum.SAME:\n                    return 'same';\n\n                case cardinalityEnum.ANY:\n                    return 'any';\n\n                default:\n                    return false;\n            }\n        }\n    }).assign(cardinalityEnum).value();\n\n    return cardinalityHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/outcomeValidator',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The RegEx that validates outcome identifiers\n     * @type {RegExp}\n     */\n    var identifierValidator = /^[a-zA-Z_][a-zA-Z0-9_\\.-]*$/;\n\n    /**\n     * Checks the validity of an identifier\n     * @param {String} identifier\n     * @returns {Boolean}\n     */\n    function validateIdentifier(identifier) {\n        return !!(identifier && _.isString(identifier) && identifierValidator.test(identifier));\n    }\n\n    /**\n     * Checks if an object is a valid outcome\n     * @param {Object} outcome\n     * @param {Boolean} [checkIdentifier]\n     * @param {String||String[]} [allowedTypes]\n     * @returns {Boolean}\n     */\n    function validateOutcome(outcome, checkIdentifier, allowedTypes) {\n        var validOutcome = _.isPlainObject(outcome) && validateIdentifier(outcome['qti-type']);\n        var validIdentifier = !checkIdentifier || (outcome && validateIdentifier(outcome.identifier));\n\n        if (allowedTypes) {\n            allowedTypes = !_.isArray(allowedTypes) ? [allowedTypes] : allowedTypes;\n            validOutcome =  validOutcome && _.indexOf(allowedTypes, outcome['qti-type']) >= 0;\n        }\n\n        return !!(validOutcome && validIdentifier);\n    }\n\n    /**\n     * Checks if an array contains valid outcomes\n     * @param {Array} outcomes\n     * @param {Boolean} [checkIdentifier]\n     * @param {String||String[]} [allowedTypes]\n     * @returns {Boolean}\n     */\n    function validateOutcomes(outcomes, checkIdentifier, allowedTypes) {\n        var valid = _.isArray(outcomes);\n        _.forEach(outcomes, function(outcome) {\n            if (!validateOutcome(outcome, checkIdentifier, allowedTypes)) {\n                valid = false;\n                return false;\n            }\n        });\n        return valid;\n    }\n\n    return {\n        validateIdentifier: validateIdentifier,\n        validateOutcomes: validateOutcomes,\n        validateOutcome: validateOutcome\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/qtiElement',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/outcomeValidator'\n], function (_, outcomeValidator) {\n    'use strict';\n\n    var qtiElementHelper = {\n        /**\n         * Creates a QTI element\n         * @param {String} type - The QTI type of the element to create\n         * @param {String|Object} [identifier] - An optional identifier, or a list of properties\n         * @param {Object} [properties] - A list of additional properties\n         * @returns {Object}\n         * @throws {TypeError} if the type or the identifier is not valid\n         */\n        create: function create(type, identifier, properties) {\n            var element = {\n                'qti-type': type\n            };\n\n            if (!outcomeValidator.validateIdentifier(type)) {\n                throw new TypeError('You must provide a valid QTI type!');\n            }\n\n            if (_.isPlainObject(identifier)) {\n                properties = identifier;\n                identifier = null;\n            }\n\n            if (identifier) {\n                if (!outcomeValidator.validateIdentifier(identifier)) {\n                    throw new TypeError('You must provide a valid identifier!');\n                }\n                element.identifier = identifier;\n            }\n\n            return _.assign(element, properties || {});\n        },\n\n        /**\n         * Finds a QTI element in a collection, by its type.\n         * The collection may also be a single object.\n         * @param {Array|Object} collection\n         * @param {Array|String} type\n         * @returns {Object}\n         */\n        find: function find(collection, type) {\n            var found = null;\n            var types = forceArray(type);\n\n            function checkType(qtiElement) {\n                if (types.indexOf(qtiElement['qti-type']) >= 0) {\n                    found = qtiElement;\n                    return false;\n                }\n            }\n\n            if (_.isArray(collection)) {\n                _.forEach(collection, checkType);\n            } else if (collection) {\n                checkType(collection);\n            }\n\n            return found;\n        },\n\n        /**\n         * Finds an element from a tree.\n         * The path to the element is based on QTI types.\n         * @param {Object} tree - The root of the tree from which get the property\n         * @param {String|String[]} path - The path to the element, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\n         * @param {String|String[]} nodeName - The name of the nodes that may contain subtrees\n         * @returns {*}\n         */\n        lookupElement: function lookupElement(tree, path, nodeName) {\n            var steps = _.isArray(path) ? path : path.split('.');\n            var nodeNames = forceArray(nodeName);\n            var len = steps.length;\n            var i = 0;\n            var key;\n\n            while (tree && i < len) {\n                tree = qtiElementHelper.find(tree, steps[i++]);\n                if (tree && i < len) {\n                    key = _.find(nodeNames, _.partial(_.has, tree));\n                    tree = key && tree[key];\n                }\n            }\n\n            return tree || null;\n        },\n\n        /**\n         * Finds a property from a tree.\n         * The path to the property is based on QTI types.\n         * @param {Object} tree - The root of the tree from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\n         * @param {String|String[]} nodeName - The name of the nodes that may contain subtrees\n         * @returns {*}\n         */\n        lookupProperty: function lookupProperty(tree, path, nodeName) {\n            var result = null;\n            var steps = _.isArray(path) ? path : path.split('.');\n            var propertyName = steps.pop();\n            var element = qtiElementHelper.lookupElement(tree, steps, nodeName);\n\n            if (element && element[propertyName]) {\n                result = element[propertyName];\n            }\n\n            return result;\n        }\n    };\n\n    /**\n     * Ensures a value is an array\n     * @param {*} value\n     * @returns {Array}\n     */\n    function forceArray(value) {\n        if (!value) {\n            value = [];\n        }\n        if (!_.isArray(value)) {\n            value = [value];\n        }\n        return value;\n    }\n\n    return qtiElementHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to manage outcomes inside a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/outcome',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/outcomeValidator',\n    'taoQtiTest/controller/creator/helpers/qtiElement',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality'\n], function (_, outcomeValidator, qtiElementHelper, baseTypeHelper, cardinalityHelper) {\n    'use strict';\n\n    var outcomeHelper = {\n        /**\n         * Gets a property from an outcome rule expression.\n         * The path to the property is based on QTI types.\n         * @param {Object} outcomeRule - The outcome rule from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\n         * @returns {*}\n         */\n        getProcessingRuleExpression: function getProcessingRuleExpression(outcomeRule, path) {\n            return qtiElementHelper.lookupElement(outcomeRule, path, ['expression', 'expressions']);\n        },\n\n        /**\n         * Gets a property from an outcome rule expression.\n         * The path to the property is based on QTI types.\n         * @param {Object} outcomeRule - The outcome rule from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\n         * @returns {*}\n         */\n        getProcessingRuleProperty: function getProcessingRuleProperty(outcomeRule, path) {\n            return qtiElementHelper.lookupProperty(outcomeRule, path, ['expression', 'expressions']);\n        },\n\n        /**\n         * Gets the identifier of an outcome\n         * @param {Object|String} outcome\n         * @returns {String}\n         */\n        getOutcomeIdentifier: function getOutcomeIdentifier(outcome) {\n            return String(_.isObject(outcome) ? outcome.identifier : outcome);\n        },\n\n        /**\n         * Gets the list of outcome declarations\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        getOutcomeDeclarations: function getOutcomeDeclarations(testModel) {\n            var outcomes = testModel && testModel.outcomeDeclarations;\n            return outcomes || [];\n        },\n\n        /**\n         * Gets the list of outcome processing rules\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        getOutcomeProcessingRules: function getOutcomeProcessingRules(testModel) {\n            var rules = testModel && testModel.outcomeProcessing && testModel.outcomeProcessing.outcomeRules;\n            return rules || [];\n        },\n\n        /**\n         * Applies a function on each outcome declarations\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeDeclarations: function eachOutcomeDeclarations(testModel, cb) {\n            _.forEach(outcomeHelper.getOutcomeDeclarations(testModel), cb);\n        },\n\n        /**\n         * Applies a function on each outcome processing rules. Does not take care of sub-expressions.\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeProcessingRules: function eachOutcomeProcessingRules(testModel, cb) {\n            _.forEach(outcomeHelper.getOutcomeProcessingRules(testModel), cb);\n        },\n\n        /**\n         * Applies a function on each outcome processing rules, take care of each sub expression.\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeProcessingRuleExpressions: function eachOutcomeProcessingRuleExpressions(testModel, cb) {\n            function browseExpressions(processingRule) {\n                if (_.isArray(processingRule)) {\n                    _.forEach(processingRule, browseExpressions);\n                } else if (processingRule) {\n                    cb(processingRule);\n\n                    if (processingRule.expression) {\n                        browseExpressions(processingRule.expression);\n                    } else if (processingRule.expressions) {\n                        browseExpressions(processingRule.expressions);\n                    }\n                }\n            }\n\n            browseExpressions(outcomeHelper.getOutcomeProcessingRules(testModel));\n        },\n\n        /**\n         * Lists all outcomes identifiers. An optional callback allows to filter the list\n         * @param {Object} testModel\n         * @param {Function} [cb]\n         * @returns {Array}\n         */\n        listOutcomes: function listOutcomes(testModel, cb) {\n            var outcomes = [];\n            if (!_.isFunction(cb)) {\n                cb = null;\n            }\n            outcomeHelper.eachOutcomeDeclarations(testModel, function (outcome) {\n                if (!cb || cb(outcome)) {\n                    outcomes.push(outcomeHelper.getOutcomeIdentifier(outcome));\n                }\n            });\n            return outcomes;\n        },\n\n        /**\n         * Removes the specified outcomes from the provided test model\n         * @param {Object} testModel - The test model to clean up\n         * @param {Function|String[]} outcomes - The list of outcomes identifiers to remove,\n         *                                       or a callback that will match each outcome to remove\n         */\n        removeOutcomes: function removeOutcomes(testModel, outcomes) {\n            var declarations = outcomeHelper.getOutcomeDeclarations(testModel);\n            var rules = outcomeHelper.getOutcomeProcessingRules(testModel);\n            var check;\n\n            if (_.isFunction(outcomes)) {\n                check = outcomes;\n            } else {\n                outcomes = _.indexBy(_.isArray(outcomes) ? outcomes : [outcomes], function (outcome) {\n                    return outcome;\n                });\n\n                check = function checkIdentifier(outcome) {\n                    return !!outcomes[outcomeHelper.getOutcomeIdentifier(outcome)];\n                };\n            }\n\n            if (declarations) {\n                _.remove(declarations, check);\n            }\n\n            if (rules) {\n                _.remove(rules, check);\n            }\n        },\n\n        /**\n         * Creates an outcome declaration\n         * @param {String} identifier\n         * @param {String|Number|Boolean} [type] - The data type of the outcome, FLOAT by default\n         * @param {Number} [cardinality] - The variable cardinality, default 0\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        createOutcome: function createOutcome(identifier, type, cardinality) {\n\n            if (!outcomeValidator.validateIdentifier(identifier)) {\n                throw new TypeError('You must provide a valid identifier!');\n            }\n\n            return qtiElementHelper.create('outcomeDeclaration', identifier, {\n                views: [],\n                interpretation: '',\n                longInterpretation: '',\n                normalMaximum: false,\n                normalMinimum: false,\n                masteryValue: false,\n                cardinality: cardinalityHelper.getValid(cardinality, cardinalityHelper.SINGLE),\n                baseType: baseTypeHelper.getValid(type, baseTypeHelper.FLOAT)\n            });\n        },\n\n        /**\n         * Adds a processing rule into the test model\n         *\n         * @param {Object} testModel\n         * @param {Object} processingRule\n         * @returns {Object}\n         * @throws {TypeError} if the processing rule is not valid\n         */\n        addOutcomeProcessing: function createOutcomeProcessing(testModel, processingRule) {\n            var outcomeProcessing = testModel.outcomeProcessing;\n\n            if (!outcomeValidator.validateOutcome(processingRule)) {\n                throw new TypeError('You must provide a valid outcome processing rule!');\n            }\n\n            if (!outcomeProcessing) {\n                outcomeProcessing = qtiElementHelper.create('outcomeProcessing', {\n                    outcomeRules: []\n                });\n                testModel.outcomeProcessing = outcomeProcessing;\n            } else if (!outcomeProcessing.outcomeRules) {\n                outcomeProcessing.outcomeRules = [];\n            }\n\n            outcomeProcessing.outcomeRules.push(processingRule);\n            return processingRule;\n        },\n\n        /**\n         * Creates an outcome and adds it to the declarations\n         * @param {Object} testModel\n         * @param {Object} outcome - The outcome to add\n         * @param {Object} [processingRule] - The processing rule attached to the outcome\n         * @returns {Object}\n         * @throws {TypeError} if one of the outcome or the processing rule is not valid\n         */\n        addOutcome: function addOutcome(testModel, outcome, processingRule) {\n            var declarations = testModel.outcomeDeclarations;\n\n            if (!outcomeValidator.validateOutcome(outcome, true, 'outcomeDeclaration')) {\n                throw new TypeError('You must provide a valid outcome!');\n            }\n\n            if (processingRule) {\n                if (!outcomeValidator.validateOutcome(processingRule) || processingRule.identifier !== outcome.identifier) {\n                    throw new TypeError('You must provide a valid outcome processing rule!');\n                }\n\n                outcomeHelper.addOutcomeProcessing(testModel, processingRule);\n            }\n\n            if (!declarations) {\n                declarations = [];\n                testModel.outcomeDeclarations = declarations;\n            }\n\n            declarations.push(outcome);\n            return outcome;\n        },\n\n        /**\n         * Replaces the outcomes in a test model\n         * @param {Object} testModel\n         * @param {Object} outcomes\n         * @throws {TypeError} if one of the outcomes or the processing rules are not valid\n         */\n        replaceOutcomes: function replaceOutcomes(testModel, outcomes) {\n            if (_.isPlainObject(outcomes)) {\n                if (_.isArray(outcomes.outcomeDeclarations)) {\n                    if (!outcomeValidator.validateOutcomes(outcomes.outcomeDeclarations, true, 'outcomeDeclaration')) {\n                        throw new TypeError('You must provide valid outcomes!');\n                    }\n\n                    testModel.outcomeDeclarations = [].concat(outcomes.outcomeDeclarations);\n                }\n                if (outcomes.outcomeProcessing && _.isArray(outcomes.outcomeProcessing.outcomeRules)) {\n                    if (!outcomeValidator.validateOutcomes(outcomes.outcomeProcessing.outcomeRules)) {\n                        throw new TypeError('You must provide valid processing rules!');\n                    }\n\n                    if (!testModel.outcomeProcessing) {\n                        testModel.outcomeProcessing = qtiElementHelper.create('outcomeProcessing');\n                    }\n                    testModel.outcomeProcessing.outcomeRules = [].concat(outcomes.outcomeProcessing.outcomeRules);\n                }\n            }\n        }\n    };\n\n    return outcomeHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Helper that provides a way to browse all categories attached to a test model at the item level.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/category',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * Checks if a category is an option\n     *\n     * @param {String} category\n     * @returns {Boolean}\n     */\n    function isCategoryOption(category) {\n        return category && category.indexOf('x-tao-') === 0;\n    }\n\n    /**\n     * Calls a function for each category in the test model\n     * @param {Object} testModel\n     * @param {Function} cb\n     */\n    function eachCategories(testModel, cb) {\n        _.forEach(testModel.testParts, function (testPart) {\n            _.forEach(testPart.assessmentSections, function (assessmentSection) {\n                _.forEach(assessmentSection.sectionParts, function (itemRef) {\n                    _.forEach(itemRef.categories, function(category) {\n                        cb(category, itemRef);\n                    });\n                });\n            });\n        });\n    }\n\n    return {\n        /**\n         * Calls a function for each category in the test model\n         * @function eachCategories\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachCategories: eachCategories,\n\n        /**\n         * Gets the list of categories assigned to the items.\n         * Discards special purpose categories like 'x-tao-...'\n         *\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        listCategories: function listCategories(testModel) {\n            var categories = {};\n            eachCategories(testModel, function(category) {\n                if (!isCategoryOption(category)) {\n                    categories[category] = true;\n                }\n            });\n            return _.keys(categories);\n        },\n\n        /**\n         * Gets the list of options assigned to the items (special purpose categories like 'x-tao-...').\n         *\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        listOptions: function listOptions(testModel) {\n            var options = {};\n            eachCategories(testModel, function(category) {\n                if (isCategoryOption(category)) {\n                    options[category] = true;\n                }\n            });\n            return _.keys(options);\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/modelOverseer',[\n    'lodash',\n    'core/eventifier',\n    'core/statifier',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/category'\n], function (_, eventifier, statifier, baseTypeHelper, cardinalityHelper, outcomeHelper, categoryHelper) {\n    'use strict';\n\n    /**\n     * Wraps the test model in a manager, provides API to handle events and states\n     * @param {Object} model\n     * @param {Object} [config]\n     * @returns {Object}\n     */\n    function modelOverseerFactory(model, config) {\n        var modelOverseer = {\n            /**\n             * Gets the nested model\n             * @returns {Object}\n             */\n            getModel: function getModel() {\n                return model;\n            },\n\n            /**\n             * Sets the nested model\n             *\n             * @param {Object} newModel\n             * @returns {modelOverseer}\n             * @fires setmodel\n             */\n            setModel: function setModel(newModel) {\n                model = newModel;\n\n                /**\n                 * @event modelOverseer#setmodel\n                 * @param {String} model\n                 */\n                modelOverseer.trigger('setmodel', model);\n                return this;\n            },\n\n            /**\n             * Gets the config set\n             * @returns {Object}\n             */\n            getConfig: function getConfig() {\n                return config;\n            },\n\n            /**\n             * Gets the list of defined outcomes for the nested model. A descriptor is built for each outcomes:\n             * {\n             *      name: {String},\n             *      type: {String},\n             *      cardinality: {String}\n             * }\n             * @returns {Object[]}\n             */\n            getOutcomesList: function getOutcomesList() {\n                return _.map(outcomeHelper.getOutcomeDeclarations(model), function(declaration) {\n                    return {\n                        name: declaration.identifier,\n                        type: baseTypeHelper.getNameByConstant(declaration.baseType),\n                        cardinality: cardinalityHelper.getNameByConstant(declaration.cardinality)\n                    };\n                });\n            },\n\n            /**\n             * Gets the names of the defined outcomes for the nested model\n             * @returns {Array}\n             */\n            getOutcomesNames: function getOutcomesNames() {\n                return _.map(outcomeHelper.getOutcomeDeclarations(model), function(declaration) {\n                    return declaration.identifier;\n                });\n            },\n\n            /**\n             * Gets the list of defined categories for the nested model\n             * @returns {Array}\n             */\n            getCategories: function getCategories() {\n                return categoryHelper.listCategories(model);\n            },\n\n            /**\n             * Gets the list of defined options for the nested model\n             * @returns {Array}\n             */\n            getOptions: function getOptions() {\n                return categoryHelper.listOptions(model);\n            }\n        };\n\n        config = _.isPlainObject(config) ? config : _.assign({}, config);\n\n        return statifier(eventifier(modelOverseer));\n    }\n\n    return modelOverseerFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * The testItem data provider\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/provider/testItems',[\n    'lodash',\n    'i18n',\n    'util/url',\n    'core/dataProvider/request'\n], function (_, __, urlUtil, request) {\n    'use strict';\n\n    /**\n     * Per function requests configuration.\n     */\n    var defaultConfig = {\n        getItemClasses : {\n            url : urlUtil.route('getItemClasses', 'Items', 'taoQtiTest')\n        },\n        getItems : {\n            url : urlUtil.route('getItems', 'Items', 'taoQtiTest')\n        },\n        getItemClassProperties : {\n            url : urlUtil.route('create', 'RestFormItem', 'taoItems')\n        }\n    };\n\n    /**\n     * Creates a configured testItem provider\n     *\n     * @param {Object} [config] - to override the default config\n     * @returns {testItemProvider} the new provider\n     */\n    return function testItemProviderFactory(config){\n\n        config = _.defaults(config || {}, defaultConfig);\n\n        /**\n         * @typedef {testItemProvider}\n         */\n        return {\n\n            /**\n             * Get the list of Items classes and sub classes\n             * @returns {Promise} that resolves with the classes\n             */\n            getItemClasses: function getItemClasses(){\n                return request(config.getItemClasses.url);\n            },\n\n            /**\n             * Get QTI Items in different formats\n             * @param {Object} [params] - the parameters to pass through the request\n             * @returns {Promise} that resolves with the classes\n             */\n            getItems : function getItems(params){\n                return request(config.getItems.url, params);\n            },\n\n            /**\n             * Get the properties of a the given item class\n             * @param {String} classUri - the item class URI\n             * @returns {Promise} that resolves with the classes\n             */\n            getItemClassProperties: function getItemClassProperties(classUri) {\n                return request(config.getItemClassProperties.url, { classUri : classUri });\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/item',[\n    'jquery',\n    'i18n',\n    'core/logger',\n    'taoQtiTest/provider/testItems',\n    'ui/resource/selector',\n    'ui/feedback'\n], function($, __, loggerFactory, testItemProviderFactory, resourceSelectorFactory, feedback){\n    'use strict';\n\n   /**\n    * Create a dedicated logger\n    */\n    var logger = loggerFactory('taoQtiTest/creator/views/item');\n\n    /**\n     * Let's you access the data\n     */\n    var testItemProvider = testItemProviderFactory();\n\n    /**\n     * Handles errors\n     * @param {Error} err\n     */\n    var onError = function onError(err){\n        logger.error(err);\n        feedback.error(err.message || __('An error occured while retrieving items'));\n    };\n\n   /**\n     * The ItemView setup items related components\n     * @exports taoQtiTest/controller/creator/views/item\n     * @param {jQueryElement} $container - where to append the view\n     */\n    return function itemView($container){\n\n        var selectorConfig = {\n            type : __('items'),\n            multiple : true\n        };\n\n        //load the classes hierarchy\n        testItemProvider.getItemClasses()\n            .then(function(classes){\n                selectorConfig.classes = classes;\n                selectorConfig.classUri = classes[0].uri;\n            })\n            .then(function(){\n                //load the class properties\n                return testItemProvider.getItemClassProperties(selectorConfig.classUri);\n            })\n            .then(function(filters){\n                //set the filters from the properties\n                selectorConfig.filters = filters;\n            })\n            .then(function(){\n                //set up the resource selector\n                resourceSelectorFactory($container, selectorConfig)\n                    .on('render', function(){\n                        var self = this;\n                        $container.on('itemselected.creator', function(){\n                            self.clearSelection();\n                        });\n                    })\n                    .on('query', function(params){\n                        var self = this;\n\n                        //ask the server the item from the component query\n                        testItemProvider.getItems(params)\n                            .then(function(items){\n                                //and update the item list\n                                self.update(items, params);\n                            })\n                            .catch(onError);\n                    })\n                    .on('classchange', function(classUri){\n                        var self = this;\n\n                        //by changing the class we need to change the\n                        //properties filters\n                        testItemProvider\n                            .getItemClassProperties(classUri)\n                            .then(function(filters){\n                                self.updateFilters(filters);\n                            })\n                            .catch(onError);\n                    })\n                    .on('change', function(values){\n\n                        /**\n                         * We've got a selection, triggered on the view container\n                         *\n                         * TODO replace jquery events by the eventifier\n                         *\n                         * @event jQuery#itemselect.creator\n                         * @param {Object[]} values - the selection\n                         */\n                        $container.trigger('itemselect.creator', [values]);\n                    });\n            })\n            .catch(onError);\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart clearfix\\\">\\n\\n   <h1><span data-bind=\\\"identifier\\\">\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n        <div class=\\\"actions\\\"> \\n            <div class=\\\"tlb\\\">\\n                <div class=\\\"tlb-top\\\">\\n                    <span class=\\\"tlb-box\\\">\\n                        <span class=\\\"tlb-bar\\\">\\n                            <span class=\\\"tlb-start\\\"></span>\\n                            <span class=\\\"tlb-group\\\">\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"Test Part Properties\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"Move Up\\\"><span class=\\\"icon-up\\\"></span></a>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"Move Down\\\"><span class=\\\"icon-down\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span> \\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"Remove Test Part\\\" data-delete=\\\"#\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                            </span>\\n                            <span class=\\\"tlb-end\\\"></span>\\n                        </span>  \\n                        <!--<span class=\\\"tlb-bar\\\">-->\\n                            <!--<span class=\\\"tlb-start\\\"></span>-->\\n                            <!--<span class=\\\"tlb-text-button-box\\\">-->\\n                                <!--<a class=\\\"tlb-text-button-off section-adder\\\">-->\\n                                    <!--<span class=\\\"icon-add\\\"></span>-->\\n                                    <!--<span class=\\\"tlb-text\\\">New Section</span>-->\\n                                <!--</a>-->\\n                            <!--</span>-->\\n                            <!--<span class=\\\"tlb-end\\\"></span>-->\\n                        <!--</span>-->\\n                    </span>   \\n                </div>\\n            </div>\\n        </div>\\n        <a href=\\\"#\\\" class=\\\"toggler opened\\\" data-toggle=\\\"#testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></a>\\n    </h1>\\n    <div id=\\\"testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-content\\\">\\n        \\n       <!-- assessmentTest/testPart/assessmentSections -->\\n       <div class=\\\"sections\\\" data-bind-each=\\\"assessmentSections\\\" data-bind-tmpl=\\\"section\\\" data-bind-filter=\\\"isSection\\\"></div>\\n\\n        <button class=\\\"btn-info small section-adder\\\">\\n            <span class=\\\"icon-add\\\"></span>New section\\n        </button>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section\\\">\\n\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\n    <h2><span data-bind=\\\"title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n        <div class=\\\"actions\\\">\\n            <div class=\\\"tlb\\\">\\n                <div class=\\\"tlb-top\\\">\\n                    <span class=\\\"tlb-box\\\">\\n                        <span class=\\\"tlb-bar\\\">\\n                            <span class=\\\"tlb-start\\\"></span>\\n                            <span class=\\\"tlb-group\\\">\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off rub-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Manage Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Manage Rubric Blocks\", options)))\n    + \"\\\" data-toggle=\\\"#rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" ><span class=\\\"icon-rubric\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section Properties\", options) : helperMissing.call(depth0, \"__\", \"Section Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Section\", options) : helperMissing.call(depth0, \"__\", \"Remove Section\", options)))\n    + \"\\\" data-delete=\\\":parent .section\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                            </span>\\n                            <span class=\\\"tlb-end\\\"></span>\\n                        </span>\\n                    </span>\\n                </div>\\n            </div>\\n        </div>\\n    </h2>\\n\\n    <div id=\\\"rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"rublocks clearfix toggled\\\">\\n        <h3>\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Rubric Blocks\", options)))\n    + \"</span>\\n        </h3>\\n        <ol class=\\\"rubricblocks decimal\\\" data-bind-each=\\\"rubricBlocks\\\" data-bind-tmpl=\\\"rubricblock\\\"></ol>\\n        <button class=\\\"btn-info small rublock-adder\\\">\\n            <span class=\\\"icon-add\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"New Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"New Rubric Block\", options)))\n    + \"\\n        </button>\\n    </div>\\n    <div class=\\\"itemrefs-wrapper\\\">\\n        <h3>\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items\", options) : helperMissing.call(depth0, \"__\", \"Items\", options)))\n    + \"</span>\\n        </h3>\\n        <ol class=\\\"itemrefs decimal clearfix\\\" data-bind-each=\\\"sectionParts\\\" data-bind-tmpl=\\\"itemref\\\" data-bind-filter=\\\"isItemRef\\\" data-msg=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\\"></ol>\\n        <div class=\\\"itemref-placeholder\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<li class=\\\"rubricblock\\\">\\n    <div class=\\\"actions\\\">\\n       <div class=\\\"tlb\\\">\\n            <div class=\\\"tlb-top\\\">\\n                <span class=\\\"tlb-box\\\">\\n                    <span class=\\\"tlb-bar\\\">\\n                        <span class=\\\"tlb-start\\\"></span>\\n                        <span class=\\\"tlb-group\\\">\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block Properties\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Remove Rubric Block\", options)))\n    + \"\\\" data-delete=\\\":parent .rubricblock\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                        </span>\\n                        <span class=\\\"tlb-end\\\"></span>\\n                    </span>\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"rubricblock-content\\\" contenteditable></div>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<li id='\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-uri='\";\n  if (helper = helpers.href) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.href); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='itemref'>\\n    <span class='title truncate'>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <div class=\\\"actions\\\"> \\n        <div class=\\\"tlb\\\">\\n            <div class=\\\"tlb-top\\\">\\n                <span class=\\\"tlb-box\\\">\\n                    <span class=\\\"tlb-bar\\\">\\n                        <span class=\\\"tlb-start\\\"></span>\\n                        <span class=\\\"tlb-group\\\">\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Reference Properties\", options) : helperMissing.call(depth0, \"__\", \"Item Reference Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span> \\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Item Reference\", options) : helperMissing.call(depth0, \"__\", \"Remove Item Reference\", options)))\n    + \"\\\" data-delete=\\\":parent .itemref\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                        </span>\\n                        <span class=\\\"tlb-end\\\"></span>\\n                    </span>  \\n                </span>   \\n            </div>\\n        </div>\\n    </div>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/outcomes', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n    \";\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-6 line\\\">\";\n  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n        <div class=\\\"col-3 line\\\">\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n        <div class=\\\"col-3 line\\\">\";\n  if (helper = helpers.cardinality) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cardinality); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-12 line\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"no outcome declaration found\", options) : helperMissing.call(depth0, \"__\", \"no outcome declaration found\", options)))\n    + \"</div>\\n    </div>\\n\";\n  return buffer;\n  }\n\n  buffer += \"    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-6 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</div>\\n        <div class=\\\"col-3 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Type\", options) : helperMissing.call(depth0, \"__\", \"Type\", options)))\n    + \"</div>\\n        <div class=\\\"col-3 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cardinality\", options) : helperMissing.call(depth0, \"__\", \"Cardinality\", options)))\n    + \"</div>\\n    </div>\\n\";\n  stack1 = helpers['if'].call(depth0, depth0, {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/test-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n    <div class=\\\"test-scoring toggled\\\">\\n\\n<!-- assessmentTest/scoring/outcomeProcessing -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-outcome-processing\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome processing\", options) : helperMissing.call(depth0, \"__\", \"Outcome processing\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <select name=\\\"test-outcome-processing\\\" class=\\\"select2\\\" data-bind=\\\"scoring.outcomeProcessing\\\" data-bind-encoder=\\\"string\\\" data-has-search=\\\"false\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </select>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select the way the responses of your test should be processed\", options) : helperMissing.call(depth0, \"__\", \"Select the way the responses of your test should be processed\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/categoryScore -->\\n        <div class=\\\"grid-row test-category-score\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-category-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Category score\", options) : helperMissing.call(depth0, \"__\", \"Category score\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"test-category-score\\\" value=\\\"true\\\" data-bind=\\\"scoring.categoryScore\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Also compute the score per categories\", options) : helperMissing.call(depth0, \"__\", \"Also compute the score per categories\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/cutScore -->\\n        <div class=\\\"grid-row test-cut-score\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-cut-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cut score (pass ratio)\", options) : helperMissing.call(depth0, \"__\", \"Cut score (pass ratio)\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"test-cut-score\\\" value=\\\"0\\\" data-bind=\\\"scoring.cutScore\\\" data-bind-encoder=\\\"float\\\" data-validate=\\\"$numeric;\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the cut score (or pass score ratio) associated to the test. It must be a float between 0 and 1.\", options) : helperMissing.call(depth0, \"__\", \"Set the cut score (or pass score ratio) associated to the test. It must be a float between 0 and 1.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/weightIdentifier -->\\n        <div class=\\\"grid-row test-weight-identifier\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-weight-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weight\", options) : helperMissing.call(depth0, \"__\", \"Weight\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"test-weight-identifier\\\" data-bind=\\\"scoring.weightIdentifier\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the weight identifier used to process the score\", options) : helperMissing.call(depth0, \"__\", \"Set the weight identifier used to process the score\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/description -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-12\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n            </div>\\n        </div>\\n    </div>\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <option value=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</option>\\n                \";\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  \n  return \"selected=\\\"selected\\\"\";\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                <div class=\\\"feedback-info test-outcome-processing-description\\\" data-key=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"icon-info\\\"></span>\\n                    \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                </div>\\n                \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"test-props props clearfix\\\">\\n\\n    <!-- test properties -->\\n    <h3 data-bind=\\\"title\\\"></h3>\\n\\n<!-- assessmentTest/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"test-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"test-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The principle identifier of the test.\", options) : helperMissing.call(depth0, \"__\", \"The principle identifier of the test.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/title -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"test-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"test-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test title.\", options) : helperMissing.call(depth0, \"__\", \"The test title.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"test-time-limits toggled\\\">\\n\\n\\n\\n<!-- assessmentTest/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for the all test.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for the all test.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"test-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-scoring\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scoring\", options) : helperMissing.call(depth0, \"__\", \"Scoring\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/scoring -->\\n\";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.scoring), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-outcome-declarations\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome declarations\", options) : helperMissing.call(depth0, \"__\", \"Outcome declarations\", options)))\n    + \"</h4>\\n\\n    <!-- assessmentTest/outcomeDeclarations -->\\n    <div class=\\\"test-outcome-declarations panel toggled\\\">\\n        <div class=\\\"grid-row test-outcomes-generate\\\">\\n            <div class=\\\"col-12 align-right\\\">\\n                <button class=\\\"btn-info small\\\" data-action=\\\"generate-outcomes\\\"><span class=\\\"icon icon-reset\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Regenerate\", options) : helperMissing.call(depth0, \"__\", \"Regenerate\", options)))\n    + \"</button>\\n            </div>\\n        </div>\\n        <div class=\\\"outcome-declarations\\\"></div>\\n    </div>\\n\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"testpart-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-props props clearfix\\\">\\n    <h3>\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n    <form autocomplete=\\\"off\\\">\\n\\n<!-- assessmentTest/testPart/identifier -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"testpart-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"testpart-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test part identifier.\", options) : helperMissing.call(depth0, \"__\", \"The test part identifier.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/navigationMode -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n               \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Navigation\", options) : helperMissing.call(depth0, \"__\", \"Navigation\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"navigationMode\\\" data-bind-encoder=\\\"number\\\" />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Linear\", options) : helperMissing.call(depth0, \"__\", \"Linear\", options)))\n    + \"\\n                </label>\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"1\\\"  />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Non Linear\", options) : helperMissing.call(depth0, \"__\", \"Non Linear\", options)))\n    + \"\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options) : helperMissing.call(depth0, \"__\", \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/submissionMode -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Submission\", options) : helperMissing.call(depth0, \"__\", \"Submission\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"submissionMode\\\" data-bind-encoder=\\\"number\\\" />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Individual\", options) : helperMissing.call(depth0, \"__\", \"Individual\", options)))\n    + \"\\n                </label>\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"1\\\"  />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Simultaneous\", options) : helperMissing.call(depth0, \"__\", \"Simultaneous\", options)))\n    + \"\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options) : helperMissing.call(depth0, \"__\", \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n\\n<!-- assessmentTest/testPart/itemSessionControl -->\\n        <div class=\\\"testpart-item-session-control toggled\\\">\\n\\n<!-- assessmentTest/testPart/itemSessionControl/maxAttempts -->\\n            <div class=\\\"grid-row\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <input name=\\\"testpart-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/showFeedback -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/itemSessionControl/allowComment -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-comment\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/allowSkipping -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\"   />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/validateResponses -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-validate-responses\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Validate Responses\", options) : helperMissing.call(depth0, \"__\", \"Validate Responses\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-validate-responses\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.validateResponses\\\" data-bind-encoder=\\\"boolean\\\"  />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The candidate is not allowed to submit invalid responses.\", options) : helperMissing.call(depth0, \"__\", \"The candidate is not allowed to submit invalid responses.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/timeLimits/minTime -->\\n        <div class=\\\"testpart-time-limits toggled\\\">\\n\\n\\n\\n<!-- assessmentTest/testPart/timeLimits/maxTime -->\\n            <div class=\\\"grid-row\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this test part.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this test part.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/timeLimits/allowLateSubmission -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-blueprint\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate Blueprint\", options) : helperMissing.call(depth0, \"__\", \"Associate Blueprint\", options)))\n    + \"</label>\\n        </div>\\n\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-blueprint\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options) : helperMissing.call(depth0, \"__\", \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div id=\\\"section-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section-props props clearfix\\\">\\n    <h3>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n<!-- assessmentTest/testPart/assessmentSection/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the section.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the section.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The section title.\", options) : helperMissing.call(depth0, \"__\", \"The section title.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/visible -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-visible\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Visible\", options) : helperMissing.call(depth0, \"__\", \"Visible\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"section-visible\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"visible\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"A visible section is one that is identifiable by the candidate.\", options) : helperMissing.call(depth0, \"__\", \"A visible section is one that is identifiable by the candidate.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/keepTogether -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-keep-together\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Keep Together\", options) : helperMissing.call(depth0, \"__\", \"Keep Together\", options)))\n    + \"</label>\\n        </div>\\n\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"section-keep-together\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"keepTogether\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options) : helperMissing.call(depth0, \"__\", \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasBlueprint), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n    <div class=\\\"categories\\\">\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"category-custom\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"category-custom\\\"/>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options) : helperMissing.call(depth0, \"__\", \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!-- some user features (Test Navigation, Test Taker Tools, etc.) are in fact implemented as categories. They will appear here: -->\\n        <div class=\\\"category-presets\\\"></div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Selection\", options) : helperMissing.call(depth0, \"__\", \"Selection\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection -->\\n    <div class=\\\"section-selection toggled\\\">\\n\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-enable-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Enable selection\", options) : helperMissing.call(depth0, \"__\", \"Enable selection\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-enable-selection\\\"  />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection/select -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-select\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select\", options) : helperMissing.call(depth0, \"__\", \"Select\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"section-select\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"0\\\" data-bind=\\\"selection.select\\\"  data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The number of child elements to be selected.\", options) : helperMissing.call(depth0, \"__\", \"The number of child elements to be selected.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection/withReplacement -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-with-replacement\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"With Replacement\", options) : helperMissing.call(depth0, \"__\", \"With Replacement\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-with-replacement\\\" value=\\\"true\\\" data-bind=\\\"selection.withReplacement\\\"  data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"When selecting child elements each element is normally eligible for selection once only.\", options) : helperMissing.call(depth0, \"__\", \"When selecting child elements each element is normally eligible for selection once only.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-ordering\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Ordering\", options) : helperMissing.call(depth0, \"__\", \"Ordering\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/ordering -->\\n    <div class=\\\"section-ordering toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/ordering/shuffle -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-shuffle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Shuffle\", options) : helperMissing.call(depth0, \"__\", \"Shuffle\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-shuffle\\\" value=\\\"true\\\" data-bind=\\\"ordering.shuffle\\\"  data-bind-encoder=\\\"boolean\\\"  />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options) : helperMissing.call(depth0, \"__\", \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl -->\\n    <div class=\\\"section-item-session-control toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/maxAttempts -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"section-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/showFeedback -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowComment -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowSkipping -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/validateResponses -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-validate-responses\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Validate Responses\", options) : helperMissing.call(depth0, \"__\", \"Validate Responses\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-validate-responses\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.validateResponses\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The candidate is not allowed to submit invalid responses.\", options) : helperMissing.call(depth0, \"__\", \"The candidate is not allowed to submit invalid responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"section-time-limits toggled\\\">\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this section.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this section.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"itemref-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"itemref-props props clearfix\\\">\\n\\n    <h3>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the item reference.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the item reference.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/href -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-href\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reference\", options) : helperMissing.call(depth0, \"__\", \"Reference\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-href\\\" data-bind=\\\"href\\\" readonly=\\\"readonly\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The reference.\", options) : helperMissing.call(depth0, \"__\", \"The reference.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/required -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-required\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required\", options) : helperMissing.call(depth0, \"__\", \"Required\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-required\\\" value=\\\"true\\\" data-bind=\\\"required\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If required it must appear (at least once) in the selection.\", options) : helperMissing.call(depth0, \"__\", \"If required it must appear (at least once) in the selection.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/fixed -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-fixed\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Fixed\", options) : helperMissing.call(depth0, \"__\", \"Fixed\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-fixed\\\" value=\\\"true\\\" data-bind=\\\"fixed\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Not shuffled, the position remains fixed.\", options) : helperMissing.call(depth0, \"__\", \"Not shuffled, the position remains fixed.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"categories\\\">\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"category-custom\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"custom categories\", options) : helperMissing.call(depth0, \"__\", \"custom categories\", options)))\n    + \"\\\" name=\\\"category-custom\\\"/>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items can optionally be assigned to one or more categories.\", options) : helperMissing.call(depth0, \"__\", \"Items can optionally be assigned to one or more categories.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\\n        <textarea title=\\\"categories\\\" class=\\\"hidden\\\" type=\\\"text\\\" name=\\\"itemref-category\\\" data-bind=\\\"categories\\\" data-bind-encoder=\\\"str2array\\\"></textarea>\\n\\n        <!-- some user features (Test Navigation, Test Taker Tools, etc.) are in fact implemented as categories. They will appear here: -->\\n        <div class=\\\"category-presets\\\"></div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-weights\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weights\", options) : helperMissing.call(depth0, \"__\", \"Weights\", options)))\n    + \"</h4>\\n\\n    <div class=\\\"itemref-weights toggled\\\">\\n        <div class=\\\"grid-row \\\">\\n            <div class=\\\"col-9\\\">\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</strong>\\n            </div>\\n            <div class=\\\"col-2\\\">\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Value\", options) : helperMissing.call(depth0, \"__\", \"Value\", options)))\n    + \"</strong>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the contribution of an individual item score to the overall test score.\", options) : helperMissing.call(depth0, \"__\", \"Controls the contribution of an individual item score to the overall test score.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/weights -->\\n        <div data-bind-each=\\\"weights\\\" data-bind-tmpl=\\\"itemrefweight\\\"></div>\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-12\\\">\\n                <a class=\\\"itemref-weight-add\\\"><span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"add a new weight\", options) : helperMissing.call(depth0, \"__\", \"add a new weight\", options)))\n    + \"</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl -->\\n    <div class=\\\"itemref-item-session-control toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/maxAttempts -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"itemref-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/showFeedback -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowComment -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowSkipping -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/validateResponses -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-validate-responses\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Validate Responses\", options) : helperMissing.call(depth0, \"__\", \"Validate Responses\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-validate-responses\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.validateResponses\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The candidate is not allowed to submit invalid responses.\", options) : helperMissing.call(depth0, \"__\", \"The candidate is not allowed to submit invalid responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"itemref-time-limits toggled\\\">\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this item.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this item.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props-weight', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"grid-row itemref-weight\\\">\\n    <div class=\\\"col-9\\\">\\n        <input data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" />\\n    </div>\\n    <div class=\\\"col-2\\\">\\n        <input data-bind=\\\"value\\\" data-validate=\\\"$notEmpty; $numeric;\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-bind-encoder=\\\"float\\\" />\\n    </div>\\n    <div class=\\\"col-1\\\">\\n        <a class=\\\"itemref-weight-remove\\\" data-delete=\\\":parent .itemref-weight\\\">\\n            <span class=\\\"icon-bin\\\"></span>\\n        </a>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"rubric-feedback toggled\\\">\\n\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/activated -->\\n        <div class=\\\"grid-row rubric-feedback-activated\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"activated\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Activated\", options) : helperMissing.call(depth0, \"__\", \"Activated\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"activated\\\" value=\\\"true\\\" data-bind=\\\"feedback.activated\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the rubric block as a feedback block\", options) : helperMissing.call(depth0, \"__\", \"Set the rubric block as a feedback block\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/outcome -->\\n        <div class=\\\"grid-row rubric-feedback-outcome\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"feedback-outcome\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome\", options) : helperMissing.call(depth0, \"__\", \"Outcome\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"feedback-outcome\\\" data-bind=\\\"feedback.outcome\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set outcome identifier the feedback block is related to\", options) : helperMissing.call(depth0, \"__\", \"Set outcome identifier the feedback block is related to\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/matchValue -->\\n        <div class=\\\"grid-row rubric-feedback-match-value\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"feedback-match-value\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Match value\", options) : helperMissing.call(depth0, \"__\", \"Match value\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"feedback-match-value\\\" data-bind=\\\"feedback.matchValue\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the value of the outcome that will activate the feedback block\", options) : helperMissing.call(depth0, \"__\", \"Set the value of the outcome that will activate the feedback block\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"rubricblock-props props clearfix\\\">\\n\\n    <h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block\", options)))\n    + \": \";\n  if (helper = helpers.orderIndex) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.orderIndex); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/views -->\\n    <!--\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Views\", options) : helperMissing.call(depth0, \"__\", \"Views\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <select name=\\\"view\\\" multiple=\\\"multiple\\\" data-bind=\\\"views\\\">\\n                <option value=\\\"author\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Author\", options) : helperMissing.call(depth0, \"__\", \"Author\", options)))\n    + \"</option>\\n                <option value=\\\"candidate\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Candidate\", options) : helperMissing.call(depth0, \"__\", \"Candidate\", options)))\n    + \"</option>\\n                <option value=\\\"proctor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Proctor\", options) : helperMissing.call(depth0, \"__\", \"Proctor\", options)))\n    + \"</option>\\n                <option value=\\\"scorer\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scorer\", options) : helperMissing.call(depth0, \"__\", \"Scorer\", options)))\n    + \"</option>\\n                <option value=\\\"testConstructor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test constructor\", options) : helperMissing.call(depth0, \"__\", \"Test constructor\", options)))\n    + \"</option>\\n                <option value=\\\"tutor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Tutor\", options) : helperMissing.call(depth0, \"__\", \"Tutor\", options)))\n    + \"</option>\\n            </select>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Who can view the rubric block during the delivery.\", options) : helperMissing.call(depth0, \"__\", \"Who can view the rubric block during the delivery.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    -->\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/class -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"class\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Class\", options) : helperMissing.call(depth0, \"__\", \"Class\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"class\\\" data-bind=\\\"class\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_\\\\s][a-zA-Z0-9_\\\\s-]*)?$);\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the XHTML-QTI class of the rubric block.\", options) : helperMissing.call(depth0, \"__\", \"Set the XHTML-QTI class of the rubric block.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/id -->\\n    <!--\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"id\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"id\\\" data-bind=\\\"id\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_\\\\s][a-zA-Z0-9_\\\\s-]*)?$);\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the XHTML-QTI identifier of the rubric block.\", options) : helperMissing.call(depth0, \"__\", \"Set the XHTML-QTI identifier of the rubric block.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    -->\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .rubric-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Feedback block\", options) : helperMissing.call(depth0, \"__\", \"Feedback block\", options)))\n    + \"</h4>\\n\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback -->\\n    \";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.feedback), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/category-presets', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n\\n<h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .category-preset-group-\";\n  if (helper = helpers.groupId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.groupLabel) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupLabel); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h4>\\n\\n<div class=\\\"category-preset-group-\";\n  if (helper = helpers.groupId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" toggled\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.presets), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <div class=\\\"grid-row pseudo-label-box category-preset\\\" data-qti-category=\\\"\";\n  if (helper = helpers.qtiCategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.qtiCategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n        <div class=\\\"col-1\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"category-preset-\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" value=\\\"\";\n  if (helper = helpers.qtiCategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.qtiCategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"/>\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-10\\\">\\n            <label for=\\\"category-preset-\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n});\n\n","define('taoQtiTest/controller/creator/templates/index',[\n    'tpl!taoQtiTest/controller/creator/templates/testpart',\n    'tpl!taoQtiTest/controller/creator/templates/section',\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock',\n    'tpl!taoQtiTest/controller/creator/templates/itemref',\n    'tpl!taoQtiTest/controller/creator/templates/outcomes',\n    'tpl!taoQtiTest/controller/creator/templates/test-props',\n    'tpl!taoQtiTest/controller/creator/templates/testpart-props',\n    'tpl!taoQtiTest/controller/creator/templates/section-props',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props-weight',\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock-props',\n    'tpl!taoQtiTest/controller/creator/templates/category-presets'\n],\nfunction(\n    testPart,\n    section,\n    rubricBlock,\n    itemRef,\n    outcomes,\n    testProps,\n    testPartProps,\n    sectionProps,\n    itemRefProps,\n    itemRefPropsWeight,\n    rubricBlockProps,\n    categoryPresets\n){\n    'use strict';\n\n    /**\n     * Expose all the templates used by the test creator\n     * @exports taoQtiTest/controller/creator/templates/index\n     */\n    return {\n        'testpart'      : testPart,\n        'section'       : section,\n        'itemref'       : itemRef,\n        'rubricblock'   : rubricBlock,\n        'outcomes'      : outcomes,\n        'properties'    : {\n            'test'      : testProps,\n            'testpart'  : testPartProps,\n            'section'   : sectionProps,\n            'itemref'   : itemRefProps,\n            'itemrefweight'     : itemRefPropsWeight,\n            'rubricblock'       : rubricBlockProps,\n            'categorypresets'  : categoryPresets\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/property',[\n    'jquery',\n    'ui',\n    'core/databinder',\n    'taoQtiTest/controller/creator/templates/index'\n],\nfunction($, ui, DataBinder, templates){\n    'use strict';\n\n    /**\n     * @callback PropertyViewCallback\n     * @param {propertyView} propertyView - the view object\n     */\n\n    /**\n     * The PropertyView setup the property panel component\n     *\n     * @exports taoQtiTest/controller/creator/views/property\n     */\n    var propView = function propView(tmplName, model){\n        var $container = $('.test-creator-props');\n        var template = templates.properties[tmplName];\n        var $view;\n\n        /**\n         * Opens the view for the 1st time\n         */\n        var open = function propOpen(){\n            var databinder,\n                binderOptions = {\n                    templates: templates.properties\n                };\n            $container.children('.props').hide().trigger('propclose.propview');\n            $view = $(template(model)).appendTo($container).filter('.props');\n\n            //start listening for DOM compoenents inside the view\n            ui.startDomComponent($view);\n\n            //start the data binding\n            databinder = new DataBinder($view, model, binderOptions);\n            databinder.bind();\n\n            propValidation();\n\n            $view.trigger('propopen.propview');\n        };\n\n       /**\n        * Get the view container element\n        * @returns {jQueryElement}\n        */\n        var getView = function propGetView(){\n            return $view;\n        };\n\n       /**\n        * Check wheter the view is displayed\n        * @returns {boolean} true id opened\n        */\n        var isOpen = function propIsOpen(){\n            return $view.css('display') !== 'none';\n        };\n\n       /**\n        * Bind a callback on view open\n        * @param {PropertyViewCallback} cb\n        */\n        var onOpen = function propOnOpen(cb){\n            $view.on('propopen.propview', function(e){\n                e.stopPropagation();\n                cb();\n            });\n        };\n\n\n        /**\n         * Bind a callback on view close\n         * @param {PropertyViewCallback} cb\n         */\n        var onClose = function propOnClose(cb){\n            $view.on('propclose.propview', function(e){\n                e.stopPropagation();\n                cb();\n            });\n        };\n\n        /**\n         * Removes the property view\n         */\n        var destroy = function propDestroy(){\n            $view.remove();\n        };\n\n        /**\n         * Toggles the property view display\n         */\n        var toggle = function propToggle(){\n            $container.children('.props').not($view).hide().trigger('propclose.propview');\n            if(isOpen()){\n                $view.hide().trigger('propclose.propview');\n            } else {\n                $view.show().trigger('propopen.propview');\n            }\n        };\n\n       /**\n        * Set up the validation on the property view\n        * @private\n        */\n        function propValidation() {\n            $view.on('validated.group', function(e, isValid){\n                if(e.namespace === 'group'){\n                    var $togglers = $('#test-creator .property-toggler, #saver');\n                    if(isValid === true){\n                        $togglers.removeClass('disabled');\n                    } else {\n                        $togglers.addClass('disabled');\n                    }\n                }\n            });\n            $view.groupValidator();\n         }\n\n        return {\n            open : open,\n            getView : getView,\n            isOpen : isOpen,\n            onOpen : onOpen,\n            onClose : onClose,\n            destroy : destroy,\n            toggle : toggle\n        };\n    };\n\n   return propView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/actions',[\n'jquery',\n'taoQtiTest/controller/creator/views/property'],\nfunction($, propertyView){\n    'use strict';\n\n    var disabledClass = 'disabled';\n    var activeClass = 'active';\n    var btnOnClass = 'tlb-button-on';\n\n    /**\n     * Set up the property view for an element\n     * @param {jQueryElement} $container - that contains the property opener\n     * @param {String} template - the name of the template to give to the propertyView\n     * @param {Object} model - the model to bind\n     * @param {PropertyViewCallback} cb - execute at view setup phase\n     */\n    function properties ($container, template, model, cb) {\n        var propView = null;\n        $container.find('.property-toggler').on('click', function(e){\n            e.preventDefault();\n            var $elt = $(this);\n            if(!$(this).hasClass(disabledClass)){\n\n                $elt.blur(); //to remove the focus\n\n                if(propView === null){\n\n                    $container.addClass(activeClass);\n                    $elt.addClass(btnOnClass);\n\n                    propView = propertyView(template, model);\n                    propView.open();\n\n                    propView.onOpen(function(){\n                        $container.addClass(activeClass);\n                        $elt.addClass(btnOnClass);\n                    });\n                    propView.onClose(function(){\n                        $container.removeClass(activeClass);\n                        $elt.removeClass(btnOnClass);\n                    });\n\n                    if(typeof cb === 'function'){\n                        cb(propView);\n                    }\n                } else {\n                    propView.toggle();\n                }\n            }\n        });\n    }\n\n\n    /**\n     * Enable to move an element\n     * @param {jQueryElement} $actionContainer - where the mover is\n     * @param {String} containerClass - the cssClass of the element container\n     * @param {String} elementClass - the cssClass to identify elements\n     */\n    function move ($actionContainer, containerClass, elementClass) {\n        var $element = $actionContainer.parents('.' + elementClass);\n        var $container = $element.parents('.' + containerClass );\n\n        //move up an element\n        $('.move-up', $actionContainer).click(function(e){\n            var $elements, index;\n\n            //prevent default and click during animation\n            e.preventDefault();\n            if($element.is(':animated')){\n                return false;\n            }\n\n            //get the position\n            $elements = $('.' + elementClass, $container);\n            index = $elements.index($element);\n            if (index > 0) {\n                $element.fadeOut(200, function(){\n                    $element\n                        .insertBefore($('.' + elementClass + ' :eq(' + (index - 1) + ')', $container))\n                        .fadeIn(400, function(){\n                            $container.trigger('change');\n                        });\n                });\n            }\n        });\n\n        //move down an element\n        $('.move-down', $actionContainer).click(function(e){\n            var $elements, index;\n\n            //prevent default and click during animation\n            e.preventDefault();\n            if($element.is(':animated')){\n                return false;\n            }\n\n            //get the position\n            $elements = $('.' + elementClass, $container);\n            index = $elements.index($element);\n            if (index < ($elements.length - 1) && $elements.length > 1) {\n                $element.fadeOut(200, function(){\n                    $element\n                        .insertAfter($('.' + elementClass + ' :eq(' + (index + 1) + ')', $container))\n                        .fadeIn(400, function(){\n                            $container.trigger('change');\n                        });\n                });\n            }\n        });\n    }\n\n    /**\n     * Update the movable state of an element\n     * @param {jQueryElement} $container - the movable elements (scopped)\n     * @param {String} elementClass - the cssClass to identify elements\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function movable ($container, elementClass, actionContainerElt){\n        $container.each(function(){\n            var $elt = $(this);\n            var $actionContainer = $(actionContainerElt, $elt);\n\n            var index = $container.index($elt);\n            var $moveUp = $('.move-up', $actionContainer);\n            var $moveDown = $('.move-down', $actionContainer);\n\n            //only one test part, no moving\n            if( $container.length === 1 ){\n                $moveUp.addClass(disabledClass);\n                $moveDown.addClass(disabledClass);\n\n            //testpart is the first, only moving down\n            } else if(index === 0) {\n                $moveUp.addClass(disabledClass);\n                $moveDown.removeClass(disabledClass);\n\n            //testpart is the lasst, only moving up\n            } else if ( index >= ($container.length - 1) ) {\n                $moveDown.addClass(disabledClass);\n                $moveUp.removeClass(disabledClass);\n\n            //or enable moving top/bottom\n            } else {\n                $moveUp.removeClass(disabledClass);\n                $moveDown.removeClass(disabledClass);\n            }\n         });\n    }\n\n    /**\n     * Update the removable state of an element\n     * @param {jQueryElement} $container - that contains the removable action\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function removable ($container, actionContainerElt){\n        $container.each(function(){\n            var $elt = $(this);\n            var $actionContainer = $(actionContainerElt, $elt);\n            var $delete = $('[data-delete]', $actionContainer);\n\n            if($container.length <= 1){\n                $delete.addClass(disabledClass);\n            } else {\n                $delete.removeClass(disabledClass);\n            }\n        });\n    }\n\n    /**\n     * Disable all the actions of the target\n     * @param {jQueryElement} $container - that contains the the actions\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function disable($container, actionContainerElt){\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').addClass(disabledClass);\n    }\n\n    /**\n     * Enable all the actions of the target\n     * @param {jQueryElement} $container - that contains the the actions\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function enable($container, actionContainerElt){\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').removeClass(disabledClass);\n    }\n\n    /**\n     * The actions gives you shared behavior for some actions.\n     *\n     * @exports taoQtiTest/controller/creator/views/actions\n     */\n    return {\n        properties  : properties,\n        move        : move,\n        removable   : removable,\n        movable     : movable,\n        disable     : disable,\n        enable      : enable\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * This helper manages the category selection UI:\n * - either via a text entry field that allow to enter any custom categories\n * - either via displaying grouped checkboxes that allow to select any categories presets\n * All categories are then grouped and given to this object's listeners, as they will later end up in the same model field.\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/categorySelector',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/eventifier',\n    'ui/tooltip',\n    'taoQtiTest/controller/creator/templates/index',\n    'select2'\n], function($, _, __, eventifier, tooltip, templates) {\n    'use strict';\n\n    var allPresets = [],\n        allQtiCategoriesPresets = [];\n\n\n    function categorySelectorFactory($container) {\n        var categorySelector,\n\n            $presetsContainer = $container.find('.category-presets'),\n            $presetsCheckboxes,\n            $customCategoriesSelect = $container.find('[name=category-custom]');\n\n        /**\n         * Read the form state from the DOM and trigger an event with the result, so the listeners can update the item/section model\n         * @fires categorySelector#category-change\n         */\n        function updateCategories() {\n            var selectedCategories,\n                indeterminatedCategories,\n\n                presetSelected = $container\n                    .find('.category-preset input:checked')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.value;\n                    }),\n                presetIndeterminate = $container\n                    .find('.category-preset input:indeterminate')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.value;\n                    }),\n                customSelected = $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice').not('.partial')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.textContent && categoryEl.textContent.trim();\n                    }),\n                customIndeterminate = $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice.partial')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.textContent && categoryEl.textContent.trim();\n                    });\n\n            selectedCategories = presetSelected.concat(customSelected);\n            indeterminatedCategories = presetIndeterminate.concat(customIndeterminate);\n\n            /**\n             * @event categorySelector#category-change\n             * @param {String[]} allCategories\n             * @param {String[]} indeterminate\n             */\n            this.trigger('category-change', selectedCategories, indeterminatedCategories);\n        }\n\n        categorySelector = {\n            /**\n             * Create the category selection form\n             *\n             * @param {Array} [currentCategories] - all categories currently associated to the item. If applied to a section,\n             * contains all the categories applied to at least one item of the section.\n             */\n            createForm: function createForm(currentCategories) {\n                var self = this,\n                    presetsTpl = templates.properties.categorypresets,\n                    customCategories = _.difference(currentCategories, allQtiCategoriesPresets);\n\n                // add preset checkboxes\n                $presetsContainer.append(\n                    presetsTpl(allPresets)\n                );\n\n                $presetsContainer.on('click', function(e) {\n                    var $preset = $(e.target).closest('.category-preset'),\n                        $checkbox;\n\n                    if ($preset.length) {\n                        $checkbox = $preset.find('input');\n                        $checkbox.prop('indeterminate', false);\n\n                        _.defer(function() {\n                            updateCategories.call(self);\n                        });\n                    }\n                });\n\n                // init custom categories field\n                $customCategoriesSelect.select2({\n                    width: '100%',\n                    tags : customCategories,\n                    multiple : true,\n                    tokenSeparators: [\",\", \" \", \";\"],\n                    formatNoMatches : function(){\n                        return __('Enter a custom category');\n                    },\n                    maximumInputLength : 32\n                }).on('change', function(){\n                    updateCategories.call(self);\n                });\n\n                // enable help tooltips\n                tooltip($container);\n            },\n\n            /**\n             * Check/Uncheck boxes and fill the custom category field to match the new model\n             * @param {String[]} selected - categories associated with an item, or with all the items of the same section\n             * @param {String[]} [indeterminate] - categories in an indeterminate state at a section level\n             */\n            updateFormState: function updateFormState(selected, indeterminate) {\n                var customCategories;\n\n                indeterminate = indeterminate || [];\n\n                customCategories = _.difference(selected.concat(indeterminate), allQtiCategoriesPresets);\n\n                // Preset categories\n\n                $presetsCheckboxes = $container.find('.category-preset input');\n                $presetsCheckboxes.each(function() {\n                    var category = this.value;\n\n                    this.indeterminate = false;\n                    this.checked = false;\n\n                    if (indeterminate.indexOf(category) !== -1) {\n                        this.indeterminate = true;\n                    } else if (selected.indexOf(category) !== -1) {\n                        this.checked = true;\n                    }\n                });\n\n                // Custom categories\n\n                $customCategoriesSelect.select2('val', customCategories);\n\n                $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice').each(function(){\n                    var $li = $(this);\n                    var content = $li.find('div').text();\n                    if(indeterminate.indexOf(content) !== -1){\n                        $li.addClass('partial');\n                    }\n                });\n            }\n        };\n\n        eventifier(categorySelector);\n\n        return categorySelector;\n    }\n\n    /**\n     * @param {Object[]} presets - expected format:\n     * [\n     *  {\n     *      groupId: 'navigation',\n     *      groupLabel: 'Test Navigation',\n     *      presets: [\n     *          {\n     *              id: 'nextPartWarning',\n     *              label: 'Next Part Warning',\n     *              qtiCategory : 'x-tao-option-nextPartWarning',\n     *              description : 'Displays a warning before the user finishes a part'\n *              },\n     *          ...\n     *      ]\n     *  },\n     *  ...\n     * ]\n     */\n    categorySelectorFactory.setPresets = function setPresets(presets) {\n        if (_.isArray(presets)) {\n            allPresets = presets;\n            allQtiCategoriesPresets = extractCategoriesFromPresets();\n        }\n    };\n\n    /**\n     * Extract the qtiCategory property of all presets of all groups\n     * @returns {String[]}\n     */\n    function extractCategoriesFromPresets() {\n        return allPresets.reduce(function (prev, current) {\n            var groupIds = _.pluck(current.presets, 'qtiCategory');\n            return prev.concat(groupIds);\n        }, []);\n    }\n\n    return categorySelectorFactory;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n */\ndefine('taoQtiTest/controller/creator/helpers/sectionCategory',[\n    'lodash',\n    'i18n',\n    'core/errorHandler'\n], function (_, __, errorHandler){\n\n    'use strict';\n\n    var _ns = '.sectionCategory';\n\n    /**\n     * Check if the given object is a valid assessmentSection model object\n     *\n     * @param {object} model\n     * @returns {boolean}\n     */\n    function isValidSectionModel(model){\n        return (_.isObject(model) && model['qti-type'] === 'assessmentSection' && _.isArray(model.sectionParts));\n    }\n\n    /**\n     * Set an array of categories to the section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} selected - all categories active for the whole section\n     * @param {array} partial - only categories in an indeterminate state\n     * @returns {undefined}\n     */\n    function setCategories(model, selected, partial){\n\n        var toRemove,\n            toAdd,\n            currentCategories = getCategories(model);\n\n        partial = partial || [];\n\n        //the categories that are no longer in the new list of categories should be removed\n        toRemove = _.difference(currentCategories.all, selected.concat(partial));\n\n        //the categories that are not in the current categories collection should be added to the children\n        toAdd = _.difference(selected, currentCategories.propagated);\n\n        //process the modification\n        addCategories(model, toAdd);\n        removeCategories(model, toRemove);\n    }\n\n    /**\n     * Get the categories assign to the section model, infered by its interal itemRefs\n     *\n     * @param {object} model\n     * @returns {object}\n     */\n    function getCategories(model){\n        var categories,\n            arrays,\n            union,\n            propagated,\n            partial;\n\n        if(isValidSectionModel(model)){\n            categories = _.map(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\n                    return _.compact(itemRef.categories);\n                }\n            });\n            //array of categories\n            arrays = _.values(categories);\n            union = _.union.apply(null, arrays);\n\n            //categories that are common to all itemRef\n            propagated = _.intersection.apply(null, arrays);\n\n            //the categories that are only partially covered on the section level : complementary of \"propagated\"\n            partial = _.difference(union, propagated);\n\n            return {\n                all : union.sort(),\n                propagated : propagated.sort(),\n                partial : partial.sort()\n            };\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Add an array of categories to a section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function addCategories(model, categories){\n        if(isValidSectionModel(model)){\n            _.each(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef'){\n                    if(!_.isArray(itemRef.categories)){\n                        itemRef.categories = [];\n                    }\n                    itemRef.categories = _.union(itemRef.categories, categories);\n                }\n            });\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Remove an array of categories from a section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function removeCategories(model, categories){\n        if(isValidSectionModel(model)){\n            _.each(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\n                    itemRef.categories = _.difference(itemRef.categories, categories);\n                }\n            });\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    return {\n        isValidSectionModel : isValidSectionModel,\n        setCategories : setCategories,\n        getCategories : getCategories,\n        addCategories : addCategories,\n        removeCategories : removeCategories\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/qtiTest',[\n    'lodash',\n    'i18n',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/qtiElement'\n], function(_, __, outcomeHelper, qtiElementHelper){\n    'use strict';\n\n    /**\n     * Utils to manage the QTI Test model\n     * @exports taoQtiTest/controller/creator/qtiTestHelper\n     */\n    var qtiTestHelper = {\n\n        /**\n         * Extract qti identifiers from a model\n         * @param {Object} obj - the model to extract id from\n         * @returns {Array} the extracted identifiers\n         */\n        extractIdentifiers : function extractIdentifiers(obj){\n            var self = this;\n            var identifiers = [];\n            if(_.has(obj, 'identifier')){\n                identifiers = identifiers.concat(obj.identifier.toLowerCase());\n            }\n            _.flatten(_.forEach(obj, function(value) {\n                identifiers = identifiers.concat(typeof value === \"object\" ? self.extractIdentifiers(value) : []);\n            }), true);\n            return identifiers;\n        },\n\n        /**\n         * Get a valid and avialable qti identifier\n         * @param {String} qtiType - the type of element you want an id for\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\n         * @returns {String} the identifier\n         */\n        getIdentifier : function getIdentifier(qtiType, lockedIdentifiers){\n            var index = 1;\n            var suggestion;\n            var glue =  '-';\n\n            do {\n                suggestion = qtiType +  glue + (index++);\n            } while(_.contains(lockedIdentifiers, suggestion.toLowerCase()));\n\n            lockedIdentifiers.push(suggestion.toLowerCase());\n\n            return suggestion;\n        },\n\n        /**\n         * Gives you a validator that check QTI id format\n         * @returns {Object} the validator\n         */\n        idFormatValidator : function idFormatValidator(){\n            var qtiIdPattern = /^[_a-zA-Z]{1}[a-zA-Z0-9\\-._]{0,31}$/i;\n            return {\n                name : 'idFormat',\n                message : __('is not a valid identifier (alphanum, underscore, dash and dots)'),\n                validate : function(value, callback){\n                    if(typeof callback === 'function'){\n                        callback(qtiIdPattern.test(value));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Gives you a validator that check QTI id format of the test (it is different from the others...)\n         * @returns {Object} the validator\n         */\n        testidFormatValidator : function testidFormatValidator(){\n            var qtiTestIdPattern = /^\\S+$/;\n            return {\n                name : 'testIdFormat',\n                message : __('is not a valid identifier (everything except spaces)'),\n                validate : function(value, callback){\n                    if(typeof callback === 'function'){\n                        callback(qtiTestIdPattern.test(value));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Gives you a validator that check if a QTI id is available\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\n         * @returns {Object} the validator\n         */\n        idAvailableValidator : function idAvailableValidator(lockedIdentifiers){\n            return {\n                name : 'testIdAvailable',\n                message : __('is already used in the test.'),\n                validate : function(value, callback, options){\n                    if(typeof callback === 'function'){\n                        callback(!_.contains(_.values(lockedIdentifiers), value.toLowerCase()) || (options.original && value === options.original));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Does the value contains the type type\n         * @param {Object} value\n         * @param {string} type\n         * @returns {boolean}\n         */\n        filterQtiType : function filterQtiType (value, type){\n            return value['qti-type'] && value['qti-type'] === type;\n        },\n\n        /**\n         * Add the 'qti-type' properties to object that miss it, using the parent key name\n         * @param {Object|Array} collection\n         * @param {string} parentType\n         */\n        addMissingQtiType : function addMissingQtiType(collection, parentType) {\n            var self = this;\n            _.forEach(collection, function(value, key) {\n                if (_.isObject(value) && !_.isArray(value) && !_.has(value, 'qti-type')) {\n                    if (_.isNumber(key)) {\n                        if (parentType) {\n                            value['qti-type'] = parentType;\n                        }\n                    } else {\n                        value['qti-type'] = key;\n                    }\n                }\n                if (_.isArray(value)) {\n                    self.addMissingQtiType(value, key.replace(/s$/, ''));\n                } else if (_.isObject(value)) {\n                    self.addMissingQtiType(value);\n                }\n            });\n        },\n\n        /**\n         * Applies consolidation rules to the model\n         * @param {Object} model\n         * @returns {Object}\n         */\n        consolidateModel : function consolidateModel(model){\n            if(model && model.testParts && _.isArray(model.testParts)){\n\n                _.forEach(model.testParts, function(testPart) {\n\n                    if(testPart.assessmentSections && _.isArray(testPart.assessmentSections)){\n\n                        _.forEach(testPart.assessmentSections, function(assessmentSection) {\n\n                            //remove ordering is shuffle is false\n                            if(assessmentSection.ordering &&\n                                assessmentSection.ordering.shuffle !== undefined && assessmentSection.ordering.shuffle === false){\n                                delete assessmentSection.ordering;\n                            }\n\n                            // clean categories (QTI identifier can't be empty string)\n                            if(assessmentSection.sectionParts && _.isArray(assessmentSection.sectionParts)) {\n                                _.forEach(assessmentSection.sectionParts, function(part) {\n                                    if(part.categories && _.isArray(part.categories) && (part.categories.length === 0 || part.categories[0].length === 0)) {\n                                        part.categories = [];\n                                    }\n                                });\n                            }\n\n                            if(assessmentSection.rubricBlocks && _.isArray(assessmentSection.rubricBlocks)) {\n\n                                //remove rubrick blocks if empty\n                                if (assessmentSection.rubricBlocks.length === 0 ||\n                                    (assessmentSection.rubricBlocks.length === 1 && assessmentSection.rubricBlocks[0].content.length === 0) ) {\n\n                                    delete assessmentSection.rubricBlocks;\n                                }\n                                //ensure the view attribute is present\n                                else if(assessmentSection.rubricBlocks.length > 0){\n                                    _.forEach(assessmentSection.rubricBlocks, function(rubricBlock){\n                                        rubricBlock.views = ['candidate'];\n                                        //change once views are supported\n                                        //if(rubricBlock && rubricBlock.content && (!rubricBlock.views || (_.isArray(rubricBlock.views) && rubricBlock.views.length === 0))){\n                                        //rubricBlock.views = ['candidate'];\n                                        //}\n                                    });\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n            return model;\n        },\n\n        /**\n         * Validates the provided model\n         * @param {Object} model\n         * @throws {Error} if the model is not valid\n         */\n        validateModel: function validateModel(model) {\n            var outcomes = _.indexBy(outcomeHelper.listOutcomes(model));\n\n            _.forEach(model.testParts, function (testPart) {\n                _.forEach(testPart.assessmentSections, function (assessmentSection) {\n                    _.forEach(assessmentSection.rubricBlocks, function (rubricBlock) {\n                        var feedbackBlock = qtiElementHelper.lookupElement(rubricBlock, 'rubricBlock.div.feedbackBlock', 'content');\n                        if (feedbackBlock && !outcomes[feedbackBlock.outcomeIdentifier]) {\n                            throw new Error(__('The outcome \"%s\" does not exist, but it is referenced by a feedback block!', feedbackBlock.outcomeIdentifier));\n                        }\n                    });\n                });\n            });\n        }\n    };\n\n    return  qtiTestHelper;\n});\n\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/itemref',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/helpers/categorySelector',\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/templates/index'\n],\nfunction(\n    $,\n    _,\n    __,\n    actions,\n    categorySelectorFactory,\n    sectionCategory,\n    qtiTestHelper,\n    templates\n){\n    'use strict';\n\n    /**\n     * We need to resize the itemref in case of long labels\n     */\n    var resize = _.throttle(function resize(){\n        var $refs = $('.itemrefs').first();\n        var $actions = $('.itemref .actions').first();\n        var width = $refs.innerWidth() - $actions.outerWidth();\n        $('.itemref > .title').width(width);\n    }, 100);\n\n    /**\n     * Set up an item ref: init action behaviors. Called for each one.\n     *\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     * @param {Object} refModel - the data model to bind to the item ref\n     * @param {jQueryElement} $itemRef - the itemRef element to set up\n     */\n    function setUp (modelOverseer, refModel, $itemRef){\n\n        var $actionContainer = $('.actions', $itemRef);\n\n        actions.properties($actionContainer, 'itemref', refModel, propHandler);\n        actions.move($actionContainer, 'itemrefs', 'itemref');\n\n        resize();\n\n        /**\n         * Perform some binding once the property view is create\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            categoriesProperty(propView.getView());\n            weightsProperty(propView);\n\n            $itemRef.parents('.testpart').on('delete', removePropHandler);\n            $itemRef.parents('.section').on('delete', removePropHandler);\n            $itemRef.on('delete', removePropHandler);\n\n            function removePropHandler(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the category property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function categoriesProperty($view){\n            var categorySelector = categorySelectorFactory($view),\n                $categoryField = $view.find('[name=\"itemref-category\"]');\n\n            categorySelector.createForm();\n            categorySelector.updateFormState(refModel.categories);\n\n            $view.on('propopen.propview', function(){\n                categorySelector.updateFormState(refModel.categories);\n            });\n\n            categorySelector.on('category-change', function(selected) {\n                // Let the binder update the model by going through the category hidden field\n                $categoryField.val(selected.join(','));\n                $categoryField.trigger('change');\n\n                modelOverseer.trigger('category-change', selected);\n            });\n        }\n\n\n        /**\n         * Setup the weights properties\n         */\n        function weightsProperty(propView) {\n            var $view = propView.getView(),\n                $weightList = $view.find('[data-bind-each=\"weights\"]'),\n                weightTpl = templates.properties.itemrefweight;\n\n            $view.find('.itemref-weight-add').on('click', function(e) {\n                var defaultData = {\n                    value: 1,\n                    identifier: (refModel.weights.length === 0)\n                        ? 'WEIGHT'\n                        : qtiTestHelper.getIdentifier('WEIGHT', qtiTestHelper.extractIdentifiers(refModel))\n                };\n                e.preventDefault();\n\n                $weightList.append(weightTpl(defaultData));\n                $weightList.trigger('add.internalbinder'); // trigger model update\n\n                $view.groupValidator();\n            });\n        }\n    }\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    function listenActionState (){\n\n        $('.itemrefs').each(function(){\n            actions.movable($('.itemref', $(this)), 'itemref', '.actions');\n        });\n\n        $(document)\n            .on('delete', function(e){\n                var $parent;\n                var $target = $(e.target);\n                if($target.hasClass('itemref')){\n                    $parent = $target.parents('.itemrefs');\n                    actions.disable($parent.find('.itemref'), '.actions');\n                }\n            })\n            .on('add change undo.deleter deleted.deleter', '.itemrefs',  function(e){\n                var $parent;\n                var $target = $(e.target);\n                if($target.hasClass('itemref') || $target.hasClass('itemrefs')){\n                    $parent = $('.itemref', $target.hasClass('itemrefs') ? $target : $target.parents('.itemrefs'));\n                    actions.enable($parent, '.actions');\n                    actions.movable($parent, 'itemref', '.actions');\n                }\n            });\n    }\n\n    /**\n     * The itemrefView setup itemref related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/itemref\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState,\n        resize : resize\n    };\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/encoders/dom2qti',[\n    'jquery',\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/qtiElement'\n], function ($, _, qtiElementHelper) {\n    'use strict';\n\n    /**\n     * A mapping of QTI-XML node names in order to keep the camel case form\n     * @type {Object}\n     */\n    var normalizedNodes = {\n        feedbackblock: 'feedbackBlock',\n        outcomeidentifier: 'outcomeIdentifier',\n        showhide: 'showHide'\n    };\n\n    /**\n     * Get the list of objects attributes to encode\n     * @param {Object} object\n     * @returns {Array}\n     */\n    function getAttributes(object) {\n        return _.omit(object, [\n            'qti-type',\n            'content',\n            'xmlBase',\n            'lang',\n            'label'\n        ]);\n    }\n\n    /**\n     * Encode object's properties to xml/html string attributes\n     * @param {Object} attributes\n     * @returns {String}\n     */\n    function attrToStr(attributes) {\n        return _.reduce(attributes, function (acc, value, key) {\n            if (_.isNumber(value) || (_.isString(value) && !_.isEmpty(value))) {\n                return acc + ' ' + key + '=\"' + value + '\" ';\n            }\n            return acc;\n        }, '');\n    }\n\n    /**\n     * Ensures the nodeName has a normalized form:\n     * - standard HTML tags are in lower case\n     * - QTI-XML tags are in the right form\n     * @param {String} nodeName\n     * @returns {String}\n     */\n    function normalizeNodeName(nodeName) {\n        var normalized = nodeName.toLocaleLowerCase();\n        return normalizedNodes[normalized] || normalized;\n    }\n\n    /**\n     * This encoder is used to transform DOM to JSON QTI and JSON QTI to DOM.\n     * It works now for the rubricBlocks components.\n     * @exports creator/encoders/dom2qti\n     */\n    return {\n\n        /**\n         * Encode an object to a dom string\n         * @param {Object} modelValue\n         * @returns {String}\n         */\n        encode: function (modelValue) {\n            var self = this;\n\n            if (_.isArray(modelValue)) {\n                return _.reduce(modelValue, function (result, value) {\n                    return result + self.encode(value);\n                }, '');\n            } else if (_.isObject(modelValue) && modelValue['qti-type']) {\n                if (modelValue['qti-type'] === 'textRun') {\n                    return modelValue.content;\n                }\n                var startTag = '<' + modelValue['qti-type'] + attrToStr(getAttributes(modelValue));\n                if (modelValue.content) {\n                    return startTag + '>' + self.encode(modelValue.content) + '</' + modelValue['qti-type'] + '>';\n                } else {\n                    return startTag + '/>';\n                }\n            }\n            return '' + modelValue;\n        },\n\n        /**\n         * Decode a string that represents a DOM to a QTI formatted object\n         * @param {String} nodeValue\n         * @returns {Array}\n         */\n        decode: function (nodeValue) {\n            var self = this;\n            var $nodeValue = (nodeValue instanceof $) ? nodeValue : $(nodeValue);\n            var result = [];\n\n            _.forEach($nodeValue, function (elt) {\n                var object;\n                if (elt.nodeType === 3) {\n                    if (!_.isEmpty($.trim(elt.nodeValue))) {\n                        result.push(qtiElementHelper.create('textRun', {\n                            'content': elt.nodeValue,\n                            'xmlBase': ''\n                        }));\n                    }\n                } else if (elt.nodeType === 1) {\n                    object = _.merge(qtiElementHelper.create(normalizeNodeName(elt.nodeName), {\n                        'id': '',\n                        'class': '',\n                        'xmlBase': '',\n                        'lang': '',\n                        'label': ''\n                    }),\n                    _.transform(elt.attributes, function (acc, value) {\n                        if (value.nodeName) {\n                            acc[normalizeNodeName(value.nodeName)] = value.nodeValue;\n                        }\n                    }));\n                    if (elt.childNodes.length > 0) {\n                        object.content = self.decode(elt.childNodes);\n                    }\n                    result.push(object);\n                }\n            });\n            return result;\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/ckConfigurator',['ui/ckeditor/ckConfigurator', 'mathJax'], function(ckConfigurator, mathJax) {\n    'use strict';\n\n    /**\n     * Generate a configuration object for CKEDITOR\n     *\n     * @param editor instance of ckeditor\n     * @param toolbarType block | inline | flow | qtiBlock | qtiInline | qtiFlow | reset to get back to normal\n     * @param {Object} [options] - is based on the CKEDITOR config object with some additional sugar\n     *        Note that it's here you need to add parameters for the resource manager.\n     *        Some options are not covered in http://docs.ckeditor.com/#!/api/CKEDITOR.config\n     * @param [options.dtdOverrides] - @see dtdOverrides which pre-defines them\n     * @param {Object} [options.positionedPlugins] - @see ckConfig.positionedPlugins\n     * @param {Boolean} [options.qtiImage] - enables the qtiImage plugin\n     * @param {Boolean} [options.qtiInclude] - enables the qtiInclude plugin\n     * @param {Boolean} [options.underline] - enables the underline plugin\n     * @param {Boolean} [options.mathJax] - enables the mathJax plugin\n     *\n     * @see http://docs.ckeditor.com/#!/api/CKEDITOR.config\n     */\n    var getConfig = function(editor, toolbarType, options){\n        options = options || {};\n\n        options.underline = true;\n\n        return ckConfigurator.getConfig(editor, toolbarType, options);\n    };\n\n    return {\n        getConfig : getConfig\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/rubricblock',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'ui/dialog/alert',\n    'util/namespace',\n    'taoQtiTest/controller/creator/views/actions',\n    'helpers',\n    'ckeditor',\n    'taoQtiTest/controller/creator/encoders/dom2qti',\n    'taoQtiTest/controller/creator/helpers/ckConfigurator',\n    'taoQtiTest/controller/creator/helpers/qtiElement'\n], function ($, _, __, hider, dialogAlert, namespaceHelper, actions, helpers, ckeditor, Dom2QtiEncoder, ckConfigurator, qtiElementHelper) { // qtiClasses, creatorRenderer, XmlRenderer, simpleParser){\n    'use strict';\n\n    //compute ckeditor config only once\n    var ckConfig = ckConfigurator.getConfig(ckeditor, 'qtiBlock');\n\n    function filterPlugin(plugin) {\n        return _.contains(['taoqtiimage', 'taoqtimedia', 'taoqtimaths', 'taoqtiinclude'], plugin);\n    }\n\n    ckConfig.plugins = _.reject(ckConfig.plugins.split(','), filterPlugin).join(',');\n    ckConfig.extraPlugins = _.reject(ckConfig.extraPlugins.split(','), filterPlugin).join(',');\n\n    /**\n     * The rubriclockView setup RB related components and behavior\n     *\n     * @exports taoQtiTest/controller/creator/views/rubricblock\n     */\n    return {\n        /**\n         * Set up a rubric block: init action behaviors. Called for each one.\n         *\n         * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n         * @param {Object} rubricModel - the rubric block data\n         * @param {jQueryElement} $rubricBlock - the rubric block to set up\n         */\n        setUp: function setUp(modelOverseer, rubricModel, $rubricBlock) {\n            //we need to synchronize the ck elt with an hidden elt that has data-binding\n            var $rubricBlockContent = $('.rubricblock-content', $rubricBlock);\n            var syncRubricBlockContent = _.debounce(editorToModel, 100);\n            var editor;\n\n            /**\n             * Bind a listener only related to this rubric.\n             * @param {jQuery} $el\n             * @param {String} eventName\n             * @param {Function} cb\n             * @returns {jQuery}\n             */\n            function bindEvent($el, eventName, cb) {\n                eventName = namespaceHelper.namespaceAll(eventName, rubricModel.uid);\n                return $el.off(eventName).on(eventName, cb);\n            }\n\n            /**\n             * Ensures an html content is wrapped by a container tag.\n             * @param {String} html\n             * @returns {String}\n             */\n            function ensureWrap(html) {\n                html = (html || '').trim();\n                if (html.charAt(0) !== '<' || html.charAt(html.length - 1) !== '>') {\n                    html = '<div>' + html + '</div>';\n                }\n                if ($(html).length > 1) {\n                    html = '<div>' + html + '</div>';\n                }\n                return html;\n            }\n\n            /**\n             * Forwards the editor content into the model\n             */\n            function editorToModel() {\n                var rubric = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock', 'content');\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\n                var content = Dom2QtiEncoder.decode(ensureWrap($rubricBlockContent.html()));\n\n                if (wrapper) {\n                    wrapper.content = content;\n                } else {\n                    rubric.content = content;\n                }\n            }\n\n            /**\n             * Forwards the model content into the editor\n             */\n            function modelToEditor() {\n                var rubric = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock', 'content');\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\n                var content = wrapper ? wrapper.content : rubric.content;\n                var html = ensureWrap(Dom2QtiEncoder.encode(content));\n                $rubricBlockContent.html(html);\n            }\n\n            /**\n             * Wrap/unwrap the rubric block in a feedback according to the user selection\n             * @param {Object} feedback\n             * @returns {Boolean}\n             */\n            function updateFeedback(feedback) {\n                var activated = feedback && feedback.activated;\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\n\n                if (activated) {\n                    // wrap the actual content into a feedbackBlock if needed\n                    if (!wrapper) {\n                        rubricModel.content = [qtiElementHelper.create('div', {\n                            content: [qtiElementHelper.create('feedbackBlock', {\n                                outcomeIdentifier: feedback.outcome,\n                                identifier: feedback.matchValue,\n                                content: rubricModel.content\n                            })]\n                        })];\n                    } else {\n                        wrapper.outcomeIdentifier = feedback.outcome;\n                        wrapper.identifier = feedback.matchValue;\n                    }\n                    modelToEditor();\n                } else {\n                    // remove the feedbackBlock wrapper, just keep the actual content\n                    if (wrapper) {\n                        rubricModel.content = wrapper.content;\n                        modelToEditor();\n                    }\n                }\n\n                return activated;\n            }\n\n            /**\n             * Perform some binding once the property view is created\n             * @private\n             * @param {propView} propView - the view object\n             */\n            function propHandler(propView) {\n                var $view = propView.getView();\n                var $feedbackOutcomeLine = $('.rubric-feedback-outcome', $view);\n                var $feedbackMatchLine = $('.rubric-feedback-match-value', $view);\n                var $feedbackOutcome = $('[name=feedback-outcome]', $view);\n                var $feedbackActivated = $('[name=activated]', $view);\n\n                // toggle the feedback panel\n                function changeFeedback(activated) {\n                    hider.toggle($feedbackOutcomeLine, activated);\n                    hider.toggle($feedbackMatchLine, activated);\n                }\n\n                // should be called when the properties panel is removed\n                function removePropHandler() {\n                    rubricModel.feedback = {};\n                    if (propView !== null) {\n                        propView.destroy();\n                    }\n                }\n\n                // take care of changes in the properties view\n                function changeHandler(e, changedModel) {\n                    if (e.namespace === 'binder' && changedModel['qti-type'] === 'rubricBlock') {\n                        changeFeedback(updateFeedback(changedModel.feedback));\n                    }\n                }\n\n                // update the list of outcomes the feedback can target\n                function updateOutcomes() {\n                    var activated = rubricModel.feedback && rubricModel.feedback.activated;\n                    // build the list of outcomes in a way select2 can understand\n                    var outcomes = _.map(modelOverseer.getOutcomesNames(), function(name) {\n                        return {\n                            id: name,\n                            text: name\n                        };\n                    });\n\n                    // create/update the select field\n                    $feedbackOutcome.select2({\n                        minimumResultsForSearch: -1,\n                        width: '100%',\n                        data: outcomes\n                    });\n\n                    // update the UI to reflect the data\n                    if (!activated) {\n                        $feedbackActivated.removeAttr('checked');\n                    }\n                    changeFeedback(activated);\n                }\n\n                $('[name=type]', $view).select2({\n                    minimumResultsForSearch: -1,\n                    width: '100%'\n                });\n\n                $view.on('change.binder', changeHandler);\n                bindEvent($rubricBlock.parents('.testpart'), 'delete', removePropHandler);\n                bindEvent($rubricBlock.parents('.section'), 'delete', removePropHandler);\n                bindEvent($rubricBlock, 'delete', removePropHandler);\n                bindEvent($rubricBlock, 'outcome-removed', function() {\n                    $feedbackOutcome.val('');\n                    updateOutcomes();\n                });\n                bindEvent($rubricBlock, 'outcome-updated', function() {\n                    updateFeedback(rubricModel.feedback);\n                    updateOutcomes();\n                });\n\n                changeFeedback(rubricModel.feedback);\n                updateOutcomes();\n                rbViews($view);\n            }\n\n            /**\n             * Set up the views select box\n             * @private\n             * @param {jQueryElement} $propContainer - the element container\n             */\n            function rbViews($propContainer) {\n                var $select = $('[name=view]', $propContainer);\n\n                bindEvent($select.select2({'width': '100%'}), \"select2-removed\", function () {\n                    if ($select.select2('val').length === 0) {\n                        $select.select2('val', [1]);\n                    }\n                });\n\n                if ($select.select2('val').length === 0) {\n                    $select.select2('val', [1]);\n                }\n            }\n\n            rubricModel.orderIndex = rubricModel.index + 1;\n            rubricModel.uid = _.uniqueId('rb');\n            rubricModel.feedback = {\n                activated: !!qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content'),\n                outcome: qtiElementHelper.lookupProperty(rubricModel, 'rubricBlock.div.feedbackBlock.outcomeIdentifier', 'content'),\n                matchValue: qtiElementHelper.lookupProperty(rubricModel, 'rubricBlock.div.feedbackBlock.identifier', 'content')\n            };\n\n            modelOverseer\n                .before('scoring-write.' + rubricModel.uid, function() {\n                    var feedbackOutcome = rubricModel.feedback && rubricModel.feedback.outcome;\n                    if (feedbackOutcome && _.indexOf(modelOverseer.getOutcomesNames(), feedbackOutcome) < 0) {\n                        // the targeted outcome has been removed, so remove the feedback\n                        modelOverseer.changedRubricBlock = (modelOverseer.changedRubricBlock || 0) + 1;\n                        rubricModel.feedback.activated = false;\n                        rubricModel.feedback.outcome = '';\n                        updateFeedback(rubricModel.feedback);\n                        $rubricBlock.trigger('outcome-removed');\n                    } else {\n                        // the tageted outcome is still here, just notify the properties panel to update the list\n                        $rubricBlock.trigger('outcome-updated');\n                    }\n                })\n                .on('scoring-write.' + rubricModel.uid, function() {\n                    // will notify the user of any removed feedbacks\n                    if (modelOverseer.changedRubricBlock) {\n                        /** @todo: provide a way to cancel changes */\n                        dialogAlert(__('Some rubric blocks have been updated to reflect the changes in the list of outcomes.'));\n                        modelOverseer.changedRubricBlock = 0;\n                    }\n                });\n\n            actions.properties($rubricBlock, 'rubricblock', rubricModel, propHandler);\n\n            modelToEditor();\n\n            editor = ckeditor.inline($rubricBlockContent[0], ckConfig);\n            editor.on('change', function () {\n                syncRubricBlockContent();\n            });\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\ndefine('taoQtiTest/controller/creator/helpers/sectionBlueprints',[\n    'lodash',\n    'i18n',\n    'core/errorHandler'\n], function (_, __, errorHandler){\n\n    'use strict';\n\n    var _ns = '.sectionBlueprint';\n\n\n    /**\n     * Set an array of categories to the section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {string} blueprint\n     * @returns {undefined}\n     */\n    function setBlueprint(model, blueprint){\n        model.blueprint = blueprint;\n    }\n\n    /**\n     * Get the categories assign to the section model, infered by its interal itemRefs\n     *\n     * @param {string} getUrl\n     * @param {object} model\n     * @returns {object}\n     */\n    function getBlueprint(getUrl, model){\n\n        return $.ajax({\n            url: getUrl,\n            type: 'GET',\n            data: {\n                section: model.identifier\n            },\n            dataType: 'json'\n\n        })\n        .fail(function () {\n            errorHandler.throw(_ns, 'invalid tool config format');\n        });\n\n    }\n\n    return {\n        setBlueprint : setBlueprint,\n        getBlueprint : getBlueprint\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/section',[\n    'jquery',\n    'lodash',\n    'uri',\n    'i18n',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/itemref',\n    'taoQtiTest/controller/creator/views/rubricblock',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/helpers/categorySelector',\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\n    'taoQtiTest/controller/creator/helpers/sectionBlueprints'\n],\nfunction(\n    $,\n    _,\n    uri,\n    __,\n    actions,\n    itemRefView,\n    rubricBlockView,\n    templates,\n    qtiTestHelper,\n    categorySelectorFactory,\n    sectionCategory,\n    sectionBlueprint\n){\n    'use strict';\n\n    /**\n     * Set up a section: init action behaviors. Called for each section.\n     *\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     * @param {Object} sectionModel - the data model to bind to the test section\n     * @param {jQueryElement} $section - the section to set up\n     */\n    function setUp (modelOverseer, sectionModel, $section){\n\n        var $actionContainer = $('h2', $section);\n        var config = modelOverseer.getConfig();\n\n        if(!_.isEmpty(config.routes.blueprintsById)){\n            sectionModel.hasBlueprint = true;\n        }\n        actions.properties($actionContainer, 'section', sectionModel, propHandler);\n        actions.move($actionContainer, 'sections', 'section');\n        itemRefs();\n        acceptItemRefs();\n        rubricBlocks();\n        addRubricBlock();\n\n        //trigger for the case the section is added an a selection is ongoing\n\n        /**\n         * Perform some binding once the property view is create\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            var $title;\n            var $view = propView.getView();\n\n            //enable/disable selection\n            var $selectionSwitcher = $('[name=section-enable-selection]', $view);\n            var $selectionSelect = $('[name=section-select]', $view);\n            var $selectionWithRep = $('[name=section-with-replacement]', $view);\n\n            var switchSelection = function switchSelection(){\n                if($selectionSwitcher.prop('checked') === true){\n                    $selectionSelect.incrementer('enable');\n                    $selectionWithRep.removeClass('disabled');\n                } else {\n                    $selectionSelect.incrementer('disable');\n                    $selectionWithRep.addClass('disabled');\n                }\n            };\n            $selectionSwitcher.on('change', switchSelection);\n            $selectionSwitcher.on('change', function updateModel(){\n                if(!$selectionSwitcher.prop('checked')){\n                    $selectionSelect.val(0);\n                    $selectionWithRep.prop('checked', false);\n                    delete sectionModel.selection;\n                }\n            });\n\n            $selectionSwitcher.prop('checked', !!sectionModel.selection).trigger('change');\n\n            //listen for databinder change to update the test part title\n            $title =  $('[data-bind=title]', $section);\n            $view.on('change.binder', function(e){\n                if(e.namespace === 'binder' && sectionModel['qti-type'] === 'assessmentSection'){\n                    $title.text(sectionModel.title);\n                }\n            });\n\n            $section.parents('.testpart').on('deleted.deleter', removePropHandler);\n            $section.on('deleted.deleter', removePropHandler);\n\n            //section level category configuration\n            categoriesProperty($view);\n\n            if(typeof sectionModel.hasBlueprint !== 'undefined'){\n                blueprintProperty($view);\n            }\n\n            function removePropHandler(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the item refs that already belongs to the section\n         * @private\n         */\n        function itemRefs(){\n\n            if(!sectionModel.sectionParts){\n                sectionModel.sectionParts = [];\n            }\n            $('.itemref', $section).each(function(){\n                var $itemRef = $(this);\n                var index = $itemRef.data('bind-index');\n                if(!sectionModel.sectionParts[index]){\n                    sectionModel.sectionParts[index] = {};\n                }\n\n                itemRefView.setUp(modelOverseer, sectionModel.sectionParts[index], $itemRef);\n                $itemRef.find('.title').text(\n                    config.labels[uri.encode($itemRef.data('uri'))]\n                );\n            });\n        }\n\n        /**\n         * Make the section to accept the selected items\n         * @private\n         * @fires modelOverseer#item-add\n         */\n        function acceptItemRefs(){\n            var $selected;\n            var $itemsPanel     = $('.test-creator-items .item-selection');\n\n            //the item selector trigger a select event\n            $itemsPanel.on('itemselect.creator', function(e, selection){\n\n                var $placeholder = $('.itemref-placeholder', $section);\n                var $placeholders = $('.itemref-placeholder');\n\n                if(_.size(selection) > 0){\n                    $placeholder.show().off('click').on('click', function(){\n\n                        //prepare the item data\n                        var categories,\n                            defaultItemData = {};\n\n                        if(sectionModel.itemSessionControl && !_.isUndefined(sectionModel.itemSessionControl.maxAttempts)){\n\n                            //for a matter of consistency, the itemRef will \"inherit\" the itemSessionControl configuration from its parent section\n                            defaultItemData.itemSessionControl = _.clone(sectionModel.itemSessionControl);\n                        }\n\n                        //the itemRef should also \"inherit\" the categories set at the item level\n                        categories = sectionCategory.getCategories(sectionModel);\n                        defaultItemData.categories = _.clone(categories.propagated) || [];\n\n                        _.forEach(selection, function(item){\n                            var itemData = _.defaults({\n                                href        : item.uri,\n                                label       : item.label,\n                                'qti-type'  : 'assessmentItemRef'\n                            }, defaultItemData);\n\n                            if(_.isArray(item.categories)){\n                                itemData.categories = item.categories.concat(itemData.categories);\n                            }\n\n                            addItemRef($('.itemrefs', $section), null, itemData);\n                        });\n\n                        $itemsPanel.trigger('itemselected.creator');\n\n                        $placeholders.hide().off('click');\n                    });\n                } else {\n                    $placeholders.hide().off('click');\n                }\n            });\n\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n                .off('add.binder', '#' + $section.attr('id') + ' .itemrefs')\n                .on('add.binder', '#' + $section.attr('id') + ' .itemrefs', function(e, $itemRef){\n                    var index, itemRefModel;\n                    if(e.namespace === 'binder' && $itemRef.hasClass('itemref')){\n                        index = $itemRef.data('bind-index');\n                        itemRefModel = sectionModel.sectionParts[index];\n\n                        //initialize the new item ref\n                        itemRefView.setUp(modelOverseer, itemRefModel, $itemRef);\n\n                        /**\n                         * @event modelOverseer#item-add\n                         * @param {Object} itemRefModel\n                         */\n                        modelOverseer.trigger('item-add', itemRefModel);\n                    }\n                });\n        }\n\n        /**\n         * Add a new item ref to the section\n         * @param {jQueryElement} $refList - the element to add the item to\n         * @param {Number} [index] - the position of the item to add\n         * @param {Object} [itemData] - the data to bind to the new item ref\n         */\n        function addItemRef($refList, index, itemData){\n            var $itemRef;\n            var $items = $refList.children('li');\n            index = index || $items.length;\n            itemData.identifier = qtiTestHelper.getIdentifier('item', config.identifiers);\n            itemData.index = index + 1;\n            $itemRef = $(templates.itemref(itemData));\n            if(index > 0){\n                $itemRef.insertAfter($items.eq(index - 1));\n            } else {\n                $itemRef.appendTo($refList);\n            }\n            $refList.trigger('add', [$itemRef, itemData]);\n        }\n\n\n        /**\n         * Set up the rubric blocks that already belongs to the section\n         * @private\n         */\n        function rubricBlocks () {\n            if(!sectionModel.rubricBlocks){\n                sectionModel.rubricBlocks = [];\n            }\n            $('.rubricblock', $section).each(function(){\n                var $rubricBlock = $(this);\n                var index = $rubricBlock.data('bind-index');\n                if(!sectionModel.rubricBlocks[index]){\n                    sectionModel.rubricBlocks[index] = {};\n                }\n\n                rubricBlockView.setUp(modelOverseer, sectionModel.rubricBlocks[index], $rubricBlock);\n            });\n\n            //opens the rubric blocks section if they are there.\n            if(sectionModel.rubricBlocks.length > 0){\n                $('.rub-toggler', $section).trigger('click');\n            }\n        }\n\n        /**\n         * Enable to add new rubric block\n         * @private\n         * @fires modelOverseer#rubric-add\n         */\n        function addRubricBlock () {\n\n            $('.rublock-adder', $section).adder({\n                target: $('.rubricblocks', $section),\n                content : templates.rubricblock,\n                templateData : function(cb){\n                    cb({\n                        'qti-type' : 'rubricBlock',\n                        index  : $('.rubricblock', $section).length,\n                        content : [],\n                        views : [1]\n                    });\n                }\n            });\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document).on('add.binder', '#' + $section.attr('id') + ' .rubricblocks', function(e, $rubricBlock){\n                var index, rubricModel;\n                if(e.namespace === 'binder' && $rubricBlock.hasClass('rubricblock')){\n                    index = $rubricBlock.data('bind-index');\n                    rubricModel = sectionModel.rubricBlocks[index];\n\n                    $('.rubricblock-binding', $rubricBlock).html('<p>&nbsp;</p>');\n                    rubricBlockView.setUp(modelOverseer, rubricModel, $rubricBlock);\n\n                    /**\n                     * @event modelOverseer#rubric-add\n                     * @param {Object} rubricModel\n                     */\n                    modelOverseer.trigger('rubric-add', rubricModel);\n                }\n            });\n        }\n\n        /**\n         * Set up the category property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         * @fires modelOverseer#category-change\n         */\n        function categoriesProperty($view){\n            var categories = sectionCategory.getCategories(sectionModel),\n                categorySelector = categorySelectorFactory($view);\n\n            categorySelector.createForm(categories.all);\n            updateFormState(categorySelector);\n\n            $view.on('propopen.propview', function(){\n                updateFormState(categorySelector);\n            });\n\n            categorySelector.on('category-change', function(selected, indeterminate) {\n                sectionCategory.setCategories(sectionModel, selected, indeterminate);\n\n                modelOverseer.trigger('category-change');\n            });\n        }\n\n        function updateFormState(categorySelector) {\n            var categories = sectionCategory.getCategories(sectionModel);\n            categorySelector.updateFormState(categories.propagated, categories.partial);\n        }\n\n        /**\n         * Set up the Blueprint property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function blueprintProperty($view){\n            var $select = $('[name=section-blueprint]', $view);\n            $select.select2({\n                ajax:{\n                    url: config.routes.blueprintsById,\n                    dataType: 'json',\n                    delay: 350,\n                    method: 'POST',\n                    data: function (params) {\n                        return {\n                            identifier: params // search term\n                        };\n                    },\n                    results: function (data) {\n                        return data;\n                    }\n                },\n                minimumInputLength: 3,\n                width: '100%',\n                multiple : false,\n                allowClear: true,\n                placeholder: __('Select a blueprint'),\n                formatNoMatches : function(){\n                    return __('Enter a blueprint');\n                },\n                maximumInputLength : 32\n            }).on('change', function(e){\n                setBlueprint(e.val);\n            });\n\n            initBlueprint();\n            $view.on('propopen.propview', function(){\n                initBlueprint();\n            });\n\n            /**\n             * Start the blueprint editing\n             * @private\n             */\n            function initBlueprint(){\n\n                if(typeof sectionModel.blueprint === 'undefined'){\n                    sectionBlueprint\n                        .getBlueprint(config.routes.blueprintByTestSection, sectionModel)\n                        .success(function(data){\n                            if(!_.isEmpty(data)){\n                                if(sectionModel.blueprint !== \"\"){\n                                    sectionModel.blueprint = data.uri;\n                                    $select.select2('data', {id: data.uri, text: data.text});\n                                    $select.trigger('change');\n                                }\n                            }\n                        });\n                }\n            }\n\n            /**\n             * save the categories into the model\n             * @private\n             */\n            function setBlueprint(blueprint){\n                sectionBlueprint.setBlueprint(sectionModel, blueprint);\n            }\n\n        }\n    }\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    function listenActionState (){\n\n        var $sections;\n\n        $('.sections').each(function(){\n            $sections = $('.section', $(this));\n\n            actions.removable($sections, 'h2');\n            actions.movable($sections, 'section', 'h2');\n        });\n\n        $(document)\n            .on('delete', function(e){\n                var $parent;\n                var $target = $(e.target);\n                if($target.hasClass('section')){\n                    $parent = $target.parents('.sections');\n                    actions.disable($parent.find('.section'), 'h2');\n                }\n            })\n            .on('add change undo.deleter deleted.deleter', function(e){\n                var $target = $(e.target);\n                if($target.hasClass('section') || $target.hasClass('sections')){\n                    $sections = $('.section', $target.hasClass('sections') ? $target : $target.parents('.sections'));\n                    actions.removable($sections, 'h2');\n                    actions.movable($sections, 'section', 'h2');\n                }\n            })\n            .on('open.toggler', '.rub-toggler', function(e){\n                if(e.namespace === 'toggler'){\n                    $(this).parents('h2').addClass('active');\n                }\n            })\n            .on('close.toggler', '.rub-toggler', function(e){\n                if(e.namespace === 'toggler'){\n                    $(this).parents('h2').removeClass('active');\n                }\n            });\n    }\n\n    /**\n     * The sectionView setup section related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/section\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/testpart',[\n    'jquery', 'lodash',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/section',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest'],\nfunction($, _, actions, sectionView, templates, qtiTestHelper){\n    'use strict';\n\n    /**\n     * Set up a test part: init action behaviors. Called for each test part.\n     *\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     * @param {Object} partModel - the data model to bind to the test part\n     * @param {jQueryElement} $testPart - the testpart container to set up\n     */\n    function setUp (modelOverseer, partModel, $testPart){\n        var $actionContainer = $('h1', $testPart);\n        var config = modelOverseer.getConfig();\n\n        //run setup methods\n        actions.properties($actionContainer, 'testpart', partModel, propHandler);\n        actions.move($actionContainer, 'testparts', 'testpart');\n        sections();\n        addSection();\n\n        /**\n         * Perform some binding once the property view is created\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            var $view = propView.getView();\n\n            //listen for databinder change to update the test part title\n            var $identifier =  $('[data-bind=identifier]', $testPart);\n            $view.on('change.binder', function(e, model){\n                if(e.namespace === 'binder' && model['qti-type'] === 'testPart'){\n                    $identifier.text(model.identifier);\n                }\n            });\n\n            //destroy it when it's testpart is removed\n            $testPart.on('delete', function(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            });\n        }\n\n        /**\n         * Set up sections that already belongs to the test part\n         * @private\n         */\n        function sections(){\n            if(!partModel.assessmentSections){\n                partModel.assessmentSections = [];\n            }\n            $('.section', $testPart).each(function(){\n                var $section = $(this);\n                var index = $section.data('bind-index');\n                if(!partModel.assessmentSections[index]){\n                    partModel.assessmentSections[index] = {};\n                }\n\n                sectionView.setUp(modelOverseer, partModel.assessmentSections[index], $section);\n            });\n        }\n\n        /**\n         * Enable to add new sections\n         * @private\n         * @fires modelOverseer#section-add\n         */\n        function addSection(){\n            $('.section-adder', $testPart).adder({\n                target: $('.sections', $testPart),\n                content : templates.section,\n                templateData : function(cb){\n\n                    //create a new section model object to be bound to the template\n                    var sectionIndex = $('.section', $testPart).length;\n                    cb({\n                        'qti-type' : 'assessmentSection',\n                        identifier : qtiTestHelper.getIdentifier('assessmentSection',  config.identifiers),\n                        title : 'Section ' + (sectionIndex + 1),\n                        index : 0,\n                        sectionParts : []\n                    });\n                }\n            });\n\n\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n                .off('add.binder', '#' + $testPart.attr('id') + ' .sections')\n                .on ('add.binder', '#' + $testPart.attr('id') + ' .sections', function(e, $section){\n                    var index, sectionModel;\n                    if(e.namespace === 'binder' && $section.hasClass('section')){\n                        index = $section.data('bind-index');\n                        sectionModel = partModel.assessmentSections[index];\n\n                        //initialize the new test part\n                        sectionView.setUp(modelOverseer, sectionModel, $section);\n\n                        /**\n                         * @event modelOverseer#section-add\n                         * @param {Object} sectionModel\n                         */\n                        modelOverseer.trigger('section-add', sectionModel);\n                    }\n                });\n        }\n    }\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    function listenActionState (){\n\n        var $testParts = $('.testpart');\n\n        actions.removable($testParts, 'h1');\n        actions.movable($testParts, 'testpart', 'h1');\n\n        $('.testparts')\n            .on('delete', function(e){\n                var $target = $(e.target);\n                if($target.hasClass('testpart')){\n                    actions.disable($('.testpart'), 'h1');\n                }\n            })\n            .on('add change undo.deleter deleted.deleter', function(e){\n                var $target = $(e.target);\n\n                if($target.hasClass('testpart') || $target.hasClass('testparts')){\n\n                    //refresh\n                    $testParts = $('.testpart');\n\n                    //check state\n                    actions.removable($testParts, 'h1');\n                    actions.movable($testParts, 'testpart', 'h1');\n                }\n            });\n    }\n\n    /**\n     * The testPartView setup testpart related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/testpart\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/test',[\n    'jquery', 'lodash', 'i18n', 'ui/hider', 'ui/feedback',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/testpart',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest'\n],\nfunction($, _, __, hider, feedback, actions, testPartView, templates, qtiTestHelper){\n    'use strict';\n\n    /**\n     * The TestView setup test related components and behavior\n     *\n     * @exports taoQtiTest/controller/creator/views/test\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     */\n    function testView (modelOverseer) {\n        var testModel = modelOverseer.getModel();\n        var config = modelOverseer.getConfig();\n\n        actions.properties($('.test-creator-test > h1'), 'test', testModel, propHandler);\n        testParts();\n        addTestPart();\n\n        /**\n         * set up the existing test part views\n         * @private\n         */\n        function testParts () {\n            if(!testModel.testParts){\n                testModel.testParts = [];\n            }\n            $('.testpart').each(function(){\n                var $testPart = $(this);\n                var index = $testPart.data('bind-index');\n                if(!testModel.testParts[index]){\n                    testModel.testParts[index] = {};\n                }\n\n                testPartView.setUp(modelOverseer, testModel.testParts[index], $testPart);\n            });\n        }\n\n        /**\n         * Perform some binding once the property view is created\n         * @private\n         * @param {propView} propView - the view object\n         * @fires modelOverseer#scoring-change\n         */\n        function propHandler(propView) {\n\n            var $view = propView.getView();\n            var $categoryScoreLine = $('.test-category-score', $view);\n            var $cutScoreLine = $('.test-cut-score', $view);\n            var $weightIdentifierLine = $('.test-weight-identifier', $view);\n            var $descriptions = $('.test-outcome-processing-description', $view);\n            var $generate = $('[data-action=\"generate-outcomes\"]', $view);\n            var $title = $('.test-creator-test > h1 [data-bind=title]');\n            var scoringState = JSON.stringify(testModel.scoring);\n\n            function changeScoring(scoring) {\n                var noOptions = !!scoring && ['none', 'custom'].indexOf(scoring.outcomeProcessing) === -1;\n                var newScoringState = JSON.stringify(scoring);\n\n                hider.toggle($cutScoreLine, !!scoring && scoring.outcomeProcessing === 'cut');\n                hider.toggle($categoryScoreLine, noOptions);\n                hider.toggle($weightIdentifierLine, noOptions);\n                hider.hide($descriptions);\n                hider.show($descriptions.filter('[data-key=\"' + scoring.outcomeProcessing + '\"]'));\n\n                if (scoringState !== newScoringState) {\n                    /**\n                     * @event modelOverseer#scoring-change\n                     * @param {Object} testModel\n                     */\n                    modelOverseer.trigger('scoring-change', testModel);\n                }\n                scoringState = newScoringState;\n            }\n\n            function updateOutcomes() {\n                var $panel = $('.outcome-declarations', $view);\n\n                $panel.html(templates.outcomes(modelOverseer.getOutcomesList()));\n            }\n\n            $('[name=test-outcome-processing]', $view).select2({\n                minimumResultsForSearch: -1,\n                width: '100%'\n            });\n\n            $generate.on('click', function() {\n                $generate.addClass('disabled').attr('disabled', true);\n                modelOverseer\n                    .on('scoring-write.regenerate', function() {\n                        modelOverseer.off('scoring-write.regenerate');\n                        feedback().success(__('The outcomes have been regenerated!')).on('destroy', function() {\n                            $generate.removeClass('disabled').removeAttr('disabled');\n                        });\n                    })\n                    .trigger('scoring-change');\n            });\n\n            $view.on('change.binder', function (e, model) {\n                if (e.namespace === 'binder' && model['qti-type'] === 'assessmentTest') {\n                    changeScoring(model.scoring);\n\n                    //update the test part title when the databinder has changed it\n                    $title.text(model.title);\n                }\n            });\n\n            modelOverseer.on('scoring-write', updateOutcomes);\n\n            changeScoring(testModel.scoring);\n            updateOutcomes();\n        }\n\n        /**\n         * Enable to add new test parts\n         * @private\n         * @fires modelOverseer#part-add\n         */\n        function addTestPart () {\n\n            $('.testpart-adder').adder({\n                target: $('.testparts'),\n                content : templates.testpart,\n                templateData : function(cb){\n\n                    //create an new testPart model object to be bound to the template\n                    var testPartIndex = $('.testpart').length;\n                    cb({\n                        'qti-type' : 'testPart',\n                        identifier : qtiTestHelper.getIdentifier('testPart', config.identifiers),\n                        index  : testPartIndex,\n                        navigationMode : 0,\n                        submissionMode : 0,\n                        assessmentSections : [{\n                            'qti-type' : 'assessmentSection',\n                            identifier : qtiTestHelper.getIdentifier('assessmentSection',  config.identifiers),\n                            title : 'Section 1',\n                            index : 0,\n                            sectionParts : []\n                        }]\n                    });\n                }\n            });\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n                .off('add.binder', '.testparts')\n                .on ('add.binder', '.testparts', function(e, $testPart, added){\n                    var partModel;\n                    if(e.namespace === 'binder' && $testPart.hasClass('testpart')){\n                        partModel = testModel.testParts[added.index];\n\n                        //initialize the new test part\n                        testPartView.setUp(modelOverseer, partModel, $testPart);\n\n                        /**\n                         * @event modelOverseer#part-add\n                         * @param {Object} partModel\n                         */\n                        modelOverseer.trigger('part-add', partModel);\n                    }\n                });\n        }\n    }\n\n    return testView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to generate outcomes processing rules for a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/processingRule',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/outcomeValidator',\n    'taoQtiTest/controller/creator/helpers/qtiElement',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality'\n], function (_, outcomeValidator, qtiElementHelper, baseTypeHelper, cardinalityHelper) {\n    'use strict';\n\n    var processingRuleHelper = {\n        /**\n         * Creates a basic processing rule\n         * @param {String} type\n         * @param {String} [identifier]\n         * @param {Array|Object} [expression]\n         * @returns {Object}\n         * @throws {TypeError} if the type is empty or is not a string\n         * @throws {TypeError} if the identifier is not valid\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        create: function create(type, identifier, expression) {\n            var processingRule = qtiElementHelper.create(type, identifier && validateIdentifier(identifier));\n\n            if (expression) {\n                processingRuleHelper.setExpression(processingRule, expression);\n            }\n\n            return processingRule;\n        },\n\n        /**\n         * Sets an expression to a processing rule\n         * @param {Object} processingRule\n         * @param {Object|Array} expression\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        setExpression: function setExpression(processingRule, expression) {\n            if (processingRule) {\n                if (_.isArray(expression)) {\n                    if (processingRule.expression) {\n                        processingRule.expression = null;\n                    }\n                    processingRule.expressions = validateOutcomeList(expression);\n                } else {\n                    if (processingRule.expressions) {\n                        processingRule.expressions = null;\n                    }\n                    if (expression) {\n                        processingRule.expression = validateOutcome(expression);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Adds an expression to a processing rule\n         * @param {Object} processingRule\n         * @param {Object|Array} expression\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        addExpression: function addExpression(processingRule, expression) {\n            if (processingRule && expression) {\n                if (processingRule.expression) {\n                    processingRule.expressions = forceArray(processingRule.expression);\n                    processingRule.expression = null;\n                }\n\n                if (_.isArray(expression)) {\n                    processingRule.expressions = forceArray(processingRule.expressions).concat(validateOutcomeList(expression));\n                } else {\n                    if (processingRule.expressions) {\n                        processingRule.expressions.push(expression);\n                    } else {\n                        processingRule.expression = validateOutcome(expression);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Creates a `setOutcomeValue` rule\n         * @param {String} identifier\n         * @param {Object|Array} [expression]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        setOutcomeValue: function setOutcomeValue(identifier, expression) {\n            return processingRuleHelper.create('setOutcomeValue',  validateIdentifier(identifier), expression);\n        },\n\n        /**\n         * Creates a `gte` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        gte: function gte(left, right) {\n            return binaryOperator('gte', left, right);\n        },\n\n        /**\n         * Creates a `lte` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        lte: function lte(left, right) {\n            return binaryOperator('lte', left, right);\n        },\n\n        /**\n         * Creates a `divide` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        divide: function divide(left, right) {\n            return binaryOperator('divide', left, right);\n        },\n\n        /**\n         * Creates a `sum` rule\n         * @param {Object|Array} terms\n         * @returns {Object}\n         * @throws {TypeError} if the terms are not valid QTI elements\n         */\n        sum: function sum(terms) {\n            var processingRule = processingRuleHelper.create('sum', null, forceArray(terms));\n\n            processingRule.minOperands = 1;\n            processingRule.maxOperands = -1;\n            processingRule.acceptedCardinalities = [cardinalityHelper.SINGLE, cardinalityHelper.MULTIPLE, cardinalityHelper.ORDERED];\n            processingRule.acceptedBaseTypes = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `testVariables` rule\n         * @param {String} identifier\n         * @param {String|Number} [type]\n         * @param {String} weightIdentifier\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        testVariables: function testVariables(identifier, type, weightIdentifier, includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('testVariables');\n\n            processingRule.variableIdentifier = validateIdentifier(identifier);\n            processingRule.baseType = baseTypeHelper.getValid(type);\n            addWeightIdentifier(processingRule, weightIdentifier);\n            addSectionIdentifier(processingRule, '');\n            addCategories(processingRule, includeCategories, excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `outcomeMaximum` rule\n         * @param {String} identifier\n         * @param {String} weightIdentifier\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        outcomeMaximum: function outcomeMaximum(identifier, weightIdentifier, includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('outcomeMaximum');\n\n            processingRule.outcomeIdentifier = validateIdentifier(identifier);\n\n            addWeightIdentifier(processingRule, weightIdentifier);\n            addSectionIdentifier(processingRule, '');\n            addCategories(processingRule, includeCategories, excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `numberPresented` rule\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         */\n        numberPresented: function numberPresented(includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('numberPresented');\n\n            addSectionIdentifier(processingRule, '');\n            addCategories(processingRule, includeCategories, excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `baseValue` rule\n         * @param {*} [value]\n         * @param {String|Number} [type]\n         * @returns {Object}\n         */\n        baseValue: function baseValue(value, type) {\n            var processingRule = processingRuleHelper.create('baseValue');\n\n            processingRule.baseType = baseTypeHelper.getValid(type, baseTypeHelper.FLOAT);\n            processingRule.value = baseTypeHelper.getValue(processingRule.baseType, value);\n\n            return processingRule;\n        },\n\n        /**\n         ** Creates a `variable` rule\n         * @param {String} identifier\n         * @param {String} [weightIdentifier]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is not valid\n         * @throws {TypeError} if the weight identifier is not valid\n         */\n        variable: function variable(identifier, weightIdentifier) {\n            var processingRule = processingRuleHelper.create('variable', validateIdentifier(identifier));\n\n            addWeightIdentifier(processingRule, weightIdentifier);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `match` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        match: function match(left, right) {\n            return binaryOperator('match', left, right, cardinalityHelper.SAME, cardinalityHelper.SAME);\n        },\n\n        /**\n         * Creates a `isNull` rule\n         * @param {Object|Array} expression - the operand\n         * @returns {Object}\n         * @throws {TypeError} if the operand is not valid QTI element\n         */\n        isNull: function isNull(expression) {\n            return unaryOperator('isNull', expression, baseTypeHelper.ANY, cardinalityHelper.ANY);\n        },\n\n        /**\n         * Creates a `outcomeCondition` rule\n         * @param {Object} outcomeIf\n         * @param {Object} outcomeElse\n         * @returns {Object}\n         * @throws {TypeError} if the outcomeIf and outcomeElse operands are not valid QTI elements\n         */\n        outcomeCondition: function outcomeCondition(outcomeIf, outcomeElse) {\n            var processingRule = processingRuleHelper.create('outcomeCondition');\n\n            if (!outcomeValidator.validateOutcome(outcomeIf, false, 'outcomeIf')) {\n                throw new TypeError('You must provide a valid outcomeIf element!');\n            }\n\n            if (outcomeElse && !outcomeValidator.validateOutcome(outcomeElse, false, 'outcomeElse')) {\n                throw new TypeError('You must provide a valid outcomeElse element!');\n            }\n\n            processingRule.outcomeIf = outcomeIf;\n            processingRule.outcomeElseIfs = [];\n\n            if (outcomeElse) {\n                processingRule.outcomeElse = outcomeElse;\n            }\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `outcomeIf` rule\n         * @param {Object} expression\n         * @param {Object|Object[]} instruction\n         * @returns {Object}\n         * @throws {TypeError} if the expression and instruction operands are not valid QTI elements\n         */\n        outcomeIf: function outcomeIf(expression, instruction) {\n            var processingRule = processingRuleHelper.create('outcomeIf');\n\n            if (!_.isArray(instruction)) {\n                instruction = [instruction];\n            }\n\n            processingRule.expression = validateOutcome(expression);\n            processingRule.outcomeRules = validateOutcomeList(instruction);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `outcomeElse` rule\n         * @param {Object|Object[]} instruction\n         * @returns {Object}\n         * @throws {TypeError} if the instruction is not a valid QTI element\n         */\n        outcomeElse: function outcomeElse(instruction) {\n            var processingRule = processingRuleHelper.create('outcomeElse');\n\n            if (!_.isArray(instruction)) {\n                instruction = [instruction];\n            }\n\n            processingRule.outcomeRules = validateOutcomeList(instruction);\n\n            return processingRule;\n        }\n\n    };\n\n    /**\n     * Creates a unary operator rule\n     * @param {String} type - The rule type\n     * @param {Object|Array} expression - The operand\n     * @param {Number|Array} [baseType] - The accepted base type\n     * @param {Number|Array} [cardinality] - The accepted cardinality\n     * @returns {Object}\n     * @throws {TypeError} if the type is empty or is not a string\n     * @throws {TypeError} if the operand is not valid QTI element\n     */\n    function unaryOperator(type, expression, baseType, cardinality) {\n        var processingRule = processingRuleHelper.create(type, null, [expression]);\n\n        processingRule.minOperands = 1;\n        processingRule.maxOperands = 1;\n\n        addTypeAndCardinality(processingRule, baseType, cardinality);\n\n        return processingRule;\n    }\n\n    /**\n     * Creates a binary operator rule\n     * @param {String} type - The rule type\n     * @param {Object|Array} left - The left operand\n     * @param {Object|Array} right - The right operand\n     * @param {Number|Array} [baseType] - The accepted base type\n     * @param {Number|Array} [cardinality] - The accepted cardinality\n     * @returns {Object}\n     * @throws {TypeError} if the type is empty or is not a string\n     * @throws {TypeError} if the left and right operands are not valid QTI elements\n     */\n    function binaryOperator(type, left, right, baseType, cardinality) {\n        var processingRule = processingRuleHelper.create(type, null, [left, right]);\n\n        processingRule.minOperands = 2;\n        processingRule.maxOperands = 2;\n\n        addTypeAndCardinality(processingRule, baseType, cardinality);\n\n        return processingRule;\n    }\n\n    /**\n     * Appends the base type and the cardinality on a processing rule\n     * @param {Object} processingRule\n     * @param {Number|Array} [baseType] - The accepted base type\n     * @param {Number|Array} [cardinality] - The accepted cardinality\n     * @returns {Object}\n     */\n    function addTypeAndCardinality(processingRule, baseType, cardinality) {\n        if (_.isUndefined(baseType)) {\n            baseType = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\n        }\n\n        if (_.isUndefined(cardinality)) {\n            cardinality = [cardinalityHelper.SINGLE];\n        }\n\n        processingRule.acceptedCardinalities = forceArray(cardinality);\n        processingRule.acceptedBaseTypes = forceArray(baseType);\n\n        return processingRule;\n    }\n\n    /**\n     * Extends a processing rule with categories\n     * @param {Object} processingRule\n     * @param {Array|String} [includeCategories]\n     * @param {Array|String} [excludeCategories]\n     * @returns {Object}\n     */\n    function addCategories(processingRule, includeCategories, excludeCategories) {\n        processingRule.includeCategories = forceArray(includeCategories);\n        processingRule.excludeCategories = forceArray(excludeCategories);\n\n        return processingRule;\n    }\n\n    /**\n     * Appends the section identifier on a processing rule\n     * @param {Object} processingRule\n     * @param {String} [sectionIdentifier]\n     * @returns {Object}\n     * @throws {TypeError} if the weight identifier is not valid\n     */\n    function addSectionIdentifier(processingRule, sectionIdentifier) {\n        if (sectionIdentifier) {\n            if (!outcomeValidator.validateIdentifier(sectionIdentifier)) {\n                throw new TypeError('You must provide a valid weight identifier!');\n            }\n            processingRule.sectionIdentifier = sectionIdentifier;\n        } else {\n            processingRule.sectionIdentifier = '';\n        }\n\n        return processingRule;\n    }\n\n    /**\n     * Appends the weight identifier on a processing rule\n     * @param {Object} processingRule\n     * @param {String} [weightIdentifier]\n     * @returns {Object}\n     * @throws {TypeError} if the weight identifier is not valid\n     */\n    function addWeightIdentifier(processingRule, weightIdentifier) {\n        if (weightIdentifier) {\n            if (!outcomeValidator.validateIdentifier(weightIdentifier)) {\n                throw new TypeError('You must provide a valid weight identifier!');\n            }\n            processingRule.weightIdentifier = weightIdentifier;\n        } else {\n            processingRule.weightIdentifier = '';\n        }\n\n        return processingRule;\n    }\n\n    /**\n     * Validates an identifier\n     * @param {String} identifier\n     * @returns {String}\n     * @throws {TypeError} if the identifier is not valid\n     */\n    function validateIdentifier(identifier) {\n        if (!outcomeValidator.validateIdentifier(identifier)) {\n            throw new TypeError('You must provide a valid identifier!');\n        }\n        return identifier;\n    }\n\n    /**\n     * Validates an outcome\n     * @param {Object} outcome\n     * @returns {Object}\n     * @throws {TypeError} if the outcome is not valid\n     */\n    function validateOutcome(outcome) {\n        if (!outcomeValidator.validateOutcome(outcome)) {\n            throw new TypeError('You must provide a valid QTI element!');\n        }\n        return outcome;\n    }\n\n    /**\n     * Validates a list of outcomes\n     * @param {Array} outcomes\n     * @returns {Array}\n     * @throws {TypeError} if an outcome is not valid\n     */\n    function validateOutcomeList(outcomes) {\n        if (!outcomeValidator.validateOutcomes(outcomes)) {\n            throw new TypeError('You must provide a valid list of QTI elements!');\n        }\n        return outcomes;\n    }\n\n    /**\n     * Ensures a value is an array\n     * @param {*} value\n     * @returns {Array}\n     */\n    function forceArray(value) {\n        if (!value) {\n            value = [];\n        }\n        if (!_.isArray(value)) {\n            value = [value];\n        }\n        return value;\n    }\n\n    return processingRuleHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to manage the score processing declaration in a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/scoring',[\n    'lodash',\n    'i18n',\n    'core/format',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/processingRule'\n], function (_, __, format, baseTypeHelper, outcomeHelper, processingRuleHelper) {\n    'use strict';\n\n    /**\n     * The default cut score\n     * @todo Move this to a config file\n     * @type {Number}\n     */\n    var defaultCutScore = 0.5;\n\n    /**\n     * The name of the variable containing the score\n     * @type {String}\n     */\n    var defaultScoreIdentifier = 'SCORE';\n\n    /**\n     * The list of supported processing modes, indexed by mode identifier\n     * @type {Object}\n     */\n    var processingModes = {\n        none: {\n            key: 'none',\n            label: __('None'),\n            description: __('No outcome processing. Erase the existing rules, if any.')\n        },\n        custom: {\n            key: 'custom',\n            label: __('Custom'),\n            description: __('Custom outcome processing. No changes will be made to the existing rules.')\n        },\n        total: {\n            key: 'total',\n            label: __('Total score'),\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will take place in the SCORE_TOTAL outcome.')\n                         + ' ' +\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the SCORE_xxx outcome, where xxx is the name of the category.')\n        },\n        cut: {\n            key: 'cut',\n            label: __('Cut score'),\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed and divided by the sum of MAX SCORE, the result will be compared to the cut score (or pass ratio), then the PASS_TOTAL outcome will be set accordingly.')\n                         + ' ' +\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the PASS_xxx outcome, where xxx is the name of the category.')\n        }\n    };\n\n    /**\n     * The list of recipes to generate the outcomes\n     * @type {Object}\n     */\n    var outcomesRecipes = {\n        none: {\n            key: 'none',\n            clean: true\n        },\n        custom: {\n            key: 'custom',\n            clean: false\n        },\n        total: {\n            key: 'total',\n            signature: /^SCORE_([a-zA-Z][a-zA-Z0-9_\\.-]*)$/,\n            outcomes: [{\n                writer: 'total',\n                identifier: 'SCORE_TOTAL',\n                weighted: 'SCORE_TOTAL_WEIGHTED',\n                categoryIdentifier: 'SCORE_CATEGORY_%s',\n                categoryWeighted: 'SCORE_CATEGORY_WEIGHTED_%s'\n            }, {\n                writer: 'max',\n                identifier: 'SCORE_TOTAL_MAX',\n                weighted: 'SCORE_TOTAL_MAX_WEIGHTED',\n                categoryIdentifier: 'SCORE_CATEGORY_MAX_%s',\n                categoryWeighted: 'SCORE_CATEGORY_WEIGHTED_MAX_%s'\n            }, {\n                writer: 'ratio',\n                identifier: 'SCORE_RATIO',\n                weighted: 'SCORE_RATIO_WEIGHTED',\n                scoreIdentifier: {\n                    total : 'SCORE_TOTAL',\n                    max : 'SCORE_TOTAL_MAX'\n                },\n                scoreWeighted : {\n                    total : 'SCORE_TOTAL_WEIGHTED',\n                    max : 'SCORE_TOTAL_MAX_WEIGHTED',\n                },\n            }],\n            clean: true\n        },\n        cut: {\n            key: 'cut',\n            include: 'total',\n            signature: /^PASS_([a-zA-Z][a-zA-Z0-9_\\.-]*)$/,\n            outcomes: [{\n                writer: 'cut',\n                identifier: 'PASS_ALL',\n                feedback: 'PASS_ALL_RENDERING',\n                feedbackOk: \"passed\",\n                feedbackFailed: \"not_passed\",\n                categoryIdentifier: 'PASS_CATEGORY_%s',\n                categoryFeedback: 'PASS_CATEGORY_%s_RENDERING'\n            }],\n            clean: true\n        }\n    };\n\n    /**\n     * List of writers that provide the outcomes for each score processing mode.\n     * @type {Object}\n     */\n    var outcomesWriters = {\n        /**\n         * Generates the outcomes that compute the \"Score ratio\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         */\n        ratio : function writerRatio(descriptor, scoring, outcomes){\n            addRatioOutcomes(outcomes, descriptor.identifier, descriptor.scoreIdentifier.total, descriptor.scoreIdentifier.max);\n            if(scoring.weightIdentifier){\n                //add weighted ratio outcome only when the scoring outcome processing rule uses a weight\n                addRatioOutcomes(outcomes, descriptor.weighted, descriptor.scoreWeighted.total, descriptor.scoreWeighted.max);\n            }\n        },\n\n        /**\n         * Generates the outcomes that compute the \"Total score\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         * @param {Array} [categories]\n         */\n        total: function writerTotal(descriptor, scoring, outcomes, categories) {\n            // create the outcome and the rule that process the overall score\n            addTotalScoreOutcomes(outcomes, scoring, descriptor.identifier, false);\n            if (descriptor.weighted && scoring.weightIdentifier) {\n                addTotalScoreOutcomes(outcomes, scoring, descriptor.weighted, true);\n            }\n\n            // create an outcome per categories\n            if (descriptor.categoryIdentifier && categories) {\n                _.forEach(categories, function (category) {\n                    addTotalScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryIdentifier), false, category);\n                    if (descriptor.categoryWeighted && scoring.weightIdentifier) {\n                        addTotalScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryWeighted), true, category);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Generates the outcomes that compute the \"Max score\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         * @param {Array} [categories]\n         */\n        max: function writerMax(descriptor, scoring, outcomes, categories) {\n            // create the outcome and the rule that process the maximum overall score\n            addMaxScoreOutcomes(outcomes, scoring, descriptor.identifier, false);\n            if (descriptor.weighted && scoring.weightIdentifier) {\n                addMaxScoreOutcomes(outcomes, scoring, descriptor.weighted, true);\n            }\n\n            // create an outcome per categories\n            if (descriptor.categoryIdentifier && categories) {\n                _.forEach(categories, function (category) {\n                    addMaxScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryIdentifier), false, category);\n                    if (descriptor.categoryWeighted && scoring.weightIdentifier) {\n                        addMaxScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryWeighted), true, category);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Generates the outcomes that compute the \"Cut score\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         * @param {Array} [categories]\n         */\n        cut: function writerCut(descriptor, scoring, outcomes, categories) {\n            var cutScore = scoring.cutScore;\n            var totalModeOutcomes = outcomesRecipes.total.outcomes;\n            var total = _.find(totalModeOutcomes, {writer: 'total'});\n            var max = _.find(totalModeOutcomes, {writer: 'max'});\n            var ratio = _.find(totalModeOutcomes, {writer: 'ratio'});\n            var whichOutcome = scoring.weightIdentifier ? 'weighted' : 'identifier';\n            var ratioIdentifier = ratio[whichOutcome];\n\n            // create the outcome and the rule that process the overall score\n            addGlobalCutScoreOutcomes(outcomes, descriptor.identifier, ratioIdentifier, cutScore);\n\n            // create the outcome and the rule that process the score feedback\n            if (descriptor.feedback) {\n                addFeedbackScoreOutcomes(\n                    outcomes,\n                    descriptor.feedback,\n                    descriptor.identifier,\n                    descriptor.feedbackOk,\n                    descriptor.feedbackFailed\n                );\n            }\n\n            // create an outcome per category\n            if (descriptor.categoryIdentifier && categories) {\n                _.forEach(categories, function (category) {\n                    var categoryOutcome = scoring.weightIdentifier ? 'categoryWeighted' : 'categoryIdentifier';\n                    var categoryOutcomeIdentifier = formatCategoryOutcome(category, descriptor.categoryIdentifier);\n                    var categoryScoreIdentifier = formatCategoryOutcome(category, total[categoryOutcome]);\n                    var categoryCountIdentifier = formatCategoryOutcome(category, max[categoryOutcome]);\n\n                    addCutScoreOutcomes(outcomes, categoryOutcomeIdentifier, categoryScoreIdentifier, categoryCountIdentifier, cutScore);\n\n                    if (descriptor.categoryFeedback) {\n                        addFeedbackScoreOutcomes(\n                            outcomes,\n                            formatCategoryOutcome(category, descriptor.categoryFeedback),\n                            categoryOutcomeIdentifier,\n                            descriptor.feedbackOk,\n                            descriptor.feedbackFailed\n                        );\n                    }\n                });\n            }\n\n            return outcomes;\n        }\n    };\n\n    var scoringHelper = {\n        /**\n         * Checks the test model against outcome processing mode.\n         * Initializes the scoring property accordingly.\n         *\n         * @param {modelOverseer} modelOverseer\n         * @throws {TypeError} if the modelOverseer is invalid\n         * @fires modelOverseer#scoring-init\n         * @fires modelOverseer#scoring-generate\n         * @fires modelOverseer#scoring-write\n         */\n        init: function init(modelOverseer) {\n            var model;\n\n            if (!modelOverseer || !_.isFunction(modelOverseer.getModel)) {\n                throw new TypeError(\"You must provide a valid modelOverseer\");\n            }\n\n            model = modelOverseer.getModel();\n\n            // detect the score processing mode and build the descriptor used to manage the UI\n            model.scoring = detectScoring(modelOverseer);\n\n            modelOverseer\n                .on('scoring-change category-change delete', function () {\n                    /**\n                     * Regenerates the outcomes on any significant changes.\n                     * After the outcomes have been generated a write is needed to actually apply the data.\n                     * Other component can listen to this event and eventually prevent the write to happen.\n                     * @event modelOverseer#scoring-generate\n                     * @param {Object} outcomes\n                     */\n                    modelOverseer.trigger('scoring-generate', scoringHelper.generate(modelOverseer));\n                })\n                .on('scoring-generate', function (outcomes) {\n                    outcomeHelper.replaceOutcomes(model, outcomes);\n\n                    /**\n                     * The generated outcome have just been applied on the model.\n                     * @event modelOverseer#scoring-write\n                     * @param {Object} testModel\n                     */\n                    modelOverseer.trigger('scoring-write', model);\n                })\n\n                /**\n                 * @event modelOverseer#scoring-init\n                 * @param {Object} testModel\n                 */\n                .trigger('scoring-init', model);\n        },\n\n        /**\n         * If the processing mode has been set, generates the outcomes that define the scoring.\n         *\n         * @param {modelOverseer} modelOverseer\n         * @returns {Object}\n         * @throws {TypeError} if the modelOverseer is invalid or the processing mode is unknown\n         */\n        generate: function generate(modelOverseer) {\n            var model, scoring, outcomes, outcomeRecipe, recipes, categories;\n\n            if (!modelOverseer || !_.isFunction(modelOverseer.getModel)) {\n                throw new TypeError(\"You must provide a valid modelOverseer\");\n            }\n\n            model = modelOverseer.getModel();\n            scoring = model.scoring;\n            outcomes = getOutcomes(model);\n\n            // write the score processing mode by generating the outcomes variables, but only if the mode has been set\n            if (scoring) {\n                outcomeRecipe = outcomesRecipes[scoring.outcomeProcessing];\n                if (outcomeRecipe) {\n\n                    if (outcomeRecipe.clean) {\n                        // erase the existing rules, they will be replaced by those that are defined here\n                        removeScoring(outcomes);\n                    }\n\n                    // get the recipes that define the outcomes, include sub-recipes if any\n                    recipes = getRecipes(outcomeRecipe);\n\n                    // only get the categories if requested\n                    if (handleCategories(modelOverseer)) {\n                        categories = modelOverseer.getCategories();\n                    }\n\n                    // will generate outcomes based of the defined recipe\n                    _.forEach(recipes, function(recipe) {\n                        var writer = outcomesWriters[recipe.writer];\n                        writer(recipe, scoring, outcomes, categories);\n                    });\n\n                } else {\n                    throw new Error('Unknown score processing mode: ' + scoring.outcomeProcessing);\n                }\n            }\n\n            return outcomes;\n        }\n    };\n\n    /**\n     * Creates an outcome and the rule that process the total score\n     *\n     * @param {Object} model\n     * @param {Object} scoring\n     * @param {String} identifier\n     * @param {Boolean} [weight]\n     * @param {String} [category]\n     */\n    function addTotalScoreOutcomes(model, scoring, identifier, weight, category) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.sum(\n                processingRuleHelper.testVariables(scoring.scoreIdentifier, -1, weight && scoring.weightIdentifier, category)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the maximum score\n     *\n     * @param {Object} model\n     * @param {Object} scoring\n     * @param {String} identifier\n     * @param {Boolean} [weight]\n     * @param {String} [category]\n     */\n    function addMaxScoreOutcomes(model, scoring, identifier, weight, category) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.sum(\n                processingRuleHelper.testVariables('MAXSCORE', -1, weight && scoring.weightIdentifier, category)\n            )\n        );\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Create an outcome and the rule that process the score ratio\n     *\n     * @param model\n     * @param identifier\n     * @param identifierTotal\n     * @param identifierMax\n     */\n    function addRatioOutcomes(model, identifier, identifierTotal, identifierMax) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\n        var outcomeCondition = processingRuleHelper.outcomeCondition(\n            processingRuleHelper.outcomeIf(\n                processingRuleHelper.isNull(\n                    processingRuleHelper.variable(identifierMax)\n                ),\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.baseValue(0, baseTypeHelper.FLOAT)\n                )\n            ),\n            processingRuleHelper.outcomeElse(\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.divide(\n                        processingRuleHelper.variable(identifierTotal),\n                        processingRuleHelper.variable(identifierMax)\n                    )\n                )\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome);\n        outcomeHelper.addOutcomeProcessing(model, outcomeCondition);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the cut score by category\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String} scoreIdentifier\n     * @param {String} countIdentifier\n     * @param {String|Number} cutScore\n     */\n    function addCutScoreOutcomes(model, identifier, scoreIdentifier, countIdentifier, cutScore) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.BOOLEAN);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.gte(\n                processingRuleHelper.divide(\n                    processingRuleHelper.variable(scoreIdentifier),\n                    processingRuleHelper.variable(countIdentifier)\n                ),\n                processingRuleHelper.baseValue(cutScore, baseTypeHelper.FLOAT)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the global cut score\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String} scoreIdentifier\n     * @param {String} countIdentifier\n     * @param {String|Number} cutScore\n     */\n    function addGlobalCutScoreOutcomes(model, identifier, ratioIdentifier, cutScore) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.BOOLEAN);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.gte(\n                processingRuleHelper.variable(ratioIdentifier),\n                processingRuleHelper.baseValue(cutScore, baseTypeHelper.FLOAT)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the score feedback\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String} variable\n     * @param {String} passed\n     * @param {String} notPassed\n     */\n    function addFeedbackScoreOutcomes(model, identifier, variable, passed, notPassed) {\n        var type = baseTypeHelper.IDENTIFIER;\n        var outcome = outcomeHelper.createOutcome(identifier, type);\n        var processingRule = processingRuleHelper.outcomeCondition(\n            processingRuleHelper.outcomeIf(\n                processingRuleHelper.match(\n                    processingRuleHelper.variable(variable),\n                    processingRuleHelper.baseValue(true, baseTypeHelper.BOOLEAN)\n                ),\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.baseValue(passed, type)\n                )\n            ),\n            processingRuleHelper.outcomeElse(\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.baseValue(notPassed, type)\n                )\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome);\n        outcomeHelper.addOutcomeProcessing(model, processingRule);\n    }\n\n    /**\n     * Formats the identifier of a category outcome\n     * @param {String} category\n     * @param {String} template\n     * @returns {String}\n     */\n    function formatCategoryOutcome(category, template) {\n        return format(template, category.toUpperCase());\n    }\n\n    /**\n     * Checks whether an identifier belongs to a particular recipe\n     * @param {String} identifier\n     * @param {Object} recipe\n     * @param {Boolean} [onlyCategories]\n     * @returns {Boolean}\n     */\n    function belongToRecipe(identifier, recipe, onlyCategories) {\n        var match = false;\n        if (recipe.signature && recipe.signature.test(identifier)) {\n            match = true;\n            if (onlyCategories) {\n                _.forEach(recipe.outcomes, function(outcome) {\n                    if (outcome.identifier === identifier ||\n                        (outcome.weighted && outcome.weighted === identifier) ||\n                        (outcome.feedback && outcome.feedback === identifier)) {\n                        match = false;\n                        return false;\n                    }\n                });\n            }\n        }\n        return match;\n    }\n\n    /**\n     * Checks if all the outcomes are related to the recipe\n     * @param {Object} outcomeRecipe\n     * @param {Array} outcomes\n     * @param {Array} categories\n     * @returns {Boolean}\n     */\n    function matchRecipe(outcomeRecipe, outcomes, categories) {\n        var signatures = getSignatures(outcomeRecipe);\n        var match = true;\n\n        // check the outcomes definitions against the provided identifier\n        function matchRecipeOutcome(recipe, identifier) {\n            var outcomeMatch = false;\n\n            // first level, the signature must match\n            if (recipe.signature && recipe.signature.test(identifier)) {\n                _.forEach(recipe.outcomes, function(outcome) {\n                    // second level, the main identifier must match\n                    if (outcome.identifier !== identifier &&\n                        (!outcome.weighted || (outcome.weighted && outcome.weighted !== identifier)) &&\n                        (!outcome.feedback || (outcome.feedback && outcome.feedback !== identifier))) {\n\n                        if (categories) {\n                            // third level, a category must match\n                            _.forEach(categories, function(category) {\n                                if (outcome.categoryIdentifier &&\n                                    identifier === formatCategoryOutcome(category, outcome.categoryIdentifier)) {\n                                    outcomeMatch = true;\n                                } else if (outcome.categoryWeighted &&\n                                    identifier === formatCategoryOutcome(category, outcome.categoryWeighted)) {\n                                    outcomeMatch = true;\n                                } else if (outcome.categoryFeedback &&\n                                    identifier === formatCategoryOutcome(category, outcome.categoryFeedback)) {\n                                    outcomeMatch = true;\n                                }\n                                // found something?\n                                if (outcomeMatch) {\n                                    return false;\n                                }\n                            });\n                        }\n                    } else {\n                        outcomeMatch = true;\n                    }\n\n                    // found something?\n                    if (outcomeMatch) {\n                        return false;\n                    }\n                });\n            }\n\n            if (!outcomeMatch && recipe.include) {\n                outcomeMatch = matchRecipeOutcome(outcomesRecipes[recipe.include], identifier);\n            }\n\n            return outcomeMatch;\n        }\n\n        // only check the outcomes that are related to the scoring mode\n        _.forEach(outcomes, function(identifier) {\n            var signatureMatch = false;\n            _.forEach(signatures, function(signature) {\n                if (signature.test(identifier)) {\n                    signatureMatch = true;\n                    return false;\n                }\n            });\n\n            if (signatureMatch) {\n                match = matchRecipeOutcome(outcomeRecipe, identifier);\n\n                if (!match) {\n                    return false;\n                }\n            }\n        });\n\n        return match;\n    }\n\n    /**\n     * Gets all the outcomes signatures related to a scoring mode\n     * @param {Object} recipe\n     * @returns {Array}\n     */\n    function getSignatures(recipe) {\n        var signatures = [];\n\n        // list the signatures for each processing mode, taking care of includes\n        while(recipe) {\n            if (recipe.signature) {\n                signatures.push(recipe.signature);\n            }\n            recipe = recipe.include && outcomesRecipes[recipe.include];\n        }\n\n        return signatures;\n    }\n\n    /**\n     * Gets all the outcomes recipes related to a scoring mode\n     * @param {Object} recipe\n     * @returns {Array}\n     */\n    function getRecipes(recipe) {\n        var descriptors = [];\n\n        // get the recipes that define the outcomes, include sub-recipes if any\n        while(recipe) {\n            if (recipe.outcomes) {\n                descriptors = [].concat(recipe.outcomes, descriptors);\n            }\n            recipe = recipe.include && outcomesRecipes[recipe.include];\n        }\n\n        return descriptors;\n    }\n\n    /**\n     * Checks if an outcome is related to the outcomes recipe,\n     * then returns the recipe descriptor.\n     * @param {Object|String} outcome\n     * @returns {Object}\n     */\n    function getOutcomesRecipe(outcome) {\n        var identifier = outcomeHelper.getOutcomeIdentifier(outcome);\n        var mode = null;\n        _.forEach(outcomesRecipes, function (processingRecipe) {\n            if (belongToRecipe(identifier, processingRecipe)) {\n                mode = processingRecipe;\n                return false;\n            }\n        });\n        return mode;\n    }\n\n    /**\n     * Gets the score processing modes from a list of outcomes\n     * @param {Array} outcomes\n     * @returns {Array}\n     */\n    function listScoringModes(outcomes) {\n        var modes = {};\n        _.forEach(outcomes, function (outcome) {\n            var recipe = getOutcomesRecipe(outcome);\n            if (recipe) {\n                modes[recipe.key] = true;\n            }\n        });\n        return _.keys(modes);\n    }\n\n    /**\n     * Checks whether the categories have to be taken into account\n     * @param {modelOverseer} modelOverseer\n     * @returns {Boolean}\n     */\n    function handleCategories(modelOverseer) {\n        var model = modelOverseer.getModel();\n        return !!(model.scoring && model.scoring.categoryScore);\n    }\n\n    /**\n     * Checks if the test model contains outcomes for categories\n     * @param {Object} model\n     * @returns {Boolean}\n     */\n    function hasCategoryOutcome(model) {\n        var categoryOutcomes = false;\n        _.forEach(outcomeHelper.getOutcomeDeclarations(model), function (outcomeDeclaration) {\n            var identifier = outcomeHelper.getOutcomeIdentifier(outcomeDeclaration);\n            _.forEach(outcomesRecipes, function (processingRecipe) {\n                if (belongToRecipe(identifier, processingRecipe, true)) {\n                    categoryOutcomes = true;\n                    return false;\n                }\n            });\n        });\n        return categoryOutcomes;\n    }\n\n    /**\n     * Gets the defined cut score from the outcome rules\n     * @param {Object} model\n     * @returns {Number}\n     */\n    function getCutScore(model) {\n        var values = _(outcomeHelper.getOutcomeProcessingRules(model)).map(function (outcome) {\n            return outcomeHelper.getProcessingRuleProperty(outcome, 'setOutcomeValue.gte.baseValue.value');\n        }).compact().uniq().value();\n        if (_.isEmpty(values)) {\n            values = [defaultCutScore];\n        }\n        return Math.max(0, _.max(values));\n    }\n\n    /**\n     * Gets the defined weight identifier from the outcome rules\n     * @param {Object} model\n     * @returns {String}\n     */\n    function getWeightIdentifier(model) {\n        var values = [];\n        outcomeHelper.eachOutcomeProcessingRuleExpressions(model, function (processingRule) {\n            if (processingRule['qti-type'] === 'testVariables' && processingRule.weightIdentifier) {\n                values.push(processingRule.weightIdentifier);\n            }\n        });\n        values = _(values).compact().uniq().value();\n\n        return values.length ? values[0] : '';\n    }\n\n    /**\n     * Detects the outcome processing mode for the scoring\n     * @param {modelOverseer} modelOverseer\n     * @returns {String}\n     */\n    function getOutcomeProcessing(modelOverseer) {\n        var model = modelOverseer.getModel();\n        var outcomeDeclarations = outcomeHelper.getOutcomeDeclarations(model);\n        var outcomeRules = outcomeHelper.getOutcomeProcessingRules(model);\n\n        // walk through each outcome declaration, and tries to identify the score processing mode\n        var declarations = listScoringModes(outcomeDeclarations);\n        var processing = listScoringModes(outcomeRules);\n        var diff = _.difference(declarations, processing);\n        var count = _.size(declarations);\n        var included;\n\n        // default fallback, applied when several modes are detected at the same time\n        var outcomeProcessing = 'custom';\n\n        // set the score processing mode with respect to the found outcomes\n        if (count === _.size(processing)) {\n            if (!count) {\n                // no mode detected, set the mode to none\n                outcomeProcessing = 'none';\n            } else if (_.isEmpty(diff)) {\n                if (count > 1) {\n                    // several modes detected, try to reduce the list by detecting includes\n                    included = [];\n                    _.forEach(declarations, function(mode) {\n                        if (outcomesRecipes[mode] && outcomesRecipes[mode].include) {\n                            included.push(outcomesRecipes[mode].include);\n                        }\n                    });\n                    processing = _.difference(processing, included);\n                    count = _.size(processing);\n                }\n\n                if (count === 1) {\n                    // single mode detected, keep the last got key\n                    outcomeProcessing = processing[0];\n\n                    // check if all outcomes are strictly related to the detected mode\n                    if (!matchRecipe(outcomesRecipes[outcomeProcessing], modelOverseer.getOutcomesNames(), modelOverseer.getCategories())) {\n                        outcomeProcessing = 'custom';\n                    }\n                }\n            }\n        }\n\n        return outcomeProcessing;\n    }\n\n    /**\n     * Detects the score processing mode and builds the descriptor used to manage the UI.\n     * @param {modelOverseer} modelOverseer\n     * @returns {Object}\n     */\n    function detectScoring(modelOverseer) {\n        var model = modelOverseer.getModel();\n        return {\n            modes: processingModes,\n            scoreIdentifier: defaultScoreIdentifier,\n            weightIdentifier: getWeightIdentifier(model),\n            cutScore: getCutScore(model),\n            categoryScore: hasCategoryOutcome(model),\n            outcomeProcessing: getOutcomeProcessing(modelOverseer)\n        };\n    }\n\n    /**\n     * Removes all scoring outcomes\n     * @param {Object} model\n     */\n    function removeScoring(model) {\n        var scoringOutcomes = _.indexBy(outcomeHelper.listOutcomes(model, getOutcomesRecipe), function (outcome) {\n            return outcome;\n        });\n\n        outcomeHelper.removeOutcomes(model, function(outcome) {\n            var match = false;\n\n            function browseExpressions(processingRule) {\n                if (_.isArray(processingRule)) {\n                    _.forEach(processingRule, browseExpressions);\n                } else if (processingRule) {\n                    if (scoringOutcomes[outcomeHelper.getOutcomeIdentifier(processingRule)]) {\n                        match = true;\n                    }\n\n                    if (!match && processingRule.expression) {\n                        browseExpressions(processingRule.expression);\n                    }\n                    if (!match && processingRule.expressions) {\n                        browseExpressions(processingRule.expressions);\n                    }\n                    if (!match && processingRule.outcomeRules) {\n                        browseExpressions(processingRule.outcomeRules);\n                    }\n                    if (!match && processingRule.outcomeIf) {\n                        browseExpressions(processingRule.outcomeIf);\n                    }\n                    if (!match && processingRule.outcomeElse) {\n                        browseExpressions(processingRule.outcomeElse);\n                    }\n                }\n            }\n\n            if (outcome['qti-type'] === 'outcomeCondition') {\n                browseExpressions(outcome);\n            } else {\n                match = !!scoringOutcomes[outcomeHelper.getOutcomeIdentifier(outcome)];\n            }\n            return match;\n        });\n    }\n\n    /**\n     * Gets a copy of the list of outcomes, provides the same structure as the model\n     * @param {Object} model\n     * @returns {Object}\n     */\n    function getOutcomes(model) {\n        return {\n            outcomeDeclarations: [].concat(outcomeHelper.getOutcomeDeclarations(model)),\n            outcomeProcessing: {\n                outcomeRules: [].concat(outcomeHelper.getOutcomeProcessingRules(model))\n            }\n        };\n    }\n\n    return scoringHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/creator',[\n    'module',\n    'jquery',\n    'lodash',\n    'helpers',\n    'i18n',\n    'html5-history-api',\n    'ui/feedback',\n    'core/databindcontroller',\n    'taoQtiTest/controller/creator/modelOverseer',\n    'taoQtiTest/controller/creator/views/item',\n    'taoQtiTest/controller/creator/views/test',\n    'taoQtiTest/controller/creator/views/testpart',\n    'taoQtiTest/controller/creator/views/section',\n    'taoQtiTest/controller/creator/views/itemref',\n    'taoQtiTest/controller/creator/encoders/dom2qti',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/helpers/scoring',\n    'taoQtiTest/controller/creator/helpers/categorySelector',\n    'core/validator/validators'\n], function(\n    module,\n    $,\n    _,\n    helpers,\n    __,\n    history,\n    feedback,\n    DataBindController,\n    modelOverseerFactory,\n    itemView, testView,\n    testPartView,\n    sectionView,\n    itemrefView,\n    Dom2QtiEncoder,\n    templates,\n    qtiTestHelper,\n    scoringHelper,\n    categorySelector,\n    validators\n    ){\n\n    'use strict';\n\n    /**\n     * The test creator controller is the main entry point\n     * and orchestrates data retrieval and view/components loading.\n     * @exports creator/controller\n     */\n    var Controller = {\n\n        routes : {},\n\n        identifiers: [],\n\n         /**\n          * Start the controller, main entry method.\n          * @public\n          * @param {Object} options\n          * @param {Object} options.labels - the list of item's labels to give to the ItemView\n          * @param {Object} options.routes - action's urls\n          * @param {Object} options.categoriesPresets - predefined category that can be set at the item or section level\n          */\n        start : function(options){\n            var self = this;\n            var $container = $('#test-creator');\n            var $saver = $('#saver');\n            var binder, binderOptions, modelOverseer;\n\n            self.identifiers = [];\n\n            options = _.merge(module.config(), options || {});\n            options.routes = options.routes || {};\n            options.labels = options.labels || {};\n            options.categoriesPresets = options.categoriesPresets || {};\n\n            categorySelector.setPresets(options.categoriesPresets);\n\n            //back button\n            $('#authoringBack').on('click', function(e){\n                e.preventDefault();\n\n                if (history) {\n                    history.back();\n                }\n            });\n\n            //set up the ItemView, give it a configured loadItems ref\n            itemView($('.test-creator-items .item-selection', $container));\n\n            // forwards some binder events to the model overseer\n            $container.on('change.binder delete.binder', function (e, model) {\n                if (e.namespace === 'binder' && model) {\n                    modelOverseer.trigger(e.type, model);\n                }\n            });\n\n            //Data Binding options\n            binderOptions = _.merge(options.routes, {\n                filters : {\n                    'isItemRef' : function(value){\n                        return qtiTestHelper.filterQtiType(value, 'assessmentItemRef');\n                    },\n                    'isSection' : function(value){\n                        return qtiTestHelper.filterQtiType(value, 'assessmentSection');\n                    }\n                },\n                encoders : {\n                    'dom2qti' : Dom2QtiEncoder\n                },\n                templates : templates,\n                beforeSave : function(model){\n                    //ensure the qti-type is present\n                    qtiTestHelper.addMissingQtiType(model);\n\n                    //apply consolidation rules\n                    qtiTestHelper.consolidateModel(model);\n\n                    //validate the model\n                    try {\n                        qtiTestHelper.validateModel(model);\n                    } catch(err) {\n                        $saver.attr('disabled', false).removeClass('disabled');\n                        feedback().error(__('The test has not been saved.') + ' ' + err);\n                        return false;\n                    }\n                    return true;\n                }\n            });\n\n            //set up the databinder\n            binder = DataBindController\n                .takeControl($container, binderOptions)\n                .get(function(model){\n                    //extract ids\n                    self.identifiers = qtiTestHelper.extractIdentifiers(model);\n\n                    // the model must be wrapped in order to share more (events, internal states, and more)\n                    modelOverseer = modelOverseerFactory(model, {\n                        uri : options.uri,\n                        identifiers : self.identifiers,\n                        labels : options.labels,\n                        routes : options.routes\n                    });\n\n                    //detect the scoring mode\n                    scoringHelper.init(modelOverseer);\n\n                    //register validators\n                    validators.register('idFormat', qtiTestHelper.idFormatValidator());\n                    validators.register('testIdFormat', qtiTestHelper.testidFormatValidator());\n                    validators.register('testIdAvailable', qtiTestHelper.idAvailableValidator(self.identifiers), true);\n\n                    //once model is loaded, we set up the test view\n                    testView(modelOverseer);\n\n                    //listen for changes to update available actions\n                    testPartView.listenActionState();\n                    sectionView.listenActionState();\n                    itemrefView.listenActionState();\n                    itemrefView.resize();\n\n                    $(window)\n                        .off('resize.qti-test-creator')\n                        .on('resize.qti-test-creator', function(){\n                            itemrefView.resize();\n                        });\n                });\n\n            //the save button triggers binder's save action.\n            $saver.on('click', function(event){\n                event.preventDefault();\n\n                if(!$saver.hasClass('disabled')){\n                    $saver.attr('disabled', true).addClass('disabled');\n                    binder.save(function(){\n\n                        $saver.attr('disabled', false).removeClass('disabled');\n\n                        feedback().success(__('Test Saved'));\n\n                    }, function(){\n\n                        $saver.attr('disabled', false).removeClass('disabled');\n                    });\n                }\n            });\n        }\n    };\n\n    return Controller;\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n *\n */\n\n/**\n * This module allows adding extra buttons in the action bar of the test runner\n *\n */\ndefine('taoQtiTest/testRunner/actionBarHook',[\n    'jquery',\n    'lodash',\n    'core/errorHandler',\n    'core/promise'\n], function ($, _, errorHandler, Promise) {\n\n    'use strict';\n\n    /**\n     * Events namespace\n     * @type {String}\n     * @private\n     */\n    var _ns = '.actionBarHook';\n\n    /**\n     * We need to access the root document to listen for some events\n     * @type {jQuery}\n     * @private\n     */\n    var $doc = $(document);\n\n    /**\n     * List of loaded and visible hooks\n     * @type {Object}\n     * @private\n     */\n    var tools = {};\n\n    /**\n     * Flag set to true when the item is loaded\n     * @type {Boolean}\n     * @private\n     */\n    var itemIsLoaded = false;\n\n    // catch the item loaded event\n    $doc.off(_ns).on('serviceloaded' + _ns, function() {\n        itemIsLoaded = true;\n        _.forEach(tools, function(tool) {\n            triggerItemLoaded(tool);\n        });\n    });\n\n    /**\n     * Check that the toolConfig is correct\n     *\n     * @param {Object} toolconfig\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\n     * @param {Array} [toolconfig.items] - an optional list of menu items\n     * @returns {Boolean}\n     */\n    function isValidConfig(toolconfig) {\n        return !!(_.isObject(toolconfig) && toolconfig.hook);\n    }\n\n    /**\n     * Triggers the itemLoaded event inside the provided actionBar hook\n     * @param {Object} tool\n     */\n    function triggerItemLoaded(tool) {\n        if (tool && tool.itemLoaded) {\n            tool.itemLoaded();\n        }\n    }\n\n    /**\n     * Init a test runner button from its config\n     *\n     * @param {String} id\n     * @param {Object|String} toolconfig\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\n     * @param {Array} [toolconfig.items] - an optional list of menu items\n     * @param {Object} testContext - the complete state of the test\n     * @param {Object} testRunner - the test runner instance\n     * @fires ready.actionBarHook when the hook has been initialized\n     * @returns {Promise}\n     */\n    function initQtiTool($toolsContainer, id, toolconfig, testContext, testRunner) {\n\n        // the tool is always initialized before the item is loaded, so we can safely false the flag\n        itemIsLoaded = false;\n        tools[id] = null;\n\n        if (_.isString(toolconfig)) {\n            toolconfig = {\n                hook: toolconfig\n            };\n        }\n\n        return new Promise(function(resolve) {\n            if (isValidConfig(toolconfig)) {\n\n                require([toolconfig.hook], function (hook) {\n\n                    var $button;\n                    var $existingBtn;\n\n                    if (isValidHook(hook)) {\n                        //init the control\n                        hook.init(id, toolconfig, testContext, testRunner);\n\n                        //if an instance of the tool is already attached, remove it:\n                        $existingBtn = $toolsContainer.children('[data-control=\"' + id + '\"]');\n                        if ($existingBtn.length) {\n                            hook.clear($existingBtn);\n                            $existingBtn.remove();\n                        }\n\n                        //check if the tool is to be available\n                        if (hook.isVisible()) {\n                            //keep access to the tool\n                            tools[id] = hook;\n\n                            // renders the button from the config\n                            $button = hook.render();\n\n                            //only attach the button to the dom when everything is ready\n                            _appendInOrder($toolsContainer, $button);\n\n                            //ready !\n                            $button.trigger('ready' + _ns, [hook]);\n\n                            //fires the itemLoaded event if the item has already been loaded\n                            if (itemIsLoaded) {\n                                triggerItemLoaded(hook);\n                            }\n                        }\n\n                        resolve(hook);\n                    } else {\n                        errorHandler.throw(_ns, 'invalid hook format');\n                        resolve(null);\n                    }\n\n                }, function (e) {\n                    errorHandler.throw(_ns, 'the hook amd module cannot be found');\n                    resolve(null);\n                });\n\n            } else {\n                errorHandler.throw(_ns, 'invalid tool config format');\n                resolve(null);\n            }\n        });\n    }\n\n    /**\n     * Append a dom element $button to a $container in a specific order\n     * The orders are provided by data-order attribute set to the $button\n     *\n     * @param {JQuery} $container\n     * @param {JQuery} $button\n     */\n    function _appendInOrder($container, $button) {\n\n        var $after, $before;\n        var order = $button.data('order');\n\n        if ('last' === order) {\n\n            $container.append($button);\n\n        } else if ('first' === order) {\n\n            $container.prepend($button);\n\n        } else {\n\n            order = _.parseInt(order);\n            if (!_.isNaN(order)) {\n\n                $container.children('.action').each(function () {\n\n                    var $btn = $(this),\n                        _order = $btn.data('order');\n\n                    if ('last' === _order) {\n\n                        $before = $btn;\n                        $after = null;\n\n                    } else if ('first' === _order) {\n\n                        $before = null;\n                        $after = $btn;\n\n                    } else {\n\n                        _order = _.parseInt(_order);\n\n                        if (_.isNaN(_order) || _order > order) {\n                            $before = $btn;\n                            $after = null;\n                            //stops here because $container children returns the dom elements in the dom order\n                            return false;\n                        } else if (_order === order) {\n                            $after = $btn;\n                        } else if (_order < order) {\n                            $after = $btn;\n                            $before = null;\n                        }\n\n                    }\n\n                });\n\n                if ($after) {\n                    $after.after($button);\n                } else if ($before) {\n                    $before.before($button);\n                } else {\n                    $container.append($button);\n                }\n\n            } else {\n                //unordered buttons are append at the end (including when order equals 0)\n                $container.append($button);\n            }\n        }\n    }\n\n    /**\n     * Check if the hook object is valid\n     *\n     * @param {Object} hook\n     * @param {Function} hook.init\n     * @param {Function} hook.clear\n     * @param {Function} hook.isVisible\n     * @returns {Boolean}\n     */\n    function isValidHook(hook) {\n        return (_.isObject(hook) && _(['init', 'render', 'clear', 'isVisible']).reduce(function (result, method) {\n            return result && _.isFunction(hook[method]);\n        }, true));\n    }\n\n    return {\n        isValid: isValidConfig,\n        initQtiTool: initQtiTool\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/actionBarTools',[\n    'jquery',\n    'lodash',\n    'core/eventifier',\n    'core/promise',\n    'taoQtiTest/testRunner/actionBarHook'\n], function ($, _, eventifier, Promise, actionBarHook) {\n    'use strict';\n\n    /**\n     * The list of registered actionBar tools\n     * @type {Object}\n     */\n    var registeredQtiTools;\n\n    /**\n     * The list of actionBar tools instances\n     * @type {Object}\n     */\n    var qtiTools;\n\n    /**\n     * Manages the actionBar tools\n     * @type {Object}\n     */\n    var actionBarTools = {\n        /**\n         * Registers the actionBar tools\n         * @param {Object} tools\n         */\n        register : function register(tools) {\n            var registerTools = tools || {};\n\n            /**\n             * @event actionBarTools#beforeregister\n             * @param {Object} tools\n             * @param {actionBarTools} this\n             */\n            this.trigger('beforeregister', registerTools, this);\n\n            registeredQtiTools = registerTools;\n\n            /**\n             * @event actionBarTools#afterregister\n             * @param {Object} tools\n             * @param {actionBarTools} this\n             */\n            this.trigger('afterregister', registerTools, this);\n        },\n\n        /**\n         * Gets the list of registered tools\n         * @returns {Object}\n         */\n        getRegisteredTools : function getRegisteredTools() {\n            return registeredQtiTools || {};\n        },\n\n        /**\n         * Gets a particular tool config\n         * @param {String} id\n         * @returns {Object}\n         */\n        getRegistered : function getRegistered(id) {\n            return registeredQtiTools && registeredQtiTools[id];\n        },\n\n        /**\n         * Checks if a particular tool is registered\n         * @param {String} id\n         * @returns {Boolean}\n         */\n        isRegistered : function isRegistered(id) {\n            return !!(registeredQtiTools && registeredQtiTools[id]);\n        },\n\n        /**\n         * Gets a particular tool\n         * @param {String} id\n         * @returns {Object}\n         */\n        get : function get(id) {\n            return qtiTools && qtiTools[id];\n        },\n\n        /**\n         * Gets the list of tools instances\n         * @returns {Array}\n         */\n        list : function list() {\n            return _.values(qtiTools || {});\n        },\n\n        /**\n         * Renders the actionBar\n         * @param {String|jQuery|HTMLElement} container - The container in which renders the tools\n         * @param {Object} testContext - The assessment test context\n         * @param {Object} testRunner - The assessment test runner\n         * @param {Function} [callback] - An optional callback fired when all tools have been rendered\n         */\n        render : function render(container, testContext, testRunner, callback) {\n            var self = this;\n            var $container = $(container);\n            var promises = [];\n\n            /**\n             * @event actionBarTools#beforerender\n             * @param {jQuery} $container\n             * @param {Object} testContext\n             * @param {Object} testRunner\n             * @param {actionBarTools} this\n             */\n            this.trigger('beforerender', $container, testContext, testRunner, this);\n\n            _.forIn(this.getRegisteredTools(), function(toolconfig, id){\n                promises.push(actionBarHook.initQtiTool($container, id, toolconfig, testContext, testRunner));\n            });\n\n            Promise.all(promises).then(function(values) {\n                var tools = [];\n                qtiTools = {};\n\n                _.forEach(values, function(tool) {\n                    if (tool) {\n                        tools.push(tool);\n                        qtiTools[tool.getId()] = tool;\n                    }\n                });\n\n                if (_.isFunction(callback)) {\n                    callback.call(self, tools, $container, testContext, testRunner, self);\n                }\n\n                /**\n                 * @event actionBarTools#afterrender\n                 * @param {Array} tools\n                 * @param {jQuery} $container\n                 * @param {Object} testContext\n                 * @param {Object} testRunner\n                 * @param {actionBarTools} this\n                 */\n                self.trigger('afterrender', tools, $container, testContext, testRunner, self);\n            });\n        }\n    };\n\n    return eventifier(actionBarTools);\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\n  buffer += \"        <aside class=\\\"test-sidebar test-sidebar-\";\n  if (helper = helpers.region) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.region); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" flex-container-navi qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n            <div class=\\\"qti-navigator-collapsible\\\">\\n                <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n                <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n            </div>\\n\\n            <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n                <ul class=\\\"collapsible-panel plain\\\">\\n                    <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                </ul>\\n            </div>\\n\\n            <div class=\\\"qti-navigator-filters\\\">\\n                <ul class=\\\"plain clearfix\\\">\\n                    <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                        <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"</span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                        <span class=\\\"icon-unanswered qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\"></span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                        <span class=\\\"icon-flagged qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\"></span>\\n                    </li>\\n                </ul>\\n            </div>\\n\\n            <nav class=\\\"qti-navigator-tree\\\">\\n            </nav>\\n\\n            <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n                <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n                <p class=\\\"qti-navigator-message\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n                </p>\\n            </div>\\n        </aside>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, self=this, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            <span class=\\\"icon-up\\\"></span>\\n                            <span class=\\\"icon-down\\\"></span>\\n                        </span>\\n                        \";\n  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.sections)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(29, program29, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                    </li>\\n                    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n                        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n                            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                        </ul>\\n                        \";\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                                    <span class=\\\"qti-navigator-counter\\\">\";\n  if (helper = helpers.answered) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.answered); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                                </span>\\n                                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                                </ul>\\n                            </li>\\n                            \";\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                                    <li class=\\\"qti-navigator-item\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                            <span class=\\\"qti-navigator-icon icon-\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.program(21, program21, data),fn:self.program(19, program19, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\\n                                            <span class=\\\"qti-navigator-number\\\">\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                                        </span>\\n                                    </li>\\n                                    \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  \n  return \" active\";\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \" flagged\";\n  }\n\nfunction program13(depth0,data) {\n  \n  \n  return \" answered\";\n  }\n\nfunction program15(depth0,data) {\n  \n  \n  return \" viewed\";\n  }\n\nfunction program17(depth0,data) {\n  \n  \n  return \" unseen\";\n  }\n\nfunction program19(depth0,data) {\n  \n  \n  return \"flagged\";\n  }\n\nfunction program21(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.program(24, program24, data),fn:self.program(22, program22, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program22(depth0,data) {\n  \n  \n  return \"answered\";\n  }\n\nfunction program24(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program25(depth0,data) {\n  \n  \n  return \"viewed\";\n  }\n\nfunction program27(depth0,data) {\n  \n  \n  return \"unseen\";\n  }\n\nfunction program29(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n                        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n                            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n                            <p class=\\\"qti-navigator-message\\\">\\n                                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n                            </p>\\n                            <p class=\\\"qti-navigator-actions\\\">\\n                                <button class=\\\"btn-info small\\\" data-id=\\\"\";\n  if (helper = helpers.itemId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.itemId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                                    <span class=\\\"icon-play r\\\"></span>\\n                                </button>\\n                            </p>\\n                        </div>\\n                        \";\n  return buffer;\n  }\n\n  buffer += \"                <ul class=\\\"qti-navigator-parts plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/testReview',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'tpl!taoQtiTest/testRunner/tpl/navigator',\n    'tpl!taoQtiTest/testRunner/tpl/navigatorTree',\n    'util/capitalize'\n], function ($, _, __, navigatorTpl, navigatorTreeTpl, capitalize) {\n    'use strict';\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active : 'active',\n        collapsed : 'collapsed',\n        collapsible : 'collapsible',\n        hidden : 'hidden',\n        disabled : 'disabled',\n        flagged : 'flagged',\n        answered : 'answered',\n        viewed : 'viewed',\n        unseen : 'unseen',\n        icon : 'qti-navigator-icon',\n        scope : {\n            test : 'scope-test',\n            testPart : 'scope-test-part',\n            testSection : 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component : '.qti-navigator',\n        filterBar : '.qti-navigator-filters',\n        tree : '.qti-navigator-tree',\n        collapseHandle : '.qti-navigator-collapsible',\n        linearState : '.qti-navigator-linear',\n        infoAnswered : '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed : '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered : '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged : '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel : '.qti-navigator-info',\n        infoPanelLabels : '.qti-navigator-info > .qti-navigator-label',\n        parts : '.qti-navigator-part',\n        partLabels : '.qti-navigator-part > .qti-navigator-label',\n        sections : '.qti-navigator-section',\n        sectionLabels : '.qti-navigator-section > .qti-navigator-label',\n        items : '.qti-navigator-item',\n        itemLabels : '.qti-navigator-item > .qti-navigator-label',\n        itemIcons : '.qti-navigator-item > .qti-navigator-icon',\n        icons : '.qti-navigator-icon',\n        linearStart : '.qti-navigator-linear-part button',\n        counters : '.qti-navigator-counter',\n        actives : '.active',\n        collapsible : '.collapsible',\n        collapsiblePanels : '.collapsible-panel',\n        unseen : '.unseen',\n        answered : '.answered',\n        flagged : '.flagged',\n        notFlagged : ':not(.flagged)',\n        notAnswered : ':not(.answered)',\n        hidden : '.hidden'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all : \"\",\n        unanswered : _selectors.answered,\n        flagged : _selectors.notFlagged,\n        answered : _selectors.notAnswered,\n        filtered : _selectors.hidden\n    };\n\n    /**\n     * Maps of config options translated from the context object to the local options\n     * @type {Object}\n     * @private\n     */\n    var _optionsMap = {\n        'reviewScope' : 'reviewScope',\n        'reviewPreventsUnseen' : 'preventsUnseen',\n        'canCollapse' : 'canCollapse'\n    };\n\n    /**\n     * Maps the handled review scopes\n     * @type {Object}\n     * @private\n     */\n    var _reviewScopes = {\n        test : 'test',\n        testPart : 'testPart',\n        testSection : 'testSection'\n    };\n\n    /**\n     * Provides a test review manager\n     * @type {Object}\n     */\n    var testReview = {\n        /**\n         * Initializes the component\n         * @param {String|jQuery|HTMLElement} element The element on which install the component\n         * @param {Object} [options] A list of extra options\n         * @param {String} [options.region] The region on which put the component: left or right\n         * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\n         * the whole test, the current test part or the current test section)\n         * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\n         * @returns {testReview}\n         */\n        init: function init(element, options) {\n            var initOptions = _.isObject(options) && options || {};\n            var putOnRight = 'right' === initOptions.region;\n            var insertMethod = putOnRight ? 'append' : 'prepend';\n\n            this.options = initOptions;\n            this.disabled = false;\n            this.hidden = !!initOptions.hidden;\n            this.currentFilter = 'all';\n\n            // clean the DOM if the init method is called after initialisation\n            if (this.$component) {\n                this.$component.remove();\n            }\n\n            // build the component structure and inject it into the DOM\n            this.$container = $(element);\n            insertMethod = this.$container[insertMethod];\n            if (insertMethod) {\n                insertMethod.call(this.$container, navigatorTpl({\n                    region: putOnRight ? 'right' : 'left',\n                    hidden: this.hidden\n                }));\n            } else {\n                throw new Error(\"Unable to inject the component structure into the DOM\");\n            }\n\n            // install the component behaviour\n            this._loadDOM();\n            this._initEvents();\n            this._updateDisplayOptions();\n\n            return this;\n        },\n\n        /**\n         * Links the component to the underlying DOM elements\n         * @private\n         */\n        _loadDOM: function() {\n            this.$component = this.$container.find(_selectors.component);\n\n            // access to info panel displaying counters\n            this.$infoAnswered = this.$component.find(_selectors.infoAnswered);\n            this.$infoViewed = this.$component.find(_selectors.infoViewed);\n            this.$infoUnanswered = this.$component.find(_selectors.infoUnanswered);\n            this.$infoFlagged = this.$component.find(_selectors.infoFlagged);\n\n            // access to filter switches\n            this.$filterBar = this.$component.find(_selectors.filterBar);\n            this.$filters = this.$filterBar.find('li');\n\n            // access to the tree of parts/sections/items\n            this.$tree = this.$component.find(_selectors.tree);\n\n            // access to the panel displayed when a linear part is reached\n            this.$linearState = this.$component.find(_selectors.linearState);\n        },\n\n        /**\n         * Installs the event handlers on the underlying DOM elements\n         * @private\n         */\n        _initEvents: function() {\n            var self = this;\n\n            // click on the collapse handle: collapse/expand the review panel\n            this.$component.on('click' + _selectors.component, _selectors.collapseHandle, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                self.$component.toggleClass(_cssCls.collapsed);\n                if (self.$component.hasClass(_cssCls.collapsed)) {\n                    self._openSelected();\n                }\n            });\n\n            // click on the info panel title: toggle the related panel\n            this.$component.on('click' + _selectors.component, _selectors.infoPanelLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.infoPanel);\n                self._togglePanel($panel, _selectors.infoPanel);\n            });\n\n            // click on a part title: toggle the related panel\n            this.$tree.on('click' + _selectors.component, _selectors.partLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.parts);\n                var open = self._togglePanel($panel, _selectors.parts);\n\n                if (open) {\n                    if ($panel.hasClass(_cssCls.active)) {\n                        self._openSelected();\n                    } else {\n                        self._openOnly($panel.find(_selectors.sections).first(), $panel);\n                    }\n                }\n            });\n\n            // click on a section title: toggle the related panel\n            this.$tree.on('click' + _selectors.component, _selectors.sectionLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.sections);\n\n                self._togglePanel($panel, _selectors.sections);\n            });\n\n            // click on an item: jump to the position\n            this.$tree.on('click' + _selectors.component, _selectors.itemLabels, function(event) {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $item = $(this).closest(_selectors.items);\n                var $target;\n\n                if (!$item.hasClass(_cssCls.disabled)) {\n                    $target = $(event.target);\n                    if ($target.is(_selectors.icons) && !self.$component.hasClass(_cssCls.collapsed)) {\n                        if (!$item.hasClass(_cssCls.unseen)) {\n                            self._mark($item);\n                        }\n                    } else {\n                        self._select($item);\n                        self._jump($item);\n                    }\n                }\n            });\n\n            // click on the start button inside a linear part: jump to the position\n            this.$tree.on('click' + _selectors.component, _selectors.linearStart, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $btn = $(this);\n\n                if (!$btn.hasClass(_cssCls.disabled)) {\n                    $btn.addClass(_cssCls.disabled);\n                    self._jump($btn);\n                }\n            });\n\n            // click on a filter button\n            this.$filterBar.on('click' + _selectors.component, 'li', function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $btn = $(this);\n                var mode = $btn.data('mode');\n\n                self.$filters.removeClass(_cssCls.active);\n                self.$component.removeClass(_cssCls.collapsed);\n                $btn.addClass(_cssCls.active);\n\n                self._filter(mode);\n            });\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         * @private\n         */\n        _filter: function(criteria) {\n            var $items = this.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n            var filter = _filterMap[criteria];\n            if (filter) {\n                $items.filter(filter).addClass(_cssCls.hidden);\n            }\n            this._updateSectionCounters(!!filter);\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         * @private\n         */\n        _select: function(position, open) {\n            // find the item to select and extract its hierarchy\n            var selected = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil(this.$tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this._openOnly(hierarchy);\n            }\n\n            // select the item\n            this.$tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         * @private\n         */\n        _openSelected: function() {\n            // find the selected item and extract its hierarchy\n            var selected = this.$tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil(this.$tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this._openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         * @private\n         */\n        _openOnly: function(opened, root) {\n            (root || this.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        _togglePanel: function(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Sets the icon of a particular item\n         * @param {jQuery} $item\n         * @param {String} icon\n         * @private\n         */\n        _setItemIcon: function($item, icon) {\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n        },\n\n        /**\n         * Sets the icon of a particular item according to its state\n         * @param {jQuery} $item\n         * @private\n         */\n        _adjustItemIcon: function($item) {\n            var icon = null;\n            var defaultIcon = _cssCls.unseen;\n            var iconCls = [\n                _cssCls.flagged,\n                _cssCls.answered,\n                _cssCls.viewed\n            ];\n\n            _.forEach(iconCls, function(cls) {\n                if ($item.hasClass(cls)) {\n                    icon = cls;\n                    return false;\n                }\n            });\n\n            this._setItemIcon($item, icon || defaultIcon);\n        },\n\n        /**\n         * Toggle the marked state of an item\n         * @param {jQuery} $item\n         * @param {Boolean} [flag]\n         * @private\n         */\n        _toggleFlag: function($item, flag) {\n            $item.toggleClass(_cssCls.flagged, flag);\n            this._adjustItemIcon($item);\n        },\n\n        /**\n         * Marks an item for later review\n         * @param {jQuery} $item\n         * @private\n         */\n        _mark: function($item) {\n            var itemId = $item.data('id');\n            var itemPosition = $item.data('position');\n            var flag = !$item.hasClass(_cssCls.flagged);\n\n            this._toggleFlag($item);\n\n            /**\n             * A storage of the flag is required\n             * @event testReview#mark\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             * @param {Number} position - The item position on which jump\n             * @param {String} itemId - The identifier of the target item\n             * @param {testReview} testReview - The client testReview component\n             */\n            this.trigger('mark', [flag, itemPosition, itemId]);\n        },\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        _jump: function($item) {\n            var itemId = $item.data('id');\n            var itemPosition = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event testReview#jump\n             * @param {Number} position - The item position on which jump\n             * @param {String} itemId - The identifier of the target item\n             * @param {testReview} testReview - The client testReview component\n             */\n            this.trigger('jump', [itemPosition, itemId]);\n        },\n\n        /**\n         * Updates the sections related items counters\n         * @param {Boolean} filtered\n         */\n        _updateSectionCounters: function(filtered) {\n            var self = this;\n            var filter = _filterMap[filtered ? 'filtered' : 'answered'];\n            this.$tree.find(_selectors.sections).each(function() {\n                var $section = $(this);\n                var $items = $section.find(_selectors.items);\n                var $filtered = $items.filter(filter);\n                var total = $items.length;\n                var nb = total - $filtered.length;\n                self._writeCount($section.find(_selectors.counters), nb, total);\n            });\n        },\n\n        /**\n         * Updates the display according to options\n         * @private\n         */\n        _updateDisplayOptions: function() {\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test';\n            var scopeClass = _cssCls.scope[reviewScope];\n            var $root = this.$component;\n            _.forEach(_cssCls.scope, function(cls) {\n                $root.removeClass(cls);\n            });\n            if (scopeClass) {\n                $root.addClass(scopeClass);\n            }\n            $root.toggleClass(_cssCls.collapsible, this.options.canCollapse);\n        },\n\n        /**\n         * Updates the local options from the provided context\n         * @param {Object} testContext The progression context\n         * @private\n         */\n        _updateOptions: function(testContext) {\n            var options = this.options;\n            _.forEach(_optionsMap, function(optionKey, contextKey) {\n                if (undefined !== testContext[contextKey]) {\n                    options[optionKey] = testContext[contextKey];\n                }\n            });\n        },\n\n        /**\n         * Updates the info panel\n         */\n        _updateInfos: function() {\n            var progression = this.progression,\n                unanswered = Number(progression.total) - Number(progression.answered);\n\n            // update the info panel\n            this._writeCount(this.$infoAnswered, progression.answered, progression.total);\n            this._writeCount(this.$infoUnanswered, unanswered, progression.total);\n            this._writeCount(this.$infoViewed, progression.viewed, progression.total);\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number} total\n         * @private\n         */\n        _writeCount: function($place, count, total) {\n            $place.text(count + '/' + total);\n        },\n\n        /**\n         * Gets the progression stats for the whole test\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTest: function(testContext) {\n            return {\n                total : testContext.numberItems || 0,\n                answered : testContext.numberCompleted || 0,\n                viewed : testContext.numberPresented || 0,\n                flagged : testContext.numberFlagged || 0\n            };\n        },\n\n        /**\n         * Gets the progression stats for the current test part\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTestPart: function(testContext) {\n            return {\n                total : testContext.numberItemsPart || 0,\n                answered : testContext.numberCompletedPart || 0,\n                viewed : testContext.numberPresentedPart || 0,\n                flagged : testContext.numberFlaggedPart || 0\n            };\n        },\n\n        /**\n         * Gets the progression stats for the current test section\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTestSection: function(testContext) {\n            return {\n                total : testContext.numberItemsSection || 0,\n                answered : testContext.numberCompletedSection || 0,\n                viewed : testContext.numberPresentedSection || 0,\n                flagged : testContext.numberFlaggedSection || 0\n            };\n        },\n\n        /**\n         * Updates the navigation tre\n         * @param {Object} testContext The progression context\n         */\n        _updateTree: function(testContext) {\n            var navigatorMap = testContext.navigatorMap;\n            var reviewScope = this.options.reviewScope;\n            var reviewScopePart = reviewScope === 'testPart';\n            var reviewScopeSection = reviewScope === 'testSection';\n            var _partsFilter = function(part) {\n                if (reviewScopeSection && part.sections) {\n                    part.sections = _.filter(part.sections, _partsFilter);\n                }\n                return part.active;\n            };\n\n            // rebuild the tree\n            if (navigatorMap) {\n                if (reviewScopePart || reviewScopeSection) {\n                    // display only the current section\n                    navigatorMap = _.filter(navigatorMap, _partsFilter);\n                }\n\n                this.$filterBar.show();\n                this.$linearState.hide();\n                this.$tree.html(navigatorTreeTpl({\n                    parts: navigatorMap\n                }));\n\n                if (this.options.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.$filterBar.hide();\n                this.$linearState.show();\n                this.$tree.empty();\n            }\n\n            // apply again the current filter\n            this._filter(this.$filters.filter(_selectors.actives).data('mode'));\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n\n            // update the item flag\n            this._toggleFlag($item, flag);\n\n            // update the info panel\n            progression.flagged = this.$tree.find(_selectors.flagged).length;\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\n            this._filter(this.currentFilter);\n        },\n\n        /**\n         * Update the number of flagged items in the test context\n         * @param {Object} testContext The test context\n         * @param {Number} position The position of the flagged item\n         * @param {Boolean} flag The flag state\n         */\n        updateNumberFlagged: function(testContext, position, flag) {\n            var fields = ['numberFlagged'];\n            var currentPosition = testContext.itemPosition;\n            var currentFound = false, currentSection = null, currentPart = null;\n            var itemFound = false, itemSection = null, itemPart = null;\n\n            if (testContext.navigatorMap) {\n                // find the current item and the marked item inside the navigator map\n                // check if the marked item is in the current section\n                _.forEach(testContext.navigatorMap, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            if (item) {\n                                if (item.position === position) {\n                                    itemPart = part;\n                                    itemSection = section;\n                                    itemFound = true;\n                                }\n                                if (item.position === currentPosition) {\n                                    currentPart = part;\n                                    currentSection = section;\n                                    currentFound = true;\n\n                                }\n                                if (itemFound && currentFound) {\n                                    return false;\n                                }\n                            }\n                        });\n\n                        if (itemFound && currentFound) {\n                            return false;\n                        }\n                    });\n\n                    if (itemFound && currentFound) {\n                        return false;\n                    }\n                });\n\n                // select the context to update\n                if (itemFound && currentPart === itemPart) {\n                    fields.push('numberFlaggedPart');\n                }\n                if (itemFound && currentSection === itemSection) {\n                    fields.push('numberFlaggedSection');\n                }\n            } else {\n                // no navigator map, the current the marked item is in the current section\n                fields.push('numberFlaggedPart');\n                fields.push('numberFlaggedSection');\n            }\n\n            _.forEach(fields, function(field) {\n                if (field in testContext) {\n                    testContext[field] += flag ? 1 : -1;\n                }\n            });\n        },\n\n        /**\n         * Get progression\n         * @param {Object} testContext The progression context\n         * @returns {object} progression\n         */\n        getProgression: function getProgression(testContext) {\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test',\n                progressInfoMethod = '_getProgressionOf' + capitalize(reviewScope),\n                getProgression = this[progressInfoMethod] || this._getProgressionOfTest,\n                progression = getProgression && getProgression(testContext) || {};\n\n            return progression;\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} testContext The progression context\n         * @returns {testReview}\n         */\n        update: function update(testContext) {\n            this.progression = this.getProgression(testContext);\n            this._updateOptions(testContext);\n            this._updateInfos(testContext);\n            this._updateTree(testContext);\n            this._updateDisplayOptions(testContext);\n            return this;\n        },\n\n        /**\n         * Disables the component\n         * @returns {testReview}\n         */\n        disable: function disable() {\n            this.disabled = true;\n            this.$component.addClass(_cssCls.disabled);\n            return this;\n        },\n\n        /**\n         * Enables the component\n         * @returns {testReview}\n         */\n        enable: function enable() {\n            this.disabled = false;\n            this.$component.removeClass(_cssCls.disabled);\n            return this;\n        },\n\n        /**\n         * Hides the component\n         * @returns {testReview}\n         */\n        hide: function hide() {\n            this.disabled = true;\n            this.hidden = true;\n            this.$component.addClass(_cssCls.hidden);\n            return this;\n        },\n\n        /**\n         * Shows the component\n         * @returns {testReview}\n         */\n        show: function show() {\n            this.disabled = false;\n            this.hidden = false;\n            this.$component.removeClass(_cssCls.hidden);\n            return this;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {testReview}\n         */\n        toggle: function toggle(show) {\n            if (undefined === show) {\n                show = this.hidden;\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        },\n\n        /**\n         * Install an event handler on the underlying DOM element\n         * @param {String} eventName\n         * @returns {testReview}\n         */\n        on: function on(eventName) {\n            var dom = this.$component;\n            if (dom) {\n                dom.on.apply(dom, arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Uninstall an event handler from the underlying DOM element\n         * @param {String} eventName\n         * @returns {testReview}\n         */\n        off: function off(eventName) {\n            var dom = this.$component;\n            if (dom) {\n                dom.off.apply(dom, arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Triggers an event on the underlying DOM element\n         * @param {String} eventName\n         * @param {Array|Object} extraParameters\n         * @returns {testReview}\n         */\n        trigger : function trigger(eventName, extraParameters) {\n            var dom = this.$component;\n\n            if (undefined === extraParameters) {\n                extraParameters = [];\n            }\n            if (!_.isArray(extraParameters)) {\n                extraParameters = [extraParameters];\n            }\n\n            extraParameters.push(this);\n\n            if (dom) {\n                dom.trigger(eventName, extraParameters);\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     * Builds an instance of testReview\n     * @param {String|jQuery|HTMLElement} element The element on which install the component\n     * @param {Object} [options] A list of extra options\n     * @param {String} [options.region] The region on which put the component: left or right\n     * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\n     * the whole test, the current test part or the current test section)\n     * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\n     * @returns {testReview}\n     */\n    var testReviewFactory = function(element, options) {\n        var component = _.clone(testReview, true);\n        return component.init(element, options);\n    };\n\n    return testReviewFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/progressUpdater',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/progressbar'\n], function ($, _, __) {\n    'use strict';\n\n    /**\n     * Provides a versatile progress bar updater\n     * @type {{init: Function, update: Function}}\n     */\n    var progressUpdaters = {\n        /**\n         * Initializes the progress updater\n         *\n         * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\n         * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\n         * @returns {progressUpdaters}\n         */\n        init: function(progressBar, progressLabel) {\n            this.progressBar = $(progressBar).progressbar();\n            this.progressLabel = $(progressLabel);\n            return this;\n        },\n\n        /**\n         * Writes the progress label and update the progress by ratio\n         * @param {String} label\n         * @param {Number} ratio\n         * @returns {progressUpdaters}\n         */\n        write: function(label, ratio) {\n            this.progressLabel.text(label);\n            this.progressBar.progressbar('value', ratio);\n            return this;\n        },\n\n        /**\n         * Updates the progress bar\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        update: function(testContext) {\n            var progressIndicator = testContext.progressIndicator || 'percentage';\n            var progressIndicatorMethod = progressIndicator + 'Progression';\n            var getProgression = this[progressIndicatorMethod] || this.percentageProgression;\n            var progression = getProgression && getProgression(testContext) || {};\n\n            this.write(progression.label, progression.ratio);\n            return progression;\n        },\n\n        /**\n         * Updates the progress bar displaying the percentage\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        percentageProgression: function(testContext) {\n            var total = Math.max(1, testContext.numberItems);\n            var ratio = Math.floor(testContext.numberCompleted / total * 100);\n            return {\n                ratio : ratio,\n                label : ratio + '%'\n            };\n        },\n\n        /**\n         * Updates the progress bar displaying the position\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        positionProgression: function(testContext) {\n            var progressScope = testContext.progressIndicatorScope;\n            var progressScopeCounter = {\n                test : {\n                    total : 'numberItems',\n                    position : 'itemPosition'\n                },\n                testPart : {\n                    total : 'numberItemsPart',\n                    position : 'itemPositionPart'\n                },\n                testSection : {\n                    total : 'numberItemsSection',\n                    position : 'itemPositionSection'\n                }\n            };\n            var counter = progressScopeCounter[progressScope] || progressScopeCounter.test;\n            var total = Math.max(1, testContext[counter.total]);\n            var position = testContext[counter.position] + 1;\n            return {\n                ratio : Math.floor(position / total * 100),\n                label : __('Item %d of %d', position, total)\n            };\n        }\n    };\n\n    /**\n     * Builds an instance of progressUpdaters\n     * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\n     * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\n     * @returns {progressUpdaters}\n     */\n    var progressUpdaterFactory = function(progressBar, progressLabel) {\n        var updater = _.clone(progressUpdaters, true);\n        return updater.init(progressBar, progressLabel);\n    };\n\n    return progressUpdaterFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n *\n */\n\n/**\n * Metadata to be sent to the server. Will be saved in result storage as a trace variable.\n * Usage example:\n * <pre>\n * var testMetaData = testMetaDataFactory({\n *   testServiceCallId : this.itemServiceApi.serviceCallId\n * });\n *\n * testMetaData.setData({\n *   'TEST' : {\n *      'TEST_EXIT_CODE' : 'T'\n *   },\n *   'SECTION' : {\n *      'SECTION_EXIT_CODE' : 704\n *   }\n * });\n *\n * testMetaData.addData({'ITEM' : {\n *      'ITEM_START_TIME_CLIENT' : 1443596730143,\n *      'ITEM_END_TIME_CLIENT' : 1443596731301\n *    }\n * });\n * </pre>\n *\n * Data for each service call id will be stored in local storage to be able get data\n * after reloading the page or resuming the test session.\n *\n * To clear all data related to current test_call_id used <i>clearData</i> method.\n */\ndefine('taoQtiTest/testRunner/testMetaData',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * @param {Object} options\n     * @param {string} options.testServiceCallId - test call id.\n     */\n     var testMetaDataFactory = function testMetaDataFactory(options) {\n        var _testServiceCallId,\n            _storageKeyPrefix = 'testMetaData_',\n            _data = {};\n\n        if (!options || options.testServiceCallId === undefined) {\n            throw new TypeError(\"testServiceCallId option is required\");\n        }\n\n        var testMetaData = {\n            SECTION_EXIT_CODE : {\n                'COMPLETED_NORMALLY': 700,\n                'QUIT': 701,\n                'COMPLETE_TIMEOUT': 703,\n                'TIMEOUT': 704,\n                'FORCE_QUIT': 705,\n                'IN_PROGRESS': 706,\n                'ERROR': 300\n            },\n            TEST_EXIT_CODE : {\n                'COMPLETE': 'C',\n                'TERMINATED': 'T',\n                'INCOMPLETE': 'IC',\n                'INCOMPLETE_QUIT': 'IQ',\n                'INACTIVE': 'IA',\n                'CANDIDATE_DISAGREED_WITH_NDA': 'DA'\n            },\n            /**\n             * Return test call id.\n             * @returns {string}- Test call id\n             */\n            getTestServiceCallId : function getTestServiceCallId () {\n                return _testServiceCallId;\n            },\n\n            /**\n             * Set test call id.\n             * @param {string} value\n             */\n            setTestServiceCallId : function setTestServiceCallId (value) {\n                _testServiceCallId = value;\n            },\n\n            /**\n             * Set meta data. Current data object will be overwritten.\n             * @param {Object} data - metadata object\n             */\n            setData : function setData(data) {\n                _data = data;\n                setLocalStorageData(JSON.stringify(_data));\n            },\n\n            /**\n             * Add data.\n             * @param {Object} data - metadata object\n             * @param {Boolean} overwrite - whether the same data should be overwritten. Default - <i>false</i>\n             */\n            addData : function addData(data, overwrite) {\n                data = _.clone(data);\n                if (overwrite === undefined) {\n                    overwrite = false;\n                }\n\n                if (overwrite) {\n                    _.merge(_data, data);\n                } else {\n                    _data = _.merge(data, _data);\n                }\n                setLocalStorageData(JSON.stringify(_data));\n            },\n\n            /**\n             * Get the saved data.\n             * The cloned object will be returned to avoid unwanted affecting of the original data.\n             * @returns {Object} - metadata object.\n             */\n            getData : function getData() {\n                return _.clone(_data);\n            },\n\n            /**\n             * Clear all data saved in current object and in local storage related to current test call id.\n             * @returns {Object} - metadata object.\n             */\n            clearData : function clearData() {\n                _data = {};\n                window.localStorage.removeItem(testMetaData.getLocalStorageKey());\n            },\n\n            getLocalStorageKey : function getLocalStorageKey () {\n                return _storageKeyPrefix + _testServiceCallId;\n            }\n        };\n\n        /**\n         * Initialize test meta data manager\n         */\n        function init() {\n            _testServiceCallId = options.testServiceCallId;\n            testMetaData.setData(getLocalStorageData());\n        }\n\n        /**\n         * Set data to local storage\n         * @param {string} val - data to be stored.\n         */\n        function setLocalStorageData(val) {\n            var currentKey = testMetaData.getLocalStorageKey();\n            try {\n                window.localStorage.setItem(currentKey, val);\n            } catch(domException) {\n                if (domException.name === 'QuotaExceededError' ||\n                    domException.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                    var removed = 0,\n                        i = window.localStorage.length,\n                        key;\n                    while (i--) {\n                        key  = localStorage.key(i);\n                        if (/^testMetaData_.*/.test(key) && key !== currentKey) {\n                            window.localStorage.removeItem(key);\n                            removed++;\n                        }\n                    }\n                    if (removed) {\n                        setLocalStorageData(val);\n                    } else {\n                        throw domException;\n                    }\n                } else {\n                    throw domException;\n                }\n            }\n        }\n\n        /**\n         * Get data from local storage stored for current call id\n         * @returns {*} saved data or empty object\n         */\n        function getLocalStorageData() {\n            var data = window.localStorage.getItem(testMetaData.getLocalStorageKey()),\n                result = JSON.parse(data) || {};\n\n            return result;\n        }\n\n        init();\n\n        return testMetaData;\n    };\n\n    return testMetaDataFactory;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\ndefine('serviceApi/ServiceApi',['jquery', 'urlParser'], function($, UrlParser){\n    'use strict';\n\n    /**\n     * @constructor\n     */\n    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService, paused){\n        this.baseUrl = baseUrl;\n        this.parameters = parameters;\n        this.connected = false;\n\n        this.serviceCallId = serviceCallId;\n        this.state = stateStorage;\n        this.userService = userService;\n        this.hasBeenPaused = paused;\n    }\n\n    ServiceApi.SIG_SUCCESS = 0;\n    ServiceApi.SIG_ERROR = 1;\n\n    ServiceApi.prototype.loadInto = function(frame, connected){\n        var self = this;\n        var $frame = $(frame);\n        var callUrl = this.getCallUrl();\n        var isCORSAllowed = new UrlParser(callUrl).checkCORS();\n\n        $frame.on('load', function(e){\n             //if we are  in the same domain, we add a variable\n             //to the frame window, so the frame knows it can communicate\n             //with the parent\n            $(document).on('serviceready', function(){\n                self.connect(frame, function(){\n                    $(document).off('serviceready');\n                    if(typeof connected === 'function'){\n                        connected();\n                    }\n                });\n            });\n             if(isCORSAllowed === true){\n                 frame.contentWindow.__knownParent__ = true;\n             }\n         });\n\n        $frame.attr('src', callUrl);\n    };\n\n    ServiceApi.prototype.connect = function(frame, connected){\n        if(this.connected === false && frame.contentWindow){\n            //frame.contentWindow.serviceApi = this;\n            if (typeof(frame.contentWindow.onServiceApiReady) === \"function\") {\n                frame.contentWindow.onServiceApiReady(this);\n                this.connected = true;\n                if(typeof connected === 'function'){\n                    connected();\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the service call URL\n     * @returns {String} the URI\n     */\n    ServiceApi.prototype.getCallUrl = function(){\n        var params = this.parameters || {};\n        params.serviceCallId = this.serviceCallId;\n        return this.baseUrl + '?' + $.param(params);\n    };\n\n    ServiceApi.prototype.getUserPropertyValues = function(property, callback){\n    \tthis.userService.get(property, callback);\n    };\n\n    //Context\n    ServiceApi.prototype.getServiceCallId = function(){\n        return this.serviceCallId;\n    };\n\n    //Context\n    ServiceApi.prototype.getState = function(){\n        return this.state.get();\n    };\n\n    ServiceApi.prototype.setState = function(state, callback){\n        return this.state.set(state, callback);\n    };\n\n    //Context\n    ServiceApi.prototype.getHasBeenPaused = function(){\n        return this.hasBeenPaused;\n    };\n\n    ServiceApi.prototype.setHasBeenPaused = function(paused){\n        this.hasBeenPaused = paused;\n    };\n\n    // Variables\n    ServiceApi.prototype.getParameter = function(identifier){\n        if (typeof(this.parameters[identifier]) !== \"undefined\") {\n            return this.parameters[identifier];\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Sets a callback on the finish action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onFinish = function(callback) {\n        this.onFinishCallback = callback;\n        return this;\n    };\n\n    /**\n     * Sets a callback on the kill action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onKill = function(callback) {\n        this.onKillCallback = callback;\n        return this;\n    };\n\n    /**\n     * Sets a callback on the exit action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onExit = function(callback) {\n        this.onExitCallback = callback;\n        return this;\n    };\n\n    /**\n     * @param {Function} callback - Function called if no dedicated callback is found\n     */\n    ServiceApi.prototype.kill = function(callback) {\n    \tif (typeof this.onKillCallback === 'function') {\n    \t\tthis.onKillCallback(callback);\n    \t} else {\n    \t\tcallback(0);\n    \t}\n    };\n\n    /**\n     * Exits the flow\n     * @param {Function} callback - Function called if no dedicated callback is found\n     */\n    ServiceApi.prototype.exit = function(callback) {\n    \tif (typeof this.onExitCallback === 'function') {\n    \t\tthis.onExitCallback(callback);\n    \t} else {\n    \t\tcallback(0);\n    \t}\n    };\n\n    /**\n     * Finishes the flow\n     * @param valueArray - return parameters of the service.\n     */\n    ServiceApi.prototype.finish = function(valueArray) {\n        //return execution to service caller\n        if (typeof this.onFinishCallback === 'function') {\n                this.onFinishCallback(valueArray);\n        }\n    };\n\n    return ServiceApi;\n\n});\n\n","define('serviceApi/UserInfoService',['jquery'], function($){\n    \n    function UserInfoService(requestUrl, data) {\n        this.data = data;\n        this.requestUrl = requestUrl;\n    }\n\n    UserInfoService.prototype.get = function(property, callback){\n        if (this.data.hasOwnProperty(property)) {\n            if (typeof callback === \"function\") {\n                    callback(this.data[property]);\n            }\n        } else {\n            $.ajax({\n                url : this.requestUrl,\n                data \t\t: {\n                    'property' : property\n                },\n                type        : 'post',\n                dataType\t: 'json',\n                success     : (function(service, callback) {return function(r) {\n            \t\tfor (key in r.data) {\n            \t\t\tservice.data[key] = r.data[key];\n            \t\t}\n                    if (typeof callback === \"function\") {\n                        callback(service.data[property]);\n                    }\n\n                }})(this, callback)\n                /*\t\n            \tfunction(r){\n                    if(r.success){\n                    \tconsole.log(this.data);\n                    \tthis.data[property] = r.values;\n                    \t//console.log(this.data);\n\t                    if (typeof callback === \"function\") {\n\t                        callback(this.data[property]);\n\t                    }\n                    }\n                }\n                */\n                \n                \n            });\n        }\n    };\n\n    return UserInfoService;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA ;\n */\ndefine('serviceApi/StateStorage',['jquery'], function($){\n    'use strict';\n    \n    function StateStorage(state, submitUrl) {\n        this.state = state;\n        this.submitUrl = submitUrl;\n    }\n\n    StateStorage.prototype.get = function(callback){\n        if (typeof callback === 'function') {\n                callback(this.state);\n        }\n        return this.state;\n    };\n\n    StateStorage.prototype.set = function(state, callback){\n\n        if (state === this.state) {\n            if (typeof callback === \"function\") {\n                    callback();\n            }\n        } else {\n            this.state = state;\n            $.ajax({\n                url : this.submitUrl,\n                data \t\t: {\n                    'state' : state\n                },\n                type        : 'post',\n                dataType\t: 'json',\n                success     : typeof callback === \"function\" ? callback : null\n            });\n        }\n    };\n\n    return StateStorage;\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n *\n */\n\ndefine('taoQtiTest/controller/runtime/testRunner',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'module',\n    'taoQtiTest/testRunner/actionBarTools',\n    'taoQtiTest/testRunner/testReview',\n    'taoQtiTest/testRunner/progressUpdater',\n    'taoQtiTest/testRunner/testMetaData',\n    'serviceApi/ServiceApi',\n    'serviceApi/UserInfoService',\n    'serviceApi/StateStorage',\n    'iframeNotifier',\n    'mathJax',\n    'ui/feedback',\n    'ui/deleter',\n    'moment',\n    'ui/modal',\n    'ui/progressbar'\n],\nfunction (\n    $,\n    _,\n    __,\n    module,\n    actionBarTools,\n    testReview,\n    progressUpdater,\n    testMetaDataFactory,\n    ServiceApi,\n    UserInfoService,\n    StateStorage,\n    iframeNotifier,\n    MathJax,\n    feedback,\n    deleter,\n    moment,\n    modal\n) {\n\n    'use strict';\n\n    var timerIds = [],\n        currentTimes = [],\n        lastDates = [],\n        timeDiffs = [],\n        waitingTime = 0,\n        $timers,\n        $controls,\n        timerIndex,\n        testMetaData,\n        sessionStateService,\n        $doc = $(document),\n        optionNextSection = 'x-tao-option-nextSection',\n        optionNextSectionWarning = 'x-tao-option-nextSectionWarning',\n        optionReviewScreen = 'x-tao-option-reviewScreen',\n        optionEndTestWarning = 'x-tao-option-endTestWarning',\n        optionNoExitTimedSectionWarning = 'x-tao-option-noExitTimedSectionWarning',\n        TestRunner = {\n            // Constants\n            'TEST_STATE_INITIAL': 0,\n            'TEST_STATE_INTERACTING': 1,\n            'TEST_STATE_MODAL_FEEDBACK': 2,\n            'TEST_STATE_SUSPENDED': 3,\n            'TEST_STATE_CLOSED': 4,\n            'TEST_NAVIGATION_LINEAR': 0,\n            'TEST_NAVIGATION_NONLINEAR': 1,\n            'TEST_ITEM_STATE_INTERACTING': 1,\n\n            /**\n             * Prepare a transition to another item\n             * @param {Function} [callback]\n             */\n            beforeTransition: function (callback) {\n                // Ask the top window to start the loader.\n                iframeNotifier.parent('loading');\n\n                // Disable buttons.\n                this.disableGui();\n\n                $controls.$itemFrame.hide();\n                $controls.$rubricBlocks.hide();\n                $controls.$timerWrapper.hide();\n\n                // Wait at least waitingTime ms for a better user experience.\n                if (typeof callback === 'function') {\n                    setTimeout(callback, waitingTime);\n                }\n            },\n\n            /**\n             * Complete a transition to another item\n             */\n            afterTransition: function () {\n                this.enableGui();\n\n                //ask the top window to stop the loader\n                iframeNotifier.parent('unloading');\n                testMetaData.addData({\n                    'ITEM' : {'ITEM_START_TIME_CLIENT' : Date.now() / 1000}\n                });\n            },\n\n            /**\n             * Jumps to a particular item in the test\n             * @param {Number} position The position of the item within the test\n             */\n            jump: function(position) {\n                var self = this,\n                    action = 'jump',\n                    params = {position: position};\n                this.disableGui();\n\n                if( this.isJumpOutOfSection(position)  && this.isCurrentItemActive() && this.isTimedSection() ){\n                    this.exitTimedSection(action, params);\n                } else {\n                    this.killItemSession(function() {\n                        self.actionCall(action, params);\n                    });\n                }\n            },\n\n            /**\n             * Push to server how long user seen that item before to track duration\n             * @param {Number} duration\n             */\n            keepItemTimed: function(duration){\n                if (duration) {\n                    var self = this,\n                        action = 'keepItemTimed',\n                        params = {duration: duration};\n                    self.actionCall(action, params);\n                }\n            },\n\n            /**\n             * Marks an item for later review\n             * @param {Boolean} flag The state of the flag\n             * @param {Number} position The position of the item within the test\n             */\n            markForReview: function(flag, position) {\n                var self = this;\n\n                // Ask the top window to start the loader.\n                iframeNotifier.parent('loading');\n\n                // Disable buttons.\n                this.disableGui();\n\n                $.ajax({\n                    url: self.testContext.markForReviewUrl,\n                    cache: false,\n                    async: true,\n                    type: 'POST',\n                    dataType: 'json',\n                    data: {\n                        flag: flag,\n                        position: position\n                    },\n                    success: function(data) {\n                        // update the item flagged state\n                        if (self.testReview) {\n                            self.testReview.setItemFlag(position, flag);\n                            self.testReview.updateNumberFlagged(self.testContext, position, flag);\n                            if (self.testContext.itemPosition === position) {\n                                self.testContext.itemFlagged = flag;\n                            }\n                            self.updateTools(self.testContext);\n                        }\n\n                        // Enable buttons.\n                        self.enableGui();\n\n                        //ask the top window to stop the loader\n                        iframeNotifier.parent('unloading');\n                    }\n                });\n            },\n\n            /**\n             * Move to the next available item\n             */\n            moveForward: function () {\n                var self = this,\n                    action = 'moveForward';\n\n                function doExitSection() {\n                    if( self.isTimedSection() && !self.testContext.isTimeout){\n                        self.exitTimedSection(action);\n                    } else {\n                        self.exitSection(action);\n                    }\n                }\n\n                this.disableGui();\n\n                if( (( this.testContext.numberItemsSection - this.testContext.itemPositionSection - 1) == 0) && this.isCurrentItemActive()){\n                    if (this.shouldDisplayEndTestWarning()) {\n                        this.displayEndTestWarning(doExitSection);\n                        this.enableGui();\n                    } else {\n                        doExitSection();\n                    }\n\n                } else {\n                    this.killItemSession(function () {\n                        self.actionCall(action);\n                    });\n                }\n            },\n\n            /**\n             * Check if necessary to display an end test warning\n             */\n            shouldDisplayEndTestWarning: function(){\n                return (this.testContext.isLast === true && this.hasOption(optionEndTestWarning));\n            },\n\n            /**\n             * Warns upon exiting test\n             */\n            displayEndTestWarning: function(nextAction){\n                var options = {\n                    confirmLabel: __('OK'),\n                    cancelLabel: __('Cancel'),\n                    showItemCount: false\n                };\n\n                this.displayExitMessage(\n                    __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                    nextAction,\n                    options\n                );\n            },\n\n            /**\n             * Move to the previous available item\n             */\n            moveBackward: function () {\n                var self = this,\n                    action = 'moveBackward';\n\n                this.disableGui();\n\n                if( (this.testContext.itemPositionSection == 0) && this.isCurrentItemActive() && this.isTimedSection() ){\n                    this.exitTimedSection(action);\n                } else {\n                this.killItemSession(function () {\n                        self.actionCall(action);\n                    });\n                }\n            },\n\n            /**\n             * Checks if a position is out of the current section\n             * @param {Number} jumpPosition\n             * @returns {Boolean}\n             */\n            isJumpOutOfSection: function(jumpPosition){\n                var items = this.getCurrentSectionItems(),\n                    isJumpToOtherSection = true,\n                    isValidPosition = (jumpPosition >= 0) && ( jumpPosition < this.testContext.numberItems );\n\n                if( isValidPosition){\n                    for(var i in items ) {\n                        if (!items.hasOwnProperty(i)) {\n                            continue;\n                        }\n                        if( items[i].position == jumpPosition ){\n                            isJumpToOtherSection = false;\n                            break;\n                        }\n                    }\n                } else {\n                    isJumpToOtherSection = false;\n                }\n\n                return isJumpToOtherSection;\n            },\n\n            /**\n             * Exit from the current section. Set the exit code.de\n             * @param {String} action\n             * @param {Object} params\n             * @param {Number} [exitCode]\n             */\n            exitSection: function(action, params, exitCode){\n                var self = this;\n\n                testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : exitCode || testMetaData.SECTION_EXIT_CODE.COMPLETED_NORMALLY}});\n                self.killItemSession(function () {\n                    self.actionCall(action, params);\n                });\n            },\n\n            /**\n             * Tries to exit a timed section. Display a confirm message.\n             * @param {String} action\n             * @param {Object} params\n             */\n            exitTimedSection: function(action, params){\n                var self = this,\n                    qtiRunner = this.getQtiRunner(),\n                    doExitTimedSection = function() {\n                        if (qtiRunner) {\n                            qtiRunner.updateItemApi();\n                        }\n                        self.exitSection(action, params);\n                    };\n\n                if ((action === 'moveForward' && this.shouldDisplayEndTestWarning())    // prevent duplicate warning\n                    || this.hasOption(optionNoExitTimedSectionWarning)                  // check if warning is disabled\n                    || this.testContext.keepTimerUpToTimeout                            // no need to display the message as we may be able to go back\n                ) {\n                    doExitTimedSection();\n                } else {\n                    this.displayExitMessage(\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                        doExitTimedSection,\n                        { scope: 'testSection' }\n                    );\n                }\n\n                this.enableGui();\n            },\n\n            /**\n             * Tries to leave the current section and go to the next\n             */\n            nextSection: function(){\n                var self = this;\n                var qtiRunner = this.getQtiRunner();\n                var doNextSection = function() {\n                    self.exitSection('nextSection', null, testMetaData.SECTION_EXIT_CODE.QUIT);\n                };\n\n                if (qtiRunner) {\n                    qtiRunner.updateItemApi();\n                }\n\n                if (this.hasOption(optionNextSectionWarning)) {\n                    this.displayExitMessage(\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                        doNextSection,\n                        { scope: 'testSection' }\n                    );\n                } else {\n                    doNextSection();\n                }\n\n                this.enableGui();\n            },\n\n            /**\n             * Gets the current progression within a particular scope\n             * @param {String} [scope]\n             * @returns {Object}\n             */\n            getProgression: function(scope) {\n                var scopeSuffixMap = {\n                    test : '',\n                    testPart : 'Part',\n                    testSection : 'Section'\n                };\n                var scopeSuffix = scope && scopeSuffixMap[scope] || '';\n\n                return {\n                    total : this.testContext['numberItems' + scopeSuffix] || 0,\n                    answered : this.testContext['numberCompleted' + scopeSuffix] || 0,\n                    viewed : this.testContext['numberPresented' + scopeSuffix] || 0,\n                    flagged : this.testContext['numberFlagged' + scopeSuffix] || 0\n                };\n            },\n\n            /**\n             * Displays an exit message for a particular scope\n             * @param {String} message\n             * @param {Function} [action]\n             * @param {Object} [options]\n             * @param {String} [options.scope]\n             * @param {String} [options.confirmLabel] - label of confirm button\n             * @param {String} [options.cancelLabel] - label of cancel button\n             * @param {Boolean} [options.showItemCount] - display the number of unanswered / flagged items in modal\n             * @returns {jQuery} Returns the message box\n             */\n            displayExitMessage: function(message, action, options) {\n                var self = this,\n                    options = options || {},\n                    scope = options.scope,\n                    confirmLabel = options.confirmLabel || __('Yes'),\n                    cancelLabel = options.cancelLabel || __('No'),\n                    showItemCount = typeof options.showItemCount !== 'undefined' ? options.showItemCount : true;\n\n                var $confirmBox = $('.exit-modal-feedback');\n                var progression = this.getProgression(scope);\n                var unansweredCount = (progression.total - progression.answered);\n                var flaggedCount = progression.flagged;\n\n                if (showItemCount) {\n                    if (unansweredCount && this.isCurrentItemAnswered()) {\n                        unansweredCount--;\n                    }\n\n                    if (flaggedCount && unansweredCount) {\n                        message = __('You have %s unanswered question(s) and have %s item(s) marked for review.',\n                                unansweredCount.toString(),\n                                flaggedCount.toString()\n                            ) + ' ' + message;\n                    } else {\n                        if (flaggedCount) {\n                            message = __('You have %s item(s) marked for review.', flaggedCount.toString()) + ' ' + message;\n                        }\n\n                        if (unansweredCount) {\n                            message = __('You have %s unanswered question(s).', unansweredCount.toString()) + ' ' + message;\n                        }\n                    }\n                }\n\n                $confirmBox.find('.message').html(message);\n                $confirmBox.find('.js-exit-confirm').html(confirmLabel);\n                $confirmBox.find('.js-exit-cancel').html(cancelLabel);\n                $confirmBox.modal({ width: 500 });\n\n                $confirmBox.find('.js-exit-cancel, .modal-close').off('click').on('click', function () {\n                    $confirmBox.modal('close');\n                });\n\n                $confirmBox.find('.js-exit-confirm').off('click').on('click', function () {\n                    $confirmBox.modal('close');\n                    if (_.isFunction(action)) {\n                        action.call(self);\n                    }\n                });\n\n                return $confirmBox;\n            },\n\n            /**\n             * Kill current item section and execute callback function given as first parameter.\n             * Item end execution time will be stored in metadata object to be sent to the server.\n             * @param {function} callback\n             */\n            killItemSession : function (callback) {\n                testMetaData.addData({\n                    'ITEM' : {\n                        'ITEM_END_TIME_CLIENT' : Date.now() / 1000,\n                        'ITEM_TIMEZONE' : moment().utcOffset(moment().utcOffset()).format('Z')\n                    }\n                });\n                if (typeof callback !== 'function') {\n                    callback = _.noop;\n                }\n                this.itemServiceApi.kill(callback);\n            },\n\n            /**\n             * Checks if the current item is active\n             * @returns {Boolean}\n             */\n            isCurrentItemActive: function(){\n                return (this.testContext.itemSessionState !=4);\n            },\n\n            /**\n             * Tells is the current item has been answered or not\n             * The item is considered answered when at least one response has been set to not empty {base : null}\n             *\n             * @returns {Boolean}\n             */\n            isCurrentItemAnswered: function(){\n                var answered = false;\n                _.each(this.getCurrentItemState(), function(state){\n                    if(state && _.isObject(state.response) && state.response.base !== null){\n                        answered = true;//at least one response is not null so consider the item answered\n                        return false;\n                    }\n                });\n                return answered;\n            },\n\n            /**\n             * Checks if a particular option is enabled for the current item\n             * @param {String} option\n             * @returns {Boolean}\n             */\n            hasOption: function(option) {\n                return _.indexOf(this.testContext.categories, option) >= 0;\n            },\n\n            /**\n             * Gets access to the qtiRunner instance\n             * @returns {Object}\n             */\n            getQtiRunner: function(){\n                var itemFrame = document.getElementById('qti-item');\n                var itemWindow = itemFrame && itemFrame.contentWindow;\n                var itemContainerFrame = itemWindow && itemWindow.document.getElementById('item-container');\n                var itemContainerWindow = itemContainerFrame && itemContainerFrame.contentWindow;\n                return itemContainerWindow && itemContainerWindow.qtiRunner;\n            },\n\n            /**\n             * Checks if the current section is timed\n             * @returns {Boolean}\n             */\n            isTimedSection: function(){\n                var timeConstraints = this.testContext.timeConstraints,\n                    isTimedSection = false;\n                for( var index in timeConstraints ){\n                    if(timeConstraints.hasOwnProperty(index) &&\n                        timeConstraints[index].qtiClassName === 'assessmentSection' ){\n                        isTimedSection = true;\n                    }\n                }\n\n                return isTimedSection;\n            },\n\n            /**\n             * Gets the list of items owned by the current section\n             * @returns {Array}\n             */\n            getCurrentSectionItems: function(){\n                var partId  = this.testContext.testPartId,\n                    navMap  = this.testContext.navigatorMap,\n                    sectionItems;\n\n                for( var partIndex in navMap ){\n                    if( !navMap.hasOwnProperty(partIndex)){\n                        continue;\n                    }\n                    if( navMap[partIndex].id !== partId ){\n                        continue;\n                    }\n\n                    for(var sectionIndex in navMap[partIndex].sections){\n                        if( !navMap[partIndex].sections.hasOwnProperty(sectionIndex)){\n                            continue;\n                        }\n                        if( navMap[partIndex].sections[sectionIndex].active === true ){\n                            sectionItems = navMap[partIndex].sections[sectionIndex].items;\n                            break;\n                        }\n                    }\n                }\n\n                return sectionItems;\n            },\n\n            /**\n             * Skips the current item\n             */\n            skip: function () {\n                var self = this,\n                    doSkip = function() {\n                        self.disableGui();\n                        self.actionCall('skip');\n                    };\n\n                if (this.shouldDisplayEndTestWarning()) {\n                    this.displayEndTestWarning(doSkip);\n                } else {\n                    doSkip();\n                }\n            },\n\n            /**\n             * Handles the timeout state\n             */\n            timeout: function () {\n                var self = this;\n                this.disableGui();\n                this.testContext.isTimeout = true;\n                this.updateTimer();\n\n                this.killItemSession(function () {\n                    var confirmBox = $('.timeout-modal-feedback'),\n                        testContext = self.testContext,\n                        confirmBtn = confirmBox.find('.js-timeout-confirm, .modal-close');\n\n                    if (testContext.numberCompletedSection === testContext.numberItemsSection) {\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.COMPLETE_TIMEOUT}});\n                    } else {\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.TIMEOUT}});\n                    }\n\n                    self.enableGui();\n                    confirmBox.modal({width: 500});\n                    confirmBtn.off('click').on('click', function () {\n                        confirmBox.modal('close');\n                        self.actionCall('timeout');\n                    });\n                });\n            },\n\n            /**\n             * Sets the assessment test context object\n             * @param {Object} testContext\n             */\n            setTestContext: function(testContext) {\n                this.testContext = testContext;\n                this.itemServiceApi = eval(testContext.itemServiceApiCall);\n                this.itemServiceApi.setHasBeenPaused(testContext.hasBeenPaused);\n            },\n\n\n            /**\n             * Handles Metadata initialization\n             */\n            initMetadata: function (){\n                testMetaData = testMetaDataFactory({\n                    testServiceCallId: this.itemServiceApi.serviceCallId\n                });\n            },\n\n            /**\n             * Retrieve service responsible for broken session tracking\n             * @returns {*}\n             */\n            getSessionStateService: function () {\n                if (!sessionStateService) {\n                    sessionStateService = this.testContext.sessionStateService({accuracy: 1000});\n                }\n                return sessionStateService;\n            },\n\n            /**\n             * Updates the GUI\n             * @param {Object} testContext\n             */\n            update: function (testContext) {\n                var self = this;\n                $controls.$itemFrame.remove();\n\n                var $runner = $('#runner');\n                $runner.css('height', 'auto');\n\n                this.getSessionStateService().restart();\n\n                this.setTestContext(testContext);\n                this.updateContext();\n                this.updateProgress();\n                this.updateNavigation();\n                this.updateTestReview();\n                this.updateInformation();\n                this.updateRubrics();\n                this.updateTools(testContext);\n                this.updateTimer();\n                this.updateExitButton();\n                this.resetCurrentItemState();\n                this.initMetadata();\n\n                $controls.$itemFrame = $('<iframe id=\"qti-item\" frameborder=\"0\" scrollbars=\"no\"/>');\n                $controls.$itemFrame.appendTo($controls.$contentBox);\n\n                if (this.testContext.itemSessionState === this.TEST_ITEM_STATE_INTERACTING && self.testContext.isTimeout === false) {\n                    $doc.off('.testRunner').on('serviceloaded.testRunner', function () {\n                        self.afterTransition();\n                        self.adjustFrame();\n                        $controls.$itemFrame.css({visibility: 'visible'});\n                    });\n\n                    // Inject API into the frame.\n                    this.itemServiceApi.loadInto($controls.$itemFrame[0], function () {\n                        // We now rely on the 'serviceloaded' event.\n                    });\n                }\n                else {\n                    // e.g. no more attempts or timeout! Simply consider the transition is finished,\n                    // but do not load the item.\n                    self.afterTransition();\n                }\n            },\n\n            /**\n             * Displays feedback on the current state of the test\n             */\n            updateInformation: function () {\n\n                if (this.testContext.isTimeout === true) {\n                    feedback().error(__('Time limit reached for item \"%s\".', this.testContext.itemIdentifier));\n                }\n                else if (this.testContext.itemSessionState !== this.TEST_ITEM_STATE_INTERACTING) {\n                    feedback().error(__('No more attempts allowed for item \"%s\".', this.testContext.itemIdentifier));\n                }\n            },\n\n            /**\n             * Updates the displayed tools\n             * @param {Object} testContext\n             */\n            updateTools: function updateTools(testContext) {\n                var showSkip = false;\n                var showSkipEnd = false;\n                var showNextSection = !!testContext.nextSection && (this.hasOption(optionNextSection) || this.hasOption(optionNextSectionWarning));\n\n                if (this.testContext.allowSkipping === true) {\n                    if (this.testContext.isLast === false) {\n                        showSkip = true;\n                    } else {\n                        showSkipEnd = true;\n                    }\n                }\n\n                $controls.$skip.toggle(showSkip);\n                $controls.$skipEnd.toggle(showSkipEnd);\n                $controls.$nextSection.toggle(showNextSection);\n\n                actionBarTools.render('.tools-box-list', testContext, TestRunner);\n            },\n\n            /**\n             * Displays a timer\n             * @param {Object} cst\n             * @returns {*|jQuery|HTMLElement}\n             */\n            createTimer: function(cst) {\n                var $timer = $('<div>', {'class': 'qti-timer qti-timer__type-' + cst.qtiClassName }),\n                    $label = $('<div>', {'class': 'qti-timer_label truncate', text: cst.label }),\n                    $time  = $('<div>', {'class': 'qti-timer_time', text: this.formatTime(cst.seconds) });\n\n                $timer.append($label);\n                $timer.append($time);\n                return $timer;\n            },\n\n            /**\n             * Updates the timers\n             */\n            updateTimer: function () {\n                var self = this;\n                var hasTimers;\n                $controls.$timerWrapper.empty();\n\n                for (var i = 0; i < timerIds.length; i++) {\n                    clearTimeout(timerIds[i]);\n                }\n\n                timerIds = [];\n                currentTimes = [];\n                lastDates = [];\n                timeDiffs = [];\n\n                if (self.testContext.isTimeout === false &&\n                    self.testContext.itemSessionState === self.TEST_ITEM_STATE_INTERACTING) {\n\n                    hasTimers = !!this.testContext.timeConstraints.length;\n                    $controls.$topActionBar.toggleClass('has-timers', hasTimers);\n\n                    if (hasTimers) {\n\n                        // Insert QTI Timers container.\n                        // self.formatTime(cst.seconds)\n                        for (i = 0; i < this.testContext.timeConstraints.length; i++) {\n\n                            var cst = this.testContext.timeConstraints[i];\n\n                            if (cst.allowLateSubmission === false) {\n\n                                // Set up a timer for this constraint\n                                $controls.$timerWrapper.append(self.createTimer(cst));\n\n                                // Set up a timer and update it with setInterval.\n                                currentTimes[i] = cst.seconds;\n                                lastDates[i] = new Date();\n                                timeDiffs[i] = 0;\n                                timerIndex = i;\n\n                                if (self.testContext.timerWarning && self.testContext.timerWarning[cst.qtiClassName]) {\n                                    cst.warnings = {};\n                                    _(self.testContext.timerWarning[cst.qtiClassName]).forEach(function (value, key) {\n                                        if (_.contains(['info', 'warning', 'danger'], value)) {\n                                            cst.warnings[key] = {\n                                                type: value,\n                                                showed: cst.seconds <= key,\n                                                point: parseInt(key, 10)\n                                            };\n                                        }\n                                    });\n                                    var closestPreviousWarning = _.find(cst.warnings, { showed: true });\n                                    if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point) {\n                                        cst.warnings[closestPreviousWarning.point].showed = false;\n                                    }\n                                }\n\n                                (function (timerIndex, cst) {\n                                    timerIds[timerIndex] = setInterval(function () {\n\n                                        timeDiffs[timerIndex] += (new Date()).getTime() - lastDates[timerIndex].getTime();\n\n                                        if (timeDiffs[timerIndex] >= 1000) {\n                                            var seconds = timeDiffs[timerIndex] / 1000;\n                                            currentTimes[timerIndex] -= seconds;\n                                            timeDiffs[timerIndex] = 0;\n                                        }\n\n                                        $timers.eq(timerIndex)\n                                            .html(self.formatTime(Math.round(currentTimes[timerIndex])));\n\n                                        if (currentTimes[timerIndex] <= 0) {\n                                            // The timer expired...\n                                            currentTimes[timerIndex] = 0;\n                                            clearInterval(timerIds[timerIndex]);\n\n                                            // Hide item to prevent any further interaction with the candidate.\n                                            $controls.$itemFrame.hide();\n                                            self.timeout();\n                                        } else {\n                                            lastDates[timerIndex] = new Date();\n                                        }\n\n                                        var warning = _.findLast(cst.warnings, { showed: false });\n\n                                        if (!_.isEmpty(warning) && _.isFinite(warning.point) && currentTimes[timerIndex] <= warning.point) {\n                                            self.timeWarning(cst, warning);\n                                        }\n\n                                    }, 1000);\n                                }(timerIndex, cst));\n                            }\n                        }\n\n                        $timers = $controls.$timerWrapper.find('.qti-timer .qti-timer_time');\n                        $controls.$timerWrapper.show();\n                    }\n                }\n            },\n\n            /**\n             * Mark appropriate timer by warning colors and show feedback message\n             *\n             * @param {object} cst - Time constraint\n             * @param {integer} cst.warningTime - Warning time in seconds.\n             * @param {integer} cst.qtiClassName - Class name of qti instance for which the timer is set (assessmentItemRef | assessmentSection | testPart | assessmentTest).\n             * @param {integer} cst.seconds - Initial timer value.\n             * @param {object} warning - Current actual warning\n             * @param {integer} warning.point - Warning time point in seconds, when show message\n             * @param {boolean} warning.showed - boolean flag for mark already showed warnings\n             * @param {string} warning.type - type of warning (from config), can be info, warning or error\n             *\n             * @returns {undefined}\n             */\n            timeWarning: function (cst, warning) {\n                var message = '',\n                    remaining,\n                    $timer = $controls.$timerWrapper.find('.qti-timer__type-' + cst.qtiClassName),\n                    $time = $timer.find('.qti-timer_time');\n\n                $time.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\n\n                remaining = moment.duration(warning.point, \"seconds\").humanize();\n\n                switch (cst.qtiClassName) {\n                    case 'assessmentItemRef':\n                        message = __(\"Warning – You have %s remaining to complete this item.\", remaining);\n                        break;\n                    case 'assessmentSection':\n                        message = __(\"Warning – You have %s remaining to complete this section.\", remaining);\n                        break;\n                    case 'testPart':\n                        message = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\n                        break;\n                    case 'assessmentTest':\n                        message = __(\"Warning – You have %s remaining to complete the test.\", remaining);\n                        break;\n                }\n\n                feedback()[warning.type](message);\n\n                cst.warnings[warning.point].showed = true;\n            },\n\n            /**\n             * Displays or hides the rubric block\n             */\n            updateRubrics: function () {\n                $controls.$rubricBlocks.remove();\n\n                if (this.testContext.rubrics.length > 0) {\n\n                    $controls.$rubricBlocks = $('<div id=\"qti-rubrics\"/>');\n\n                    for (var i = 0; i < this.testContext.rubrics.length; i++) {\n                        $controls.$rubricBlocks.append(this.testContext.rubrics[i]);\n                    }\n\n                    // modify the <a> tags in order to be sure it\n                    // opens in another window.\n                    $controls.$rubricBlocks.find('a').bind('click keypress', function () {\n                        window.open(this.href);\n                        return false;\n                    });\n\n                    $controls.$rubricBlocks.prependTo($controls.$contentBox);\n\n                    if (MathJax) {\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $controls.$rubricBlocks[0]);\n                    }\n\n                }\n            },\n\n            /**\n             * Updates the list of navigation buttons (previous, next, skip, etc.)\n             */\n            updateNavigation: function () {\n                $controls.$exit.show();\n\n                if(this.testContext.isLast === true) {\n                    $controls.$moveForward.hide();\n                    $controls.$moveEnd.show();\n                }\n                else {\n                    $controls.$moveForward.show();\n                    $controls.$moveEnd.hide();\n                }\n                if (this.testContext.navigationMode === this.TEST_NAVIGATION_LINEAR) {\n                    // LINEAR\n                    $controls.$moveBackward.hide();\n                }\n                else {\n                    // NONLINEAR\n                    $controls.$controls.show();\n                    if(this.testContext.canMoveBackward === true) {\n                        $controls.$moveBackward.show();\n                    }\n                    else {\n                        $controls.$moveBackward.hide();\n                    }\n                }\n            },\n\n            /**\n             * Updates the test taker review screen\n             */\n            updateTestReview: function() {\n                var considerProgress = this.testContext.considerProgress === true;\n\n                if (this.testReview) {\n                    this.testReview.toggle(considerProgress && this.hasOption(optionReviewScreen));\n                    this.testReview.update(this.testContext);\n                }\n            },\n\n            /**\n             * Updates the progress bar\n             */\n            updateProgress: function () {\n                var considerProgress = this.testContext.considerProgress === true;\n\n                $controls.$progressBox.css('visibility', considerProgress ? 'visible' : 'hidden');\n\n                if (considerProgress) {\n                    this.progressUpdater.update(this.testContext);\n                }\n            },\n\n            /**\n             * Updates the test informations\n             */\n            updateContext: function () {\n\n                $controls.$title.text(this.testContext.testTitle);\n\n                // Visibility of section?\n                var sectionText = (this.testContext.isDeepestSectionVisible === true) ? (' - ' + this.testContext.sectionTitle) : '';\n\n                $controls.$position.text(sectionText);\n                $controls.$titleGroup.show();\n            },\n\n            /**\n             * Displays the right exit button\n             */\n            updateExitButton : function(){\n\n                $controls.$logout.toggleClass('hidden', !this.testContext.logoutButton);\n                $controls.$exit.toggleClass('hidden', !this.testContext.exitButton);\n            },\n\n            /**\n             * Ensures the frame has the right size\n             */\n            adjustFrame: function () {\n                var rubricHeight = $controls.$rubricBlocks.outerHeight(true) || 0;\n                var frameContentHeight;\n                var finalHeight = $(window).innerHeight() - $controls.$topActionBar.outerHeight() - $controls.$bottomActionBar.outerHeight();\n                var itemFrame = $controls.$itemFrame.get(0);\n                $controls.$contentBox.height(finalHeight);\n                if($controls.$sideBars.length){\n                    $controls.$sideBars.each(function() {\n                        var $sideBar = $(this);\n                        $sideBar.height(finalHeight - $sideBar.outerHeight() + $sideBar.height());\n                    });\n                }\n\n                if(itemFrame && itemFrame.contentWindow){\n                    frameContentHeight = $controls.$itemFrame.contents().outerHeight(true);\n\n                    if (frameContentHeight < finalHeight) {\n                        if (rubricHeight) {\n                            frameContentHeight = Math.max(frameContentHeight, finalHeight - rubricHeight);\n                        } else {\n                            frameContentHeight = finalHeight;\n                        }\n                    }\n                    if (itemFrame.contentWindow.$) {\n                        itemFrame.contentWindow.$('body').trigger('setheight', [frameContentHeight]);\n                    }\n                    $controls.$itemFrame.height(frameContentHeight);\n                }\n            },\n\n            /**\n             * Locks the GUI\n             */\n            disableGui: function () {\n                $controls.$naviButtons.addClass('disabled');\n                if (this.testReview) {\n                    this.testReview.disable();\n                }\n            },\n\n            /**\n             * Unlocks the GUI\n             */\n            enableGui: function () {\n                $controls.$naviButtons.removeClass('disabled');\n                if (this.testReview) {\n                    this.testReview.enable();\n                }\n            },\n\n            /**\n             * Hides the GUI\n             */\n            hideGui: function () {\n                $controls.$naviButtons.addClass('hidden');\n                if (this.testReview) {\n                    this.testReview.hide();\n                }\n            },\n\n            /**\n             * Shows the GUI\n             */\n            showGui: function () {\n                $controls.$naviButtons.removeClass('hidden');\n                if (this.testReview) {\n                    this.testReview.show();\n                }\n            },\n\n            /**\n             * Formats a timer\n             * @param {Number} totalSeconds\n             * @returns {String}\n             */\n            formatTime: function (totalSeconds) {\n                var sec_num = totalSeconds;\n                var hours = Math.floor(sec_num / 3600);\n                var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n                var seconds = Math.floor(sec_num - (hours * 3600) - (minutes * 60));\n\n                if (hours < 10) {\n                    hours = \"0\" + hours;\n                }\n                if (minutes < 10) {\n                    minutes = \"0\" + minutes;\n                }\n                if (seconds < 10) {\n                    seconds = \"0\" + seconds;\n                }\n\n                var time = hours + ':' + minutes + ':' + seconds;\n\n                return time;\n            },\n\n            /**\n             * Processes an error\n             * @param {Object} error\n             */\n            processError : function processError(error) {\n                var self = this;\n\n                // keep disabled\n                this.hideGui();\n                this.beforeTransition();\n\n                // ask the parent to display a message\n                iframeNotifier.parent('messagealert', {\n                    message : error.message,\n                    action : function() {\n                        if (testMetaData) {\n                            testMetaData.clearData();\n                        }\n                        if (error.state === self.TEST_STATE_CLOSED) {\n                            // test is closed, finish it\n                            self.serviceApi.finish();\n                        } else {\n                            // test is still open, just exit to the index\n                            self.serviceApi.exit();\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Call action specified in testContext. A postfix <i>Url</i> will be added to the action name.\n             * To specify actions see {@link https://github.com/oat-sa/extension-tao-testqti/blob/master/helpers/class.TestRunnerUtils.php}\n             * @param {String} action - Action name\n             * @param {Object} [extraParams] - Additional parameters to be sent to the server\n             * @returns {undefined}\n             */\n            actionCall: function (action, extraParams) {\n                var self = this,\n                    params = {metaData: testMetaData ? testMetaData.getData() : {}};\n\n                if (extraParams) {\n                    params = _.assign(params, extraParams);\n                }\n                this.beforeTransition(function () {\n                    $.ajax({\n                        url: self.testContext[action + 'Url'],\n                        cache: false,\n                        data: params,\n                        async: true,\n                        dataType: 'json',\n                        success: function (testContext) {\n                            testMetaData.clearData();\n\n                            if (!testContext.success) {\n                                self.processError(testContext);\n                            }\n                            else if (testContext.state === self.TEST_STATE_CLOSED) {\n                                self.serviceApi.finish();\n                            }\n                            else {\n                                self.update(testContext);\n                            }\n                        }\n                    });\n                });\n            },\n\n            /**\n             * Exit from test (after confirmation). All answered questions will be submitted.\n             *\n             * @returns {undefined}\n             */\n            exit: function () {\n                var self = this;\n                testMetaData.addData({\n                    \"TEST\" : {\"TEST_EXIT_CODE\" : testMetaData.TEST_EXIT_CODE.INCOMPLETE},\n                    \"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.QUIT}\n                });\n                this.displayExitMessage(\n                    __('Are you sure you want to end the test?'),\n                    function() {\n                    self.killItemSession(function () {\n                        self.actionCall('endTestSession');\n                        testMetaData.clearData();\n                    });\n                    },\n                    { scope: this.testReview ? this.testContext.reviewScope : null }\n                );\n            },\n\n            /**\n             * Set the state of the current item in the test runner\n             *\n             * @param {string} id\n             * @param {object} state\n             */\n            setCurrentItemState : function(id, state){\n                if(id){\n                    this.currentItemState[id] = state;\n                }\n            },\n\n            /**\n             * Reset the state of the current item in the test runner\n             */\n            resetCurrentItemState : function(){\n                this.currentItemState = {};\n            },\n\n            /**\n             * Get the state of the current item as stored in the test runner\n             * @returns {Object}\n             */\n            getCurrentItemState : function(){\n                return this.currentItemState;\n            }\n        };\n\n        var config = module.config();\n        if (config) {\n            actionBarTools.register(config.qtiTools);\n        }\n\n        return {\n            start: function (testContext) {\n\n                $controls = {\n                    // navigation\n                    $moveForward: $('[data-control=\"move-forward\"]'),\n                    $moveEnd: $('[data-control=\"move-end\"]'),\n                    $moveBackward: $('[data-control=\"move-backward\"]'),\n                    $nextSection: $('[data-control=\"next-section\"]'),\n                    $skip: $('[data-control=\"skip\"]'),\n                    $skipEnd: $('[data-control=\"skip-end\"]'),\n                    $exit: $(window.parent.document).find('[data-control=\"exit\"]'),\n                    $logout: $(window.parent.document).find('[data-control=\"logout\"]'),\n                    $naviButtons: $('.bottom-action-bar .action'),\n                    $skipButtons: $('.navi-box .skip'),\n                    $forwardButtons: $('.navi-box .forward'),\n\n                    // progress bar\n                    $progressBar: $('[data-control=\"progress-bar\"]'),\n                    $progressLabel: $('[data-control=\"progress-label\"]'),\n                    $progressBox: $('.progress-box'),\n\n                    // title\n                    $title:  $('[data-control=\"qti-test-title\"]'),\n                    $position:  $('[data-control=\"qti-test-position\"]'),\n\n                    // timers\n                    $timerWrapper:  $('[data-control=\"qti-timers\"]'),\n\n                    // other zones\n                    $contentPanel: $('.content-panel'),\n                    $controls: $('.qti-controls'),\n                    $itemFrame: $('#qti-item'),\n                    $rubricBlocks: $('#qti-rubrics'),\n                    $contentBox: $('#qti-content'),\n                    $sideBars: $('.test-sidebar'),\n                    $topActionBar: $('.horizontal-action-bar.top-action-bar'),\n                    $bottomActionBar: $('.horizontal-action-bar.bottom-action-bar')\n                };\n\n                // title\n                $controls.$titleGroup = $controls.$title.add($controls.$position);\n\n                $doc.ajaxError(function (event, jqxhr) {\n                    if (jqxhr.status === 403) {\n                        iframeNotifier.parent('serviceforbidden');\n                    }\n                });\n\n                window.onServiceApiReady = function onServiceApiReady(serviceApi) {\n                    TestRunner.serviceApi = serviceApi;\n\n                    if (!testContext.success) {\n                        TestRunner.processError(testContext);\n                    }\n\n                    // If the assessment test session is in CLOSED state,\n                    // we give the control to the delivery engine by calling finish.\n                    else if (testContext.state === TestRunner.TEST_STATE_CLOSED) {\n                        serviceApi.finish();\n                        testMetaData.clearData();\n                    }\n                    else {\n\n                        if (TestRunner.getSessionStateService().getDuration()) {\n                            TestRunner.setTestContext(testContext);\n                            TestRunner.initMetadata();\n\n                            TestRunner.keepItemTimed(TestRunner.getSessionStateService().getDuration());\n                            TestRunner.getSessionStateService().restart();\n                        } else {\n                            TestRunner.update(testContext);\n                        }\n                    }\n                };\n\n                TestRunner.beforeTransition();\n                TestRunner.testContext = testContext;\n\n                $controls.$skipButtons.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.skip();\n                    }\n                });\n\n                $controls.$forwardButtons.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.moveForward();\n                    }\n                });\n\n                $controls.$moveBackward.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.moveBackward();\n                    }\n                });\n\n                $controls.$nextSection.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.nextSection();\n                    }\n                });\n\n                $controls.$exit.click(function (e) {\n                    e.preventDefault();\n                    TestRunner.exit();\n                });\n\n                $(window).on('resize', _.throttle(function () {\n                    TestRunner.adjustFrame();\n                    $controls.$titleGroup.show();\n                }, 250));\n\n                $doc.on('loading', function () {\n                    iframeNotifier.parent('loading');\n                });\n\n\n                $doc.on('unloading', function () {\n                    iframeNotifier.parent('unloading');\n                });\n\n                TestRunner.progressUpdater = progressUpdater($controls.$progressBar, $controls.$progressLabel);\n\n                if (testContext.reviewScreen) {\n                    TestRunner.testReview = testReview($controls.$contentPanel, {\n                        region: testContext.reviewRegion || 'left',\n                        hidden: !TestRunner.hasOption(optionReviewScreen),\n                        reviewScope: testContext.reviewScope,\n                        preventsUnseen: !!testContext.reviewPreventsUnseen,\n                        canCollapse: !!testContext.reviewCanCollapse\n                    }).on('jump', function(event, position) {\n                        TestRunner.jump(position);\n                    }).on('mark', function(event, flag, position) {\n                        TestRunner.markForReview(flag, position);\n                    });\n                    $controls.$sideBars = $('.test-sidebar');\n                }\n\n                TestRunner.updateProgress();\n                TestRunner.updateTestReview();\n\n                iframeNotifier.parent('serviceready');\n\n\n                TestRunner.adjustFrame();\n\n                $controls.$topActionBar.add($controls.$bottomActionBar).animate({ opacity: 1 }, 600);\n\n                deleter($('#feedback-box'));\n                modal($('body'));\n\n                //listen to state change in the current item\n                $(document).on('responsechange', function(e, responseId, response){\n                    if(responseId && response){\n                        TestRunner.setCurrentItemState(responseId, {response:response});\n                    }\n                }).on('stateready', function(e, id, state){\n                    if(id && state){\n                        TestRunner.setCurrentItemState(id, state);\n                    }\n                }).on('heightchange', function(e, height) {\n                    $controls.$itemFrame.height(height);\n                });\n\n            }\n        };\n    });\n\n"]}