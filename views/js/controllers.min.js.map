{"version":3,"sources":["routes.js","creator/helpers/baseType.js","creator/helpers/cardinality.js","creator/helpers/outcomeValidator.js","creator/helpers/qtiElement.js","creator/helpers/outcome.js","creator/helpers/category.js","creator/modelOverseer.js","creator/templates/testpart!tpl","creator/templates/section!tpl","creator/templates/rubricblock!tpl","creator/templates/itemref!tpl","creator/templates/item!tpl","creator/templates/outcomes!tpl","tpl!taoQtiTest/controller/creator/templates/test-props","tpl!taoQtiTest/controller/creator/templates/testpart-props","tpl!taoQtiTest/controller/creator/templates/section-props","tpl!taoQtiTest/controller/creator/templates/itemref-props","tpl!taoQtiTest/controller/creator/templates/itemref-props-weight","tpl!taoQtiTest/controller/creator/templates/rubricblock-props","tpl!taoQtiTest/controller/creator/templates/category-presets","creator/templates/index.js","creator/views/item.js","creator/views/property.js","creator/views/actions.js","creator/helpers/categorySelector.js","creator/helpers/sectionCategory.js","creator/helpers/qtiTest.js","creator/views/itemref.js","creator/encoders/dom2qti.js","creator/helpers/ckConfigurator.js","creator/views/rubricblock.js","creator/helpers/sectionBlueprints.js","creator/views/section.js","creator/views/testpart.js","creator/views/test.js","creator/helpers/processingRule.js","creator/helpers/scoring.js","creator/creator.js","../testRunner/actionBarHook.js","../testRunner/actionBarTools.js","../testRunner/tpl/navigator!tpl","../testRunner/tpl/navigatorTree!tpl","../testRunner/testReview.js","../testRunner/progressUpdater.js","../testRunner/testMetaData.js","../../serviceApi/ServiceApi.js","../../serviceApi/UserInfoService.js","../../serviceApi/StateStorage.js","runtime/testRunner.js"],"names":["define","Creator","css","actions","index","_","baseTypeEnum","IDENTIFIER","BOOLEAN","INTEGER","FLOAT","STRING","POINT","PAIR","DIRECTED_PAIR","DURATION","FILE","URI","INT_OR_IDENTIFIER","COORDS","ANY","SAME","baseTypeHelper","asArray","getValid","type","defaultType","isFinite","getNameByConstant","getConstantByName","isUndefined","getValue","value","isString","toLowerCase","parseInt","parseFloat","isNaN","name","String","trim","constant","operator","assign","cardinalityEnum","SINGLE","MULTIPLE","ORDERED","RECORD","cardinalityHelper","cardinality","defaultCardinality","validateIdentifier","identifier","identifierValidator","test","validateOutcome","outcome","checkIdentifier","allowedTypes","validOutcome","isPlainObject","validIdentifier","isArray","indexOf","validateOutcomes","outcomes","valid","forEach","outcomeValidator","forceArray","qtiElementHelper","create","properties","element","qti-type","TypeError","find","collection","checkType","qtiElement","types","found","lookupElement","tree","path","nodeName","key","steps","split","nodeNames","len","length","i","partial","has","lookupProperty","result","propertyName","pop","outcomeHelper","getProcessingRuleExpression","outcomeRule","getProcessingRuleProperty","getOutcomeIdentifier","isObject","getOutcomeDeclarations","testModel","outcomeDeclarations","getOutcomeProcessingRules","rules","outcomeProcessing","outcomeRules","eachOutcomeDeclarations","cb","eachOutcomeProcessingRules","eachOutcomeProcessingRuleExpressions","browseExpressions","processingRule","expression","expressions","listOutcomes","isFunction","push","removeOutcomes","check","declarations","indexBy","remove","createOutcome","views","interpretation","longInterpretation","normalMaximum","normalMinimum","masteryValue","baseType","addOutcomeProcessing","addOutcome","replaceOutcomes","concat","isCategoryOption","category","eachCategories","testParts","testPart","assessmentSections","assessmentSection","sectionParts","itemRef","categories","listCategories","keys","listOptions","options","eventifier","statifier","categoryHelper","modelOverseerFactory","model","config","modelOverseer","getModel","setModel","newModel","trigger","this","getConfig","getOutcomesList","map","declaration","getOutcomesNames","getCategories","getOptions","hb","template","Handlebars","depth0","helpers","partials","data","compilerInfo","merge","stack1","helper","buffer","functionType","escapeExpression","call","hash","helperMissing","title","__","href","label","program1","uri","parent","inverse","self","noop","fn","program","program2","each","program4","modes","program5","selected","program3","description","scoring","hasBlueprint","orderIndex","feedback","groupId","groupLabel","presets","qtiCategory","id","section","rubricBlock","item","testProps","testPartProps","sectionProps","itemRefProps","itemRefPropsWeight","rubricBlockProps","categoryPresets","testpart","itemref","rubricblock","itemrefweight","categorypresets","$","templates","itemTemplate","itemView","loadItems","setUpLiveSearch","timeout","liveSearch","pattern","$search","val","clearTimeout","setTimeout","getItems","keyup","siblings","click","update","items","disableSelection","$itemBox","empty","append","enableSelection","$panel","selectable","filter","event","ui","addClass","unselected","removeClass","stop","then","pluck","DataBinder","propView","tmplName","propValidation","$view","on","e","isValid","namespace","$togglers","groupValidator","$container","open","databinder","binderOptions","children","hide","appendTo","startDomComponent","bind","getView","isOpen","onOpen","stopPropagation","onClose","destroy","toggle","not","show","propertyView","preventDefault","$elt","hasClass","disabledClass","blur","activeClass","btnOnClass","move","$actionContainer","containerClass","elementClass","$element","parents","$elements","is","fadeOut","insertBefore","fadeIn","insertAfter","movable","actionContainerElt","$moveUp","$moveDown","removable","$delete","disable","enable","tooltip","categorySelectorFactory","updateCategories","selectedCategories","indeterminatedCategories","presetSelected","toArray","categoryEl","presetIndeterminate","customSelected","$customCategoriesSelect","textContent","customIndeterminate","categorySelector","$presetsCheckboxes","$presetsContainer","createForm","currentCategories","presetsTpl","customCategories","difference","allQtiCategoriesPresets","allPresets","$checkbox","$preset","target","closest","prop","defer","select2","width","tags","multiple","tokenSeparators","formatNoMatches","maximumInputLength","updateFormState","indeterminate","checked","$li","content","text","extractCategoriesFromPresets","reduce","prev","current","groupIds","setPresets","errorHandler","isValidSectionModel","setCategories","toRemove","toAdd","all","propagated","addCategories","removeCategories","arrays","union","compact","values","apply","intersection","sort","throw","_ns","qtiTestHelper","extractIdentifiers","obj","identifiers","flatten","getIdentifier","qtiType","lockedIdentifiers","suggestion","glue","contains","idFormatValidator","qtiIdPattern","message","validate","callback","testidFormatValidator","qtiTestIdPattern","idAvailableValidator","original","filterQtiType","addMissingQtiType","parentType","isNumber","replace","consolidateModel","ordering","undefined","shuffle","part","rubricBlocks","validateModel","feedbackBlock","outcomeIdentifier","Error","sectionCategory","setUp","refModel","$itemRef","propHandler","removePropHandler","categoriesProperty","weightsProperty","$categoryField","join","$weightList","weightTpl","defaultData","weights","resize","listenActionState","document","$parent","$target","throttle","$refs","first","$actions","innerWidth","outerWidth","getAttributes","object","omit","attrToStr","attributes","acc","isEmpty","normalizeNodeName","normalized","toLocaleLowerCase","normalizedNodes","feedbackblock","outcomeidentifier","showhide","encode","modelValue","startTag","decode","nodeValue","$nodeValue","elt","nodeType","xmlBase","class","lang","transform","childNodes","ckConfigurator","mathJax","editor","toolbarType","underline","hider","dialogAlert","namespaceHelper","ckeditor","Dom2QtiEncoder","filterPlugin","plugin","ckConfig","plugins","reject","extraPlugins","rubricModel","$rubricBlock","bindEvent","$el","eventName","namespaceAll","uid","off","ensureWrap","html","charAt","editorToModel","rubric","wrapper","$rubricBlockContent","modelToEditor","updateFeedback","activated","matchValue","changeFeedback","$feedbackOutcomeLine","$feedbackMatchLine","changeHandler","changedModel","updateOutcomes","$feedbackOutcome","minimumResultsForSearch","$feedbackActivated","removeAttr","rbViews","$propContainer","$select","syncRubricBlockContent","debounce","uniqueId","before","feedbackOutcome","changedRubricBlock","inline","setBlueprint","blueprint","getBlueprint","getUrl","ajax","url","dataType","fail","itemRefView","rubricBlockView","sectionBlueprint","sectionModel","$section","$title","$selectionSwitcher","$selectionSelect","$selectionWithRep","switchSelection","incrementer","selection","blueprintProperty","itemRefs","labels","acceptItemRefs","$selected","$items","Array","prototype","slice","arguments","$placeholder","$placeholders","defaultItemData","itemSessionControl","maxAttempts","clone","$item","itemCategories","itemData","defaults","end","addItemRef","attr","itemRefModel","$refList","eq","addRubricBlock","adder","templateData","initBlueprint","routes","blueprintByTestSection","success","blueprintsById","delay","method","params","results","minimumInputLength","allowClear","placeholder","$sections","sectionView","partModel","$testPart","$identifier","sections","addSection","sectionIndex","$testParts","testPartView","testView","changeScoring","noOptions","newScoringState","JSON","stringify","$cutScoreLine","$categoryScoreLine","$weightIdentifierLine","$descriptions","scoringState","$generate","addTestPart","testPartIndex","navigationMode","submissionMode","added","unaryOperator","processingRuleHelper","minOperands","maxOperands","addTypeAndCardinality","binaryOperator","left","right","acceptedCardinalities","acceptedBaseTypes","includeCategories","excludeCategories","addSectionIdentifier","sectionIdentifier","addWeightIdentifier","weightIdentifier","validateOutcomeList","setExpression","addExpression","setOutcomeValue","gte","lte","divide","sum","terms","testVariables","variableIdentifier","outcomeMaximum","numberPresented","baseValue","variable","match","isNull","outcomeCondition","outcomeIf","outcomeElse","outcomeElseIfs","instruction","format","addTotalScoreOutcomes","weight","scoreIdentifier","addMaxScoreOutcomes","addCutScoreOutcomes","countIdentifier","cutScore","addFeedbackScoreOutcomes","passed","notPassed","formatCategoryOutcome","toUpperCase","belongToRecipe","recipe","onlyCategories","signature","weighted","matchRecipe","outcomeRecipe","matchRecipeOutcome","outcomeMatch","categoryIdentifier","categoryWeighted","categoryFeedback","include","outcomesRecipes","signatures","getSignatures","signatureMatch","getRecipes","descriptors","getOutcomesRecipe","mode","processingRecipe","listScoringModes","handleCategories","categoryScore","hasCategoryOutcome","categoryOutcomes","outcomeDeclaration","getCutScore","uniq","defaultCutScore","Math","max","getWeightIdentifier","getOutcomeProcessing","included","processing","diff","count","size","detectScoring","processingModes","defaultScoreIdentifier","removeScoring","scoringOutcomes","getOutcomes","none","custom","total","cut","clean","writer","feedbackOk","feedbackFailed","outcomesWriters","descriptor","totalModeOutcomes","whichOutcome","categoryOutcome","categoryOutcomeIdentifier","categoryScoreIdentifier","categoryCountIdentifier","scoringHelper","init","generate","recipes","module","history","DataBindController","itemrefView","validators","Promise","search","resolve","getJSON","notempty","done","xhr","status","statusText","uris","Controller","start","binder","$saver","categoriesPresets","back","filters","isItemRef","isSection","encoders","dom2qti","beforeSave","err","error","takeControl","get","register","window","save","isValidConfig","toolconfig","hook","triggerItemLoaded","tool","itemLoaded","initQtiTool","$toolsContainer","testContext","testRunner","itemIsLoaded","tools","require","$button","$existingBtn","isValidHook","clear","isVisible","render","_appendInOrder","$after","$before","order","prepend","$btn","_order","after","$doc","actionBarHook","registeredQtiTools","qtiTools","actionBarTools","registerTools","getRegisteredTools","getRegistered","isRegistered","list","container","promises","forIn","getId","region","hidden","active","program29","program6","program7","answered","program8","program9","flagged","program11","program13","viewed","program17","program15","position","program21","program19","program24","program22","program27","program25","itemId","parts","navigatorTpl","navigatorTreeTpl","capitalize","_cssCls","collapsed","collapsible","disabled","unseen","icon","scope","testSection","_selectors","component","filterBar","collapseHandle","linearState","infoAnswered","infoViewed","infoUnanswered","infoFlagged","infoPanel","infoPanelLabels","partLabels","sectionLabels","itemLabels","itemIcons","icons","linearStart","counters","actives","collapsiblePanels","notFlagged","notAnswered","_filterMap","unanswered","filtered","_optionsMap","reviewScope","reviewPreventsUnseen","canCollapse","_reviewScopes","testReview","initOptions","putOnRight","insertMethod","currentFilter","$component","_loadDOM","_initEvents","_updateDisplayOptions","$infoAnswered","$infoViewed","$infoUnanswered","$infoFlagged","$filterBar","$filters","$tree","$linearState","toggleClass","_openSelected","_togglePanel","_openOnly","_mark","_select","_jump","_filter","criteria","_updateSectionCounters","jquery","hierarchy","parentsUntil","add","opened","root","panel","collapseSelector","_setItemIcon","_adjustItemIcon","defaultIcon","iconCls","cls","_toggleFlag","flag","itemPosition","$filtered","nb","_writeCount","scopeClass","$root","_updateOptions","optionKey","contextKey","_updateInfos","progression","Number","$place","_getProgressionOfTest","numberItems","numberCompleted","numberFlagged","_getProgressionOfTestPart","numberItemsPart","numberCompletedPart","numberPresentedPart","numberFlaggedPart","_getProgressionOfTestSection","numberItemsSection","numberCompletedSection","numberPresentedSection","numberFlaggedSection","_updateTree","navigatorMap","reviewScopePart","reviewScopeSection","_partsFilter","preventsUnseen","setItemFlag","updateNumberFlagged","fields","currentPosition","currentFound","currentSection","currentPart","itemFound","itemSection","itemPart","field","getProgression","progressInfoMethod","dom","extraParameters","testReviewFactory","progressUpdaters","progressBar","progressLabel","progressbar","write","ratio","progressIndicator","progressIndicatorMethod","percentageProgression","floor","positionProgression","progressScope","progressIndicatorScope","progressScopeCounter","counter","progressUpdaterFactory","updater","testMetaDataFactory","_testServiceCallId","testServiceCallId","testMetaData","setData","getLocalStorageData","setLocalStorageData","currentKey","getLocalStorageKey","localStorage","setItem","domException","removed","removeItem","getItem","parse","_storageKeyPrefix","_data","SECTION_EXIT_CODE","COMPLETED_NORMALLY","QUIT","COMPLETE_TIMEOUT","TIMEOUT","FORCE_QUIT","IN_PROGRESS","ERROR","TEST_EXIT_CODE","COMPLETE","TERMINATED","INCOMPLETE","INCOMPLETE_QUIT","INACTIVE","CANDIDATE_DISAGREED_WITH_NDA","getTestServiceCallId","setTestServiceCallId","addData","overwrite","getData","clearData","UrlParser","ServiceApi","baseUrl","parameters","serviceCallId","stateStorage","userService","paused","connected","state","hasBeenPaused","SIG_SUCCESS","SIG_ERROR","loadInto","frame","$frame","callUrl","getCallUrl","isCORSAllowed","checkCORS","connect","contentWindow","__knownParent__","onServiceApiReady","param","getUserPropertyValues","property","getServiceCallId","getState","setState","set","getHasBeenPaused","setHasBeenPaused","getParameter","onFinish","onFinishCallback","onKill","onKillCallback","onExit","onExitCallback","kill","exit","finish","valueArray","UserInfoService","requestUrl","hasOwnProperty","service","r","StateStorage","submitUrl","progressUpdater","iframeNotifier","MathJax","deleter","moment","modal","timerIds","currentTimes","lastDates","timeDiffs","waitingTime","$timers","$controls","timerIndex","sessionStateService","optionNextSection","optionNextSectionWarning","optionReviewScreen","optionEndTestWarning","optionNoExitTimedSectionWarning","TestRunner","TEST_STATE_INITIAL","TEST_STATE_INTERACTING","TEST_STATE_MODAL_FEEDBACK","TEST_STATE_SUSPENDED","TEST_STATE_CLOSED","TEST_NAVIGATION_LINEAR","TEST_NAVIGATION_NONLINEAR","TEST_ITEM_STATE_INTERACTING","beforeTransition","disableGui","$itemFrame","$rubricBlocks","$timerWrapper","afterTransition","enableGui","ITEM","ITEM_START_TIME_CLIENT","Date","now","jump","action","isJumpOutOfSection","isCurrentItemActive","isTimedSection","exitTimedSection","killItemSession","actionCall","keepItemTimed","duration","markForReview","markForReviewUrl","cache","async","itemFlagged","updateTools","moveForward","doExitSection","isTimeout","exitSection","itemPositionSection","shouldDisplayEndTestWarning","displayEndTestWarning","isLast","hasOption","nextAction","confirmLabel","cancelLabel","showItemCount","displayExitMessage","moveBackward","jumpPosition","getCurrentSectionItems","isJumpToOtherSection","isValidPosition","exitCode","SECTION","qtiRunner","getQtiRunner","doExitTimedSection","updateItemApi","keepTimerUpToTimeout","nextSection","doNextSection","scopeSuffixMap","scopeSuffix","$confirmBox","unansweredCount","flaggedCount","isCurrentItemAnswered","toString","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","itemServiceApi","itemSessionState","getCurrentItemState","response","base","option","itemFrame","getElementById","itemWindow","itemContainerFrame","itemContainerWindow","timeConstraints","qtiClassName","sectionItems","partId","testPartId","navMap","partIndex","skip","doSkip","updateTimer","confirmBox","confirmBtn","setTestContext","eval","itemServiceApiCall","initMetadata","getSessionStateService","accuracy","$runner","restart","updateContext","updateProgress","updateNavigation","updateTestReview","updateInformation","updateRubrics","updateExitButton","resetCurrentItemState","$contentBox","adjustFrame","visibility","itemIdentifier","showSkip","showSkipEnd","showNextSection","allowSkipping","$skip","$skipEnd","$nextSection","createTimer","cst","$timer","$label","$time","formatTime","seconds","hasTimers","$topActionBar","allowLateSubmission","timerWarning","warnings","showed","point","closestPreviousWarning","setInterval","getTime","round","clearInterval","warning","findLast","timeWarning","remaining","humanize","rubrics","prependTo","Hub","Queue","$exit","$moveForward","$moveEnd","$moveBackward","canMoveBackward","considerProgress","$progressBox","testTitle","sectionText","isDeepestSectionVisible","sectionTitle","$position","$titleGroup","$logout","logoutButton","exitButton","frameContentHeight","rubricHeight","outerHeight","finalHeight","innerHeight","$bottomActionBar","height","$sideBars","$sideBar","contents","$naviButtons","hideGui","showGui","totalSeconds","sec_num","hours","minutes","time","processError","serviceApi","extraParams","metaData","TEST","setCurrentItemState","currentItemState","$skipButtons","$forwardButtons","$progressBar","$progressLabel","$contentPanel","ajaxError","jqxhr","getDuration","reviewScreen","reviewRegion","reviewCanCollapse","animate","opacity","responseId"],"mappings":"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","file":"routes.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n * \n * \n */\n\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\ndefine('taoQtiTest/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'Creator': {\n            'css': 'creator', \n            'actions': {\n                'index' : 'controller/creator/creator'\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * The BaseType enumeration (port of \\qtism\\common\\enums\\BaseType).\n *\n * From IMS QTI:\n *\n * A base-type is simply a description of a set of atomic values (atomic to this specification).\n * Note that several of the baseTypes used to define the runtime data model have identical\n * definitions to those of the basic data types used to define the values for attributes\n * in the specification itself. The use of an enumeration to define the set of baseTypes\n * used in the runtime model, as opposed to the use of classes with similar names, is\n * designed to help distinguish between these two distinct levels of modelling.\n *\n * @author Jérôme Bogaerts <jerome@taotesting.com>\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/baseType',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The list of QTI base types\n     * @type {Object}\n     */\n    var baseTypeEnum = {\n        /**\n         * From IMS QTI:\n         *\n         * The set of identifier values is the same as the set of values\n         * defined by the identifier class.\n         *\n         * @type {Number}\n         */\n        IDENTIFIER: 0,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of boolean values is the same as the set of values defined\n         * by the boolean class.\n         *\n         * @type {Number}\n         */\n        BOOLEAN: 1,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of integer values is the same as the set of values defined\n         * by the integer class.\n         *\n         * @type {Number}\n         */\n        INTEGER: 2,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of float values is the same as the set of values defined by the\n         * float class.\n         *\n         * @type {Number}\n         */\n        FLOAT: 3,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of string values is the same as the set of values defined by the\n         * string class.\n         *\n         * @type {Number}\n         */\n        STRING: 4,\n\n        /**\n         * From IMS QTI:\n         *\n         * A point value represents an integer tuple corresponding to a graphic point.\n         * The two integers correspond to the horizontal (x-axis) and vertical (y-axis)\n         * positions respectively. The up/down and left/right senses of the axes are\n         * context dependent.\n         *\n         * @type {Number}\n         */\n        POINT: 5,\n\n        /**\n         * From IMS QTI:\n         *\n         * A pair value represents a pair of identifiers corresponding to an association\n         * between two objects. The association is undirected so (A,B) and (B,A) are equivalent.\n         *\n         * @type {Number}\n         */\n        PAIR: 6,\n\n        /**\n         * From IMS QTI:\n         *\n         * A directedPair value represents a pair of identifiers corresponding to a directed\n         * association between two objects. The two identifiers correspond to the source\n         * and destination objects.\n         *\n         * @type {Number}\n         */\n        DIRECTED_PAIR: 7,\n\n        /**\n         * From IMS QTI:\n         *\n         * A duration value specifies a distance (in time) between two time points.\n         * In other words, a time period as defined by [ISO8601], but represented as\n         * a single float that records time in seconds. Durations may have a fractional\n         * part. Durations are represented using the xsd:double datatype rather than\n         * xsd:dateTime for convenience and backward compatibility.\n         *\n         * @type {Number}\n         */\n        DURATION: 8,\n\n        /**\n         * From IMS QTI:\n         *\n         * A file value is any sequence of octets (bytes) qualified by a content-type and an\n         * optional filename given to the file (for example, by the candidate when uploading\n         * it as part of an interaction). The content type of the file is one of the MIME\n         * types defined by [RFC2045].\n         *\n         * @type {Number}\n         */\n        FILE: 9,\n\n        /**\n         * From IMS QTI:\n         *\n         * A URI value is a Uniform Resource Identifier as defined by [URI].\n         *\n         * @type {Number}\n         */\n        URI: 10,\n\n        /**\n         * From IMS QTI:\n         *\n         * An intOrIdentifier value is the union of the integer baseType and\n         * the identifier baseType.\n         *\n         * @type {Number}\n         */\n        INT_OR_IDENTIFIER: 11,\n\n        /**\n         * In qtism, we consider an extra 'coords' baseType.\n         *\n         * @type {Number}\n         */\n        COORDS: 12,\n\n        /**\n         * Express that the operands can have any BaseType from the BaseType enumeration and\n         * can be different.\n         *\n         * @type {Number}\n         */\n        ANY: 12,\n\n        /**\n         * Express that all the operands must have the same\n         * baseType.\n         *\n         * @type {Number}\n         */\n        SAME: 13\n    };\n\n    var baseTypeHelper = _({\n        /**\n         * Gets the the list of QTI base types\n         * @returns {Object}\n         */\n        asArray: function asArray() {\n            return baseTypeEnum;\n        },\n\n        /**\n         * Gets a valid type or the default\n         * @param {String|Number} type\n         * @param {String|Number} [defaultType]\n         * @returns {*}\n         */\n        getValid: function getValid(type, defaultType) {\n            if (_.isFinite(type)) {\n                if (!baseTypeHelper.getNameByConstant(type)) {\n                    type = false;\n                }\n            } else {\n                type = baseTypeHelper.getConstantByName(type);\n            }\n\n            if (false === type) {\n                if (!_.isUndefined(defaultType) && defaultType !== -1) {\n                    type = baseTypeHelper.getValid(defaultType, -1);\n                } else {\n                    type = -1;\n                }\n            }\n\n            return type;\n        },\n\n        /**\n         * Adjusts a value with respect to the type\n         * @param {String|Number} type\n         * @param {*} value\n         * @returns {*}\n         */\n        getValue: function getValue(type, value) {\n            if (_.isString(type)) {\n                type = baseTypeHelper.getConstantByName(type);\n            }\n\n            switch (type) {\n                case baseTypeEnum.URI:\n                case baseTypeEnum.STRING:\n                case baseTypeEnum.IDENTIFIER:\n                    return value + '';\n\n                case baseTypeEnum.BOOLEAN:\n                    if (_.isString(value)) {\n                        switch (value.toLowerCase()) {\n                            case 'true':\n                                return true;\n                            case 'false':\n                                return false;\n                        }\n                    }\n                    return !!value;\n\n                case baseTypeEnum.INTEGER:\n                    return parseInt(value, 10) || 0;\n\n                case baseTypeEnum.FLOAT:\n                    return parseFloat(value) || 0;\n\n                case baseTypeEnum.INT_OR_IDENTIFIER:\n                    if (!_.isNaN(parseInt(value, 10))) {\n                        return parseInt(value, 10) || 0;\n                    } else {\n                        return '' + value;\n                    }\n            }\n\n            return value;\n        },\n\n        /**\n         * Get a constant value from the BaseType enumeration by baseType name.\n         *\n         * * 'identifier' -> baseTypes.IDENTIFIER\n         * * 'boolean' -> baseTypes.BOOLEAN\n         * * 'integer' -> baseTypes.INTEGER\n         * * 'float' -> baseTypes.FLOAT\n         * * 'string' -> baseTypes.STRING\n         * * 'point' -> baseTypes.POINT\n         * * 'pair' -> baseTypes.PAIR\n         * * 'directedPair' -> baseTypes.DIRECTED_PAIR\n         * * 'duration' -> baseTypes.DURATION\n         * * 'file' -> baseTypes.FILE\n         * * 'uri' -> baseTypes.URI\n         * * 'intOrIdentifier' -> baseTypes.INT_OR_IDENTIFIER\n         * * extra 'coords' -> baseTypes.COORDS\n         *\n         * @param {String} name The baseType name.\n         * @return {Number|Boolean} The related enumeration value or `false` if the name could not be resolved.\n         */\n        getConstantByName: function getConstantByName(name) {\n            switch (String(name).trim().toLowerCase()) {\n                case 'identifier':\n                    return baseTypeEnum.IDENTIFIER;\n\n                case 'boolean':\n                    return baseTypeEnum.BOOLEAN;\n\n                case 'integer':\n                    return baseTypeEnum.INTEGER;\n\n                case 'float':\n                    return baseTypeEnum.FLOAT;\n\n                case 'string':\n                    return baseTypeEnum.STRING;\n\n                case 'point':\n                    return baseTypeEnum.POINT;\n\n                case 'pair':\n                    return baseTypeEnum.PAIR;\n\n                case 'directedpair':\n                    return baseTypeEnum.DIRECTED_PAIR;\n\n                case 'duration':\n                    return baseTypeEnum.DURATION;\n\n                case 'file':\n                    return baseTypeEnum.FILE;\n\n                case 'uri':\n                    return baseTypeEnum.URI;\n\n                case 'intoridentifier':\n                    return baseTypeEnum.INT_OR_IDENTIFIER;\n\n                case 'coords':\n                    return baseTypeEnum.COORDS;\n\n                case 'any':\n                    return baseTypeEnum.ANY;\n\n                case 'same':\n                    return baseTypeEnum.SAME;\n\n                default:\n                    return false;\n            }\n        },\n\n        /**\n         * Get the QTI name of a BaseType.\n         *\n         * @param {Number} constant A constant value from the BaseType enumeration.\n         * @param {Boolean} [operator] A flag that allow to switch between operator an value types to prevent duplicate name issue\n         * @return {String|Boolean} The QTI name or false if not match.\n         */\n        getNameByConstant: function getNameByConstant(constant, operator) {\n            switch (constant) {\n                case baseTypeEnum.IDENTIFIER:\n                    return 'identifier';\n\n                case baseTypeEnum.BOOLEAN:\n                    return 'boolean';\n\n                case baseTypeEnum.INTEGER:\n                    return 'integer';\n\n                case baseTypeEnum.FLOAT:\n                    return 'float';\n\n                case baseTypeEnum.STRING:\n                    return 'string';\n\n                case baseTypeEnum.POINT:\n                    return 'point';\n\n                case baseTypeEnum.PAIR:\n                    return 'pair';\n\n                case baseTypeEnum.DIRECTED_PAIR:\n                    return 'directedPair';\n\n                case baseTypeEnum.DURATION:\n                    return 'duration';\n\n                case baseTypeEnum.FILE:\n                    return 'file';\n\n                case baseTypeEnum.URI:\n                    return 'uri';\n\n                case baseTypeEnum.INT_OR_IDENTIFIER:\n                    return 'intOrIdentifier';\n\n                case baseTypeEnum.COORDS:\n                case baseTypeEnum.ANY:\n                    if (operator) {\n                        return 'any';\n                    } else {\n                        return 'coords';\n                    }\n\n                case baseTypeEnum.SAME:\n                    return 'same';\n\n                default:\n                    return false;\n            }\n        }\n    }).assign(baseTypeEnum).value();\n\n    return baseTypeHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * The Cardinality enumeration (port of \\qtism\\common\\enums\\Cardinality).\n *\n * From IMS QTI:\n *\n * An expression or itemVariable can either be single-valued or multi-valued. A multi-valued\n * expression (or variable) is called a container. A container contains a list of values,\n * this list may be empty in which case it is treated as NULL. All the values in a multiple\n * or ordered container are drawn from the same value set, however, containers may contain\n * multiple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value\n * for a container. A container with cardinality multiple and value [A,B,C] is equivalent\n * to a similar one with value [C,B,A] whereas these two values would be considered distinct\n * for containers with cardinality ordered. When used as the value of a response variable\n * this distinction is typified by the difference between selecting choices in a multi-response\n * multi-choice task and ranking choices in an order objects task. In the language of [ISO11404]\n * a container with multiple cardinality is a \"bag-type\", a container with ordered cardinality\n * is a \"sequence-type\" and a container with record cardinality is a \"record-type\".\n *\n * The record container type is a special container that contains a set of independent values\n * each identified by its own identifier and having its own base-type. This specification\n * does not make use of the record type directly however it is provided to enable\n * customInteractions to manipulate more complex responses and customOperators to\n * return more complex values, in addition to the use for detailed information about\n * numeric responses described in the stringInteraction abstract class.\n *\n * @author Jérôme Bogaerts <jerome@taotesting.com>\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/cardinality',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The list of QTI cardinalities\n     * @type {Object}\n     */\n    var cardinalityEnum = {\n        /**\n         * Single term cardinality\n         *\n         * @type {Number}\n         */\n        SINGLE: 0,\n\n        /**\n         * Multiple terms cardinality\n         *\n         * @type {Number}\n         */\n        MULTIPLE: 1,\n\n        /**\n         * Ordered terms cardinality\n         *\n         * @type {Number}\n         */\n        ORDERED: 2,\n\n        /**\n         * Record term cardinality\n         *\n         * @type {Number}\n         */\n        RECORD: 3,\n\n        /**\n         * Express that all the expressions involved in an operator have\n         * the same cardinality.\n         *\n         * @type {Number}\n         */\n        SAME: 4,\n\n        /**\n         * Express that all the expressions involved in an operator may\n         * have any cardinality.\n         *\n         * @type {Number}\n         */\n        ANY: 5\n    };\n\n    var cardinalityHelper = _({\n        /**\n         * Gets the the list of QTI cardinalities\n         * @returns {Object}\n         */\n        asArray: function asArray() {\n            return cardinalityEnum;\n        },\n\n        /**\n         * Gets a valid cardinality or the default\n         * @param {String|Number} cardinality\n         * @param {String|Number} [defaultCardinality]\n         * @returns {*}\n         */\n        getValid: function getValid(cardinality, defaultCardinality) {\n            if (_.isFinite(cardinality)) {\n                if (!cardinalityHelper.getNameByConstant(cardinality)) {\n                    cardinality = false;\n                }\n            } else {\n                cardinality = cardinalityHelper.getConstantByName(cardinality);\n            }\n\n            if (false === cardinality) {\n                if (!_.isUndefined(defaultCardinality) && defaultCardinality !== cardinalityEnum.SINGLE) {\n                    cardinality = cardinalityHelper.getValid(defaultCardinality, cardinalityEnum.SINGLE);\n                } else {\n                    cardinality = cardinalityEnum.SINGLE;\n                }\n            }\n\n            return cardinality;\n        },\n\n        /**\n         * Get a constant value from its name.\n         *\n         * @param {String} name The name of the constant, as per QTI spec.\n         * @return {Number|Boolean} The constant value or `false` if not found.\n         */\n        getConstantByName: function getConstantByName(name) {\n            switch (String(name).trim().toLowerCase()) {\n                case 'single':\n                    return cardinalityEnum.SINGLE;\n\n                case 'multiple':\n                    return cardinalityEnum.MULTIPLE;\n\n                case 'ordered':\n                    return cardinalityEnum.ORDERED;\n\n                case 'record':\n                    return cardinalityEnum.RECORD;\n\n                case 'same':\n                    return cardinalityEnum.SAME;\n\n                case 'any':\n                    return cardinalityEnum.ANY;\n\n                default:\n                    return false;\n            }\n        },\n\n        /**\n         * Get the name of a constant from its value.\n         *\n         * @param {Number} constant The constant value to search the name for.\n         * @return {String|Boolean} The name of the constant or false if not found.\n         */\n        getNameByConstant: function getNameByConstant(constant) {\n            switch (constant) {\n                case cardinalityEnum.SINGLE:\n                    return 'single';\n\n                case cardinalityEnum.MULTIPLE:\n                    return 'multiple';\n\n                case cardinalityEnum.ORDERED:\n                    return 'ordered';\n\n                case cardinalityEnum.RECORD:\n                    return 'record';\n\n                case cardinalityEnum.SAME:\n                    return 'same';\n\n                case cardinalityEnum.ANY:\n                    return 'any';\n\n                default:\n                    return false;\n            }\n        }\n    }).assign(cardinalityEnum).value();\n\n    return cardinalityHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/outcomeValidator',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The RegEx that validates outcome identifiers\n     * @type {RegExp}\n     */\n    var identifierValidator = /^[a-zA-Z_][a-zA-Z0-9_\\.-]*$/;\n\n    /**\n     * Checks the validity of an identifier\n     * @param {String} identifier\n     * @returns {Boolean}\n     */\n    function validateIdentifier(identifier) {\n        return !!(identifier && _.isString(identifier) && identifierValidator.test(identifier));\n    }\n\n    /**\n     * Checks if an object is a valid outcome\n     * @param {Object} outcome\n     * @param {Boolean} [checkIdentifier]\n     * @param {String||String[]} [allowedTypes]\n     * @returns {Boolean}\n     */\n    function validateOutcome(outcome, checkIdentifier, allowedTypes) {\n        var validOutcome = _.isPlainObject(outcome) && validateIdentifier(outcome['qti-type']);\n        var validIdentifier = !checkIdentifier || (outcome && validateIdentifier(outcome.identifier));\n\n        if (allowedTypes) {\n            allowedTypes = !_.isArray(allowedTypes) ? [allowedTypes] : allowedTypes;\n            validOutcome =  validOutcome && _.indexOf(allowedTypes, outcome['qti-type']) >= 0;\n        }\n\n        return !!(validOutcome && validIdentifier);\n    }\n\n    /**\n     * Checks if an array contains valid outcomes\n     * @param {Array} outcomes\n     * @param {Boolean} [checkIdentifier]\n     * @param {String||String[]} [allowedTypes]\n     * @returns {Boolean}\n     */\n    function validateOutcomes(outcomes, checkIdentifier, allowedTypes) {\n        var valid = _.isArray(outcomes);\n        _.forEach(outcomes, function(outcome) {\n            if (!validateOutcome(outcome, checkIdentifier, allowedTypes)) {\n                valid = false;\n                return false;\n            }\n        });\n        return valid;\n    }\n\n    return {\n        validateIdentifier: validateIdentifier,\n        validateOutcomes: validateOutcomes,\n        validateOutcome: validateOutcome\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/qtiElement',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/outcomeValidator'\n], function (_, outcomeValidator) {\n    'use strict';\n\n    var qtiElementHelper = {\n        /**\n         * Creates a QTI element\n         * @param {String} type - The QTI type of the element to create\n         * @param {String|Object} [identifier] - An optional identifier, or a list of properties\n         * @param {Object} [properties] - A list of additional properties\n         * @returns {Object}\n         * @throws {TypeError} if the type or the identifier is not valid\n         */\n        create: function create(type, identifier, properties) {\n            var element = {\n                'qti-type': type\n            };\n\n            if (!outcomeValidator.validateIdentifier(type)) {\n                throw new TypeError('You must provide a valid QTI type!');\n            }\n\n            if (_.isPlainObject(identifier)) {\n                properties = identifier;\n                identifier = null;\n            }\n\n            if (identifier) {\n                if (!outcomeValidator.validateIdentifier(identifier)) {\n                    throw new TypeError('You must provide a valid identifier!');\n                }\n                element.identifier = identifier;\n            }\n\n            return _.assign(element, properties || {});\n        },\n\n        /**\n         * Finds a QTI element in a collection, by its type.\n         * The collection may also be a single object.\n         * @param {Array|Object} collection\n         * @param {Array|String} type\n         * @returns {Object}\n         */\n        find: function find(collection, type) {\n            var found = null;\n            var types = forceArray(type);\n\n            function checkType(qtiElement) {\n                if (types.indexOf(qtiElement['qti-type']) >= 0) {\n                    found = qtiElement;\n                    return false;\n                }\n            }\n\n            if (_.isArray(collection)) {\n                _.forEach(collection, checkType);\n            } else if (collection) {\n                checkType(collection);\n            }\n\n            return found;\n        },\n\n        /**\n         * Finds an element from a tree.\n         * The path to the element is based on QTI types.\n         * @param {Object} tree - The root of the tree from which get the property\n         * @param {String|String[]} path - The path to the element, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\n         * @param {String|String[]} nodeName - The name of the nodes that may contain subtrees\n         * @returns {*}\n         */\n        lookupElement: function lookupElement(tree, path, nodeName) {\n            var steps = _.isArray(path) ? path : path.split('.');\n            var nodeNames = forceArray(nodeName);\n            var len = steps.length;\n            var i = 0;\n            var key;\n\n            while (tree && i < len) {\n                tree = qtiElementHelper.find(tree, steps[i++]);\n                if (tree && i < len) {\n                    key = _.find(nodeNames, _.partial(_.has, tree));\n                    tree = key && tree[key];\n                }\n            }\n\n            return tree || null;\n        },\n\n        /**\n         * Finds a property from a tree.\n         * The path to the property is based on QTI types.\n         * @param {Object} tree - The root of the tree from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\n         * @param {String|String[]} nodeName - The name of the nodes that may contain subtrees\n         * @returns {*}\n         */\n        lookupProperty: function lookupProperty(tree, path, nodeName) {\n            var result = null;\n            var steps = _.isArray(path) ? path : path.split('.');\n            var propertyName = steps.pop();\n            var element = qtiElementHelper.lookupElement(tree, steps, nodeName);\n\n            if (element && element[propertyName]) {\n                result = element[propertyName];\n            }\n\n            return result;\n        }\n    };\n\n    /**\n     * Ensures a value is an array\n     * @param {*} value\n     * @returns {Array}\n     */\n    function forceArray(value) {\n        if (!value) {\n            value = [];\n        }\n        if (!_.isArray(value)) {\n            value = [value];\n        }\n        return value;\n    }\n\n    return qtiElementHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to manage outcomes inside a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/outcome',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/outcomeValidator',\n    'taoQtiTest/controller/creator/helpers/qtiElement',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality'\n], function (_, outcomeValidator, qtiElementHelper, baseTypeHelper, cardinalityHelper) {\n    'use strict';\n\n    var outcomeHelper = {\n        /**\n         * Gets a property from an outcome rule expression.\n         * The path to the property is based on QTI types.\n         * @param {Object} outcomeRule - The outcome rule from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\n         * @returns {*}\n         */\n        getProcessingRuleExpression: function getProcessingRuleExpression(outcomeRule, path) {\n            return qtiElementHelper.lookupElement(outcomeRule, path, ['expression', 'expressions']);\n        },\n\n        /**\n         * Gets a property from an outcome rule expression.\n         * The path to the property is based on QTI types.\n         * @param {Object} outcomeRule - The outcome rule from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\n         * @returns {*}\n         */\n        getProcessingRuleProperty: function getProcessingRuleProperty(outcomeRule, path) {\n            return qtiElementHelper.lookupProperty(outcomeRule, path, ['expression', 'expressions']);\n        },\n\n        /**\n         * Gets the identifier of an outcome\n         * @param {Object|String} outcome\n         * @returns {String}\n         */\n        getOutcomeIdentifier: function getOutcomeIdentifier(outcome) {\n            return String(_.isObject(outcome) ? outcome.identifier : outcome);\n        },\n\n        /**\n         * Gets the list of outcome declarations\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        getOutcomeDeclarations: function getOutcomeDeclarations(testModel) {\n            var outcomes = testModel && testModel.outcomeDeclarations;\n            return outcomes || [];\n        },\n\n        /**\n         * Gets the list of outcome processing rules\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        getOutcomeProcessingRules: function getOutcomeProcessingRules(testModel) {\n            var rules = testModel && testModel.outcomeProcessing && testModel.outcomeProcessing.outcomeRules;\n            return rules || [];\n        },\n\n        /**\n         * Applies a function on each outcome declarations\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeDeclarations: function eachOutcomeDeclarations(testModel, cb) {\n            _.forEach(outcomeHelper.getOutcomeDeclarations(testModel), cb);\n        },\n\n        /**\n         * Applies a function on each outcome processing rules. Does not take care of sub-expressions.\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeProcessingRules: function eachOutcomeProcessingRules(testModel, cb) {\n            _.forEach(outcomeHelper.getOutcomeProcessingRules(testModel), cb);\n        },\n\n        /**\n         * Applies a function on each outcome processing rules, take care of each sub expression.\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeProcessingRuleExpressions: function eachOutcomeProcessingRuleExpressions(testModel, cb) {\n            function browseExpressions(processingRule) {\n                if (_.isArray(processingRule)) {\n                    _.forEach(processingRule, browseExpressions);\n                } else if (processingRule) {\n                    cb(processingRule);\n\n                    if (processingRule.expression) {\n                        browseExpressions(processingRule.expression);\n                    } else if (processingRule.expressions) {\n                        browseExpressions(processingRule.expressions);\n                    }\n                }\n            }\n\n            browseExpressions(outcomeHelper.getOutcomeProcessingRules(testModel));\n        },\n\n        /**\n         * Lists all outcomes identifiers. An optional callback allows to filter the list\n         * @param {Object} testModel\n         * @param {Function} [cb]\n         * @returns {Array}\n         */\n        listOutcomes: function listOutcomes(testModel, cb) {\n            var outcomes = [];\n            if (!_.isFunction(cb)) {\n                cb = null;\n            }\n            outcomeHelper.eachOutcomeDeclarations(testModel, function (outcome) {\n                if (!cb || cb(outcome)) {\n                    outcomes.push(outcomeHelper.getOutcomeIdentifier(outcome));\n                }\n            });\n            return outcomes;\n        },\n\n        /**\n         * Removes the specified outcomes from the provided test model\n         * @param {Object} testModel - The test model to clean up\n         * @param {Function|String[]} outcomes - The list of outcomes identifiers to remove,\n         *                                       or a callback that will match each outcome to remove\n         */\n        removeOutcomes: function removeOutcomes(testModel, outcomes) {\n            var declarations = outcomeHelper.getOutcomeDeclarations(testModel);\n            var rules = outcomeHelper.getOutcomeProcessingRules(testModel);\n            var check;\n\n            if (_.isFunction(outcomes)) {\n                check = outcomes;\n            } else {\n                outcomes = _.indexBy(_.isArray(outcomes) ? outcomes : [outcomes], function (outcome) {\n                    return outcome;\n                });\n\n                check = function checkIdentifier(outcome) {\n                    return !!outcomes[outcomeHelper.getOutcomeIdentifier(outcome)];\n                };\n            }\n\n            if (declarations) {\n                _.remove(declarations, check);\n            }\n\n            if (rules) {\n                _.remove(rules, check);\n            }\n        },\n\n        /**\n         * Creates an outcome declaration\n         * @param {String} identifier\n         * @param {String|Number|Boolean} [type] - The data type of the outcome, FLOAT by default\n         * @param {Number} [cardinality] - The variable cardinality, default 0\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        createOutcome: function createOutcome(identifier, type, cardinality) {\n\n            if (!outcomeValidator.validateIdentifier(identifier)) {\n                throw new TypeError('You must provide a valid identifier!');\n            }\n\n            return qtiElementHelper.create('outcomeDeclaration', identifier, {\n                views: [],\n                interpretation: '',\n                longInterpretation: '',\n                normalMaximum: false,\n                normalMinimum: false,\n                masteryValue: false,\n                cardinality: cardinalityHelper.getValid(cardinality, cardinalityHelper.SINGLE),\n                baseType: baseTypeHelper.getValid(type, baseTypeHelper.FLOAT)\n            });\n        },\n\n        /**\n         * Adds a processing rule into the test model\n         *\n         * @param {Object} testModel\n         * @param {Object} processingRule\n         * @returns {Object}\n         * @throws {TypeError} if the processing rule is not valid\n         */\n        addOutcomeProcessing: function createOutcomeProcessing(testModel, processingRule) {\n            var outcomeProcessing = testModel.outcomeProcessing;\n\n            if (!outcomeValidator.validateOutcome(processingRule)) {\n                throw new TypeError('You must provide a valid outcome processing rule!');\n            }\n\n            if (!outcomeProcessing) {\n                outcomeProcessing = qtiElementHelper.create('outcomeProcessing', {\n                    outcomeRules: []\n                });\n                testModel.outcomeProcessing = outcomeProcessing;\n            } else if (!outcomeProcessing.outcomeRules) {\n                outcomeProcessing.outcomeRules = [];\n            }\n\n            outcomeProcessing.outcomeRules.push(processingRule);\n            return processingRule;\n        },\n\n        /**\n         * Creates an outcome and adds it to the declarations\n         * @param {Object} testModel\n         * @param {Object} outcome - The outcome to add\n         * @param {Object} [processingRule] - The processing rule attached to the outcome\n         * @returns {Object}\n         * @throws {TypeError} if one of the outcome or the processing rule is not valid\n         */\n        addOutcome: function addOutcome(testModel, outcome, processingRule) {\n            var declarations = testModel.outcomeDeclarations;\n\n            if (!outcomeValidator.validateOutcome(outcome, true, 'outcomeDeclaration')) {\n                throw new TypeError('You must provide a valid outcome!');\n            }\n\n            if (processingRule) {\n                if (!outcomeValidator.validateOutcome(processingRule) || processingRule.identifier !== outcome.identifier) {\n                    throw new TypeError('You must provide a valid outcome processing rule!');\n                }\n\n                outcomeHelper.addOutcomeProcessing(testModel, processingRule);\n            }\n\n            if (!declarations) {\n                declarations = [];\n                testModel.outcomeDeclarations = declarations;\n            }\n\n            declarations.push(outcome);\n            return outcome;\n        },\n\n        /**\n         * Replaces the outcomes in a test model\n         * @param {Object} testModel\n         * @param {Object} outcomes\n         * @throws {TypeError} if one of the outcomes or the processing rules are not valid\n         */\n        replaceOutcomes: function replaceOutcomes(testModel, outcomes) {\n            if (_.isPlainObject(outcomes)) {\n                if (_.isArray(outcomes.outcomeDeclarations)) {\n                    if (!outcomeValidator.validateOutcomes(outcomes.outcomeDeclarations, true, 'outcomeDeclaration')) {\n                        throw new TypeError('You must provide valid outcomes!');\n                    }\n\n                    testModel.outcomeDeclarations = [].concat(outcomes.outcomeDeclarations);\n                }\n                if (outcomes.outcomeProcessing && _.isArray(outcomes.outcomeProcessing.outcomeRules)) {\n                    if (!outcomeValidator.validateOutcomes(outcomes.outcomeProcessing.outcomeRules)) {\n                        throw new TypeError('You must provide valid processing rules!');\n                    }\n\n                    if (!testModel.outcomeProcessing) {\n                        testModel.outcomeProcessing = qtiElementHelper.create('outcomeProcessing');\n                    }\n                    testModel.outcomeProcessing.outcomeRules = [].concat(outcomes.outcomeProcessing.outcomeRules);\n                }\n            }\n        }\n    };\n\n    return outcomeHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Helper that provides a way to browse all categories attached to a test model at the item level.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/category',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * Checks if a category is an option\n     *\n     * @param {String} category\n     * @returns {Boolean}\n     */\n    function isCategoryOption(category) {\n        return category && category.indexOf('x-tao-') === 0;\n    }\n\n    /**\n     * Calls a function for each category in the test model\n     * @param {Object} testModel\n     * @param {Function} cb\n     */\n    function eachCategories(testModel, cb) {\n        _.forEach(testModel.testParts, function (testPart) {\n            _.forEach(testPart.assessmentSections, function (assessmentSection) {\n                _.forEach(assessmentSection.sectionParts, function (itemRef) {\n                    _.forEach(itemRef.categories, function(category) {\n                        cb(category, itemRef);\n                    });\n                });\n            });\n        });\n    }\n\n    return {\n        /**\n         * Calls a function for each category in the test model\n         * @function eachCategories\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachCategories: eachCategories,\n\n        /**\n         * Gets the list of categories assigned to the items.\n         * Discards special purpose categories like 'x-tao-...'\n         *\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        listCategories: function listCategories(testModel) {\n            var categories = {};\n            eachCategories(testModel, function(category) {\n                if (!isCategoryOption(category)) {\n                    categories[category] = true;\n                }\n            });\n            return _.keys(categories);\n        },\n\n        /**\n         * Gets the list of options assigned to the items (special purpose categories like 'x-tao-...').\n         *\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        listOptions: function listOptions(testModel) {\n            var options = {};\n            eachCategories(testModel, function(category) {\n                if (isCategoryOption(category)) {\n                    options[category] = true;\n                }\n            });\n            return _.keys(options);\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/modelOverseer',[\n    'lodash',\n    'core/eventifier',\n    'core/statifier',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/category'\n], function (_, eventifier, statifier, baseTypeHelper, cardinalityHelper, outcomeHelper, categoryHelper) {\n    'use strict';\n\n    /**\n     * Wraps the test model in a manager, provides API to handle events and states\n     * @param {Object} model\n     * @param {Object} [config]\n     * @returns {Object}\n     */\n    function modelOverseerFactory(model, config) {\n        var modelOverseer = {\n            /**\n             * Gets the nested model\n             * @returns {Object}\n             */\n            getModel: function getModel() {\n                return model;\n            },\n\n            /**\n             * Sets the nested model\n             *\n             * @param {Object} newModel\n             * @returns {modelOverseer}\n             * @fires setmodel\n             */\n            setModel: function setModel(newModel) {\n                model = newModel;\n\n                /**\n                 * @event modelOverseer#setmodel\n                 * @param {String} model\n                 */\n                modelOverseer.trigger('setmodel', model);\n                return this;\n            },\n\n            /**\n             * Gets the config set\n             * @returns {Object}\n             */\n            getConfig: function getConfig() {\n                return config;\n            },\n\n            /**\n             * Gets the list of defined outcomes for the nested model. A descriptor is built for each outcomes:\n             * {\n             *      name: {String},\n             *      type: {String},\n             *      cardinality: {String}\n             * }\n             * @returns {Object[]}\n             */\n            getOutcomesList: function getOutcomesList() {\n                return _.map(outcomeHelper.getOutcomeDeclarations(model), function(declaration) {\n                    return {\n                        name: declaration.identifier,\n                        type: baseTypeHelper.getNameByConstant(declaration.baseType),\n                        cardinality: cardinalityHelper.getNameByConstant(declaration.cardinality)\n                    };\n                });\n            },\n\n            /**\n             * Gets the names of the defined outcomes for the nested model\n             * @returns {Array}\n             */\n            getOutcomesNames: function getOutcomesNames() {\n                return _.map(outcomeHelper.getOutcomeDeclarations(model), function(declaration) {\n                    return declaration.identifier;\n                });\n            },\n\n            /**\n             * Gets the list of defined categories for the nested model\n             * @returns {Array}\n             */\n            getCategories: function getCategories() {\n                return categoryHelper.listCategories(model);\n            },\n\n            /**\n             * Gets the list of defined options for the nested model\n             * @returns {Array}\n             */\n            getOptions: function getOptions() {\n                return categoryHelper.listOptions(model);\n            }\n        };\n\n        config = _.isPlainObject(config) ? config : _.assign({}, config);\n\n        return statifier(eventifier(modelOverseer));\n    }\n\n    return modelOverseerFactory;\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart clearfix\\\">\\n\\n   <h1><span data-bind=\\\"identifier\\\">\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n        <div class=\\\"actions\\\"> \\n            <div class=\\\"tlb\\\">\\n                <div class=\\\"tlb-top\\\">\\n                    <span class=\\\"tlb-box\\\">\\n                        <span class=\\\"tlb-bar\\\">\\n                            <span class=\\\"tlb-start\\\"></span>\\n                            <span class=\\\"tlb-group\\\">\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"Test Part Properties\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"Move Up\\\"><span class=\\\"icon-up\\\"></span></a>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"Move Down\\\"><span class=\\\"icon-down\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span> \\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"Remove Test Part\\\" data-delete=\\\"#\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                            </span>\\n                            <span class=\\\"tlb-end\\\"></span>\\n                        </span>  \\n                        <!--<span class=\\\"tlb-bar\\\">-->\\n                            <!--<span class=\\\"tlb-start\\\"></span>-->\\n                            <!--<span class=\\\"tlb-text-button-box\\\">-->\\n                                <!--<a class=\\\"tlb-text-button-off section-adder\\\">-->\\n                                    <!--<span class=\\\"icon-add\\\"></span>-->\\n                                    <!--<span class=\\\"tlb-text\\\">New Section</span>-->\\n                                <!--</a>-->\\n                            <!--</span>-->\\n                            <!--<span class=\\\"tlb-end\\\"></span>-->\\n                        <!--</span>-->\\n                    </span>   \\n                </div>\\n            </div>\\n        </div>\\n        <a href=\\\"#\\\" class=\\\"toggler opened\\\" data-toggle=\\\"#testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></a>\\n    </h1>\\n    <div id=\\\"testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-content\\\">\\n        \\n       <!-- assessmentTest/testPart/assessmentSections -->\\n       <div class=\\\"sections\\\" data-bind-each=\\\"assessmentSections\\\" data-bind-tmpl=\\\"section\\\" data-bind-filter=\\\"isSection\\\"></div>\\n\\n        <button class=\\\"btn-info small section-adder\\\">\\n            <span class=\\\"icon-add\\\"></span>New section\\n        </button>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section\\\">\\n\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\n    <h2><span data-bind=\\\"title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n        <div class=\\\"actions\\\">\\n            <div class=\\\"tlb\\\">\\n                <div class=\\\"tlb-top\\\">\\n                    <span class=\\\"tlb-box\\\">\\n                        <span class=\\\"tlb-bar\\\">\\n                            <span class=\\\"tlb-start\\\"></span>\\n                            <span class=\\\"tlb-group\\\">\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off rub-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Manage Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Manage Rubric Blocks\", options)))\n    + \"\\\" data-toggle=\\\"#rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" ><span class=\\\"icon-rubric\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section Properties\", options) : helperMissing.call(depth0, \"__\", \"Section Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Section\", options) : helperMissing.call(depth0, \"__\", \"Remove Section\", options)))\n    + \"\\\" data-delete=\\\":parent .section\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                            </span>\\n                            <span class=\\\"tlb-end\\\"></span>\\n                        </span>\\n                    </span>\\n                </div>\\n            </div>\\n        </div>\\n    </h2>\\n\\n    <div id=\\\"rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"rublocks clearfix toggled\\\">\\n        <h3>\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Rubric Blocks\", options)))\n    + \"</span>\\n        </h3>\\n        <ol class=\\\"rubricblocks decimal\\\" data-bind-each=\\\"rubricBlocks\\\" data-bind-tmpl=\\\"rubricblock\\\"></ol>\\n        <button class=\\\"btn-info small rublock-adder\\\">\\n            <span class=\\\"icon-add\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"New Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"New Rubric Block\", options)))\n    + \"\\n        </button>\\n    </div>\\n    <div class=\\\"itemrefs-wrapper\\\">\\n        <h3>\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items\", options) : helperMissing.call(depth0, \"__\", \"Items\", options)))\n    + \"</span>\\n        </h3>\\n        <ol class=\\\"itemrefs decimal clearfix\\\" data-bind-each=\\\"sectionParts\\\" data-bind-tmpl=\\\"itemref\\\" data-bind-filter=\\\"isItemRef\\\" data-msg=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\\"></ol>\\n        <div class=\\\"itemref-placeholder\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<li class=\\\"rubricblock\\\">\\n    <div class=\\\"actions\\\">\\n       <div class=\\\"tlb\\\">\\n            <div class=\\\"tlb-top\\\">\\n                <span class=\\\"tlb-box\\\">\\n                    <span class=\\\"tlb-bar\\\">\\n                        <span class=\\\"tlb-start\\\"></span>\\n                        <span class=\\\"tlb-group\\\">\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block Properties\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Remove Rubric Block\", options)))\n    + \"\\\" data-delete=\\\":parent .rubricblock\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                        </span>\\n                        <span class=\\\"tlb-end\\\"></span>\\n                    </span>\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"rubricblock-content\\\" contenteditable></div>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<li id='\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-uri='\";\n  if (helper = helpers.href) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.href); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='itemref'>\\n    <span class='title truncate'>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <div class=\\\"actions\\\"> \\n        <div class=\\\"tlb\\\">\\n            <div class=\\\"tlb-top\\\">\\n                <span class=\\\"tlb-box\\\">\\n                    <span class=\\\"tlb-bar\\\">\\n                        <span class=\\\"tlb-start\\\"></span>\\n                        <span class=\\\"tlb-group\\\">\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Reference Properties\", options) : helperMissing.call(depth0, \"__\", \"Item Reference Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span> \\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Item Reference\", options) : helperMissing.call(depth0, \"__\", \"Remove Item Reference\", options)))\n    + \"\\\" data-delete=\\\":parent .itemref\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                        </span>\\n                        <span class=\\\"tlb-end\\\"></span>\\n                    </span>  \\n                </span>   \\n            </div>\\n        </div>\\n    </div>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/item', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n     <li data-uri='\";\n  if (helper = helpers.uri) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.uri); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-categories='\";\n  if (helper = helpers.categories) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.categories); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='truncate'>\\n        \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.parent), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n     </li>\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class='flag truncate' title=\\\"\";\n  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/outcomes', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n    \";\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-6 line\\\">\";\n  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n        <div class=\\\"col-3 line\\\">\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n        <div class=\\\"col-3 line\\\">\";\n  if (helper = helpers.cardinality) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cardinality); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-12 line\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"There is not outcomes!\", options) : helperMissing.call(depth0, \"__\", \"There is not outcomes!\", options)))\n    + \"</div>\\n    </div>\\n\";\n  return buffer;\n  }\n\n  buffer += \"    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-6 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</div>\\n        <div class=\\\"col-3 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Type\", options) : helperMissing.call(depth0, \"__\", \"Type\", options)))\n    + \"</div>\\n        <div class=\\\"col-3 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cardinality\", options) : helperMissing.call(depth0, \"__\", \"Cardinality\", options)))\n    + \"</div>\\n    </div>\\n\";\n  stack1 = helpers['if'].call(depth0, depth0, {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/test-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n    <div class=\\\"test-scoring toggled\\\">\\n\\n<!-- assessmentTest/scoring/outcomeProcessing -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-outcome-processing\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome processing\", options) : helperMissing.call(depth0, \"__\", \"Outcome processing\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <select name=\\\"test-outcome-processing\\\" class=\\\"select2\\\" data-bind=\\\"scoring.outcomeProcessing\\\" data-bind-encoder=\\\"string\\\" data-has-search=\\\"false\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </select>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select the way the responses of your test should be processed\", options) : helperMissing.call(depth0, \"__\", \"Select the way the responses of your test should be processed\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/categoryScore -->\\n        <div class=\\\"grid-row test-category-score\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-category-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Category score\", options) : helperMissing.call(depth0, \"__\", \"Category score\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"test-category-score\\\" value=\\\"true\\\" data-bind=\\\"scoring.categoryScore\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Also compute the score per categories\", options) : helperMissing.call(depth0, \"__\", \"Also compute the score per categories\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/cutScore -->\\n        <div class=\\\"grid-row test-cut-score\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-cut-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cut score\", options) : helperMissing.call(depth0, \"__\", \"Cut score\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"test-cut-score\\\" value=\\\"0\\\" data-bind=\\\"scoring.cutScore\\\" data-bind-encoder=\\\"float\\\" data-validate=\\\"$numeric;\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the cut score associated to the test\", options) : helperMissing.call(depth0, \"__\", \"Set the cut score associated to the test\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/weightIdentifier -->\\n        <div class=\\\"grid-row test-weight-identifier\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-weight-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weight\", options) : helperMissing.call(depth0, \"__\", \"Weight\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"test-weight-identifier\\\" data-bind=\\\"scoring.weightIdentifier\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the weight identifier used to process the score\", options) : helperMissing.call(depth0, \"__\", \"Set the weight identifier used to process the score\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/description -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-12\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n            </div>\\n        </div>\\n    </div>\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <option value=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</option>\\n                \";\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  \n  return \"selected=\\\"selected\\\"\";\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                <div class=\\\"feedback-info test-outcome-processing-description\\\" data-key=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"icon-info\\\"></span>\\n                    \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                </div>\\n                \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"test-props props clearfix\\\">\\n\\n    <!-- test properties -->\\n    <h3 data-bind=\\\"title\\\"></h3>\\n\\n<!-- assessmentTest/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"test-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"test-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The principle identifier of the test.\", options) : helperMissing.call(depth0, \"__\", \"The principle identifier of the test.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/title -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"test-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"test-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test title.\", options) : helperMissing.call(depth0, \"__\", \"The test title.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"test-time-limits toggled\\\">\\n\\n\\n\\n<!-- assessmentTest/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for the all test.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for the all test.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"test-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-scoring\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scoring\", options) : helperMissing.call(depth0, \"__\", \"Scoring\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/scoring -->\\n\";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.scoring), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-outcome-declarations\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome declarations\", options) : helperMissing.call(depth0, \"__\", \"Outcome declarations\", options)))\n    + \"</h4>\\n\\n    <!-- assessmentTest/outcomeDeclarations -->\\n    <div class=\\\"test-outcome-declarations panel toggled\\\">\\n        <div class=\\\"grid-row test-outcomes-generate\\\">\\n            <div class=\\\"col-12 align-right\\\">\\n                <button class=\\\"btn-info small\\\" data-action=\\\"generate-outcomes\\\"><span class=\\\"icon icon-reset\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Regenerate\", options) : helperMissing.call(depth0, \"__\", \"Regenerate\", options)))\n    + \"</button>\\n            </div>\\n        </div>\\n        <div class=\\\"outcome-declarations\\\"></div>\\n    </div>\\n\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"testpart-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-props props clearfix\\\">\\n    <h3>\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n    <form autocomplete=\\\"off\\\">\\n\\n<!-- assessmentTest/testPart/identifier -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"testpart-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"testpart-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test part identifier.\", options) : helperMissing.call(depth0, \"__\", \"The test part identifier.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/navigationMode -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n               \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Navigation\", options) : helperMissing.call(depth0, \"__\", \"Navigation\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"navigationMode\\\" data-bind-encoder=\\\"number\\\" />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Linear\", options) : helperMissing.call(depth0, \"__\", \"Linear\", options)))\n    + \"\\n                </label>\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"1\\\"  />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Non Linear\", options) : helperMissing.call(depth0, \"__\", \"Non Linear\", options)))\n    + \"\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options) : helperMissing.call(depth0, \"__\", \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/submissionMode -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Submission\", options) : helperMissing.call(depth0, \"__\", \"Submission\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"submissionMode\\\" data-bind-encoder=\\\"number\\\" />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Individual\", options) : helperMissing.call(depth0, \"__\", \"Individual\", options)))\n    + \"\\n                </label>\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"1\\\"  />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Simultaneous\", options) : helperMissing.call(depth0, \"__\", \"Simultaneous\", options)))\n    + \"\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options) : helperMissing.call(depth0, \"__\", \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n\\n<!-- assessmentTest/testPart/itemSessionControl -->\\n        <div class=\\\"testpart-item-session-control toggled\\\">\\n\\n<!-- assessmentTest/testPart/itemSessionControl/maxAttempts -->\\n            <div class=\\\"grid-row\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <input name=\\\"testpart-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/showFeedback -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/itemSessionControl/allowComment -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-comment\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/allowSkipping -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\"   />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n        </div>\\n\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/timeLimits/minTime -->\\n        <div class=\\\"testpart-time-limits toggled\\\">\\n\\n\\n\\n<!-- assessmentTest/testPart/timeLimits/maxTime -->\\n            <div class=\\\"grid-row\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this test part.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this test part.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/timeLimits/allowLateSubmission -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-blueprint\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate Blueprint\", options) : helperMissing.call(depth0, \"__\", \"Associate Blueprint\", options)))\n    + \"</label>\\n        </div>\\n\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-blueprint\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options) : helperMissing.call(depth0, \"__\", \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div id=\\\"section-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section-props props clearfix\\\">\\n    <h3>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n<!-- assessmentTest/testPart/assessmentSection/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the section.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the section.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The section title.\", options) : helperMissing.call(depth0, \"__\", \"The section title.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/visible -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-visible\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Visible\", options) : helperMissing.call(depth0, \"__\", \"Visible\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"section-visible\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"visible\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"A visible section is one that is identifiable by the candidate.\", options) : helperMissing.call(depth0, \"__\", \"A visible section is one that is identifiable by the candidate.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/keepTogether -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-keep-together\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Keep Together\", options) : helperMissing.call(depth0, \"__\", \"Keep Together\", options)))\n    + \"</label>\\n        </div>\\n\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"section-keep-together\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"keepTogether\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options) : helperMissing.call(depth0, \"__\", \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasBlueprint), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n    <div class=\\\"categories\\\">\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"category-custom\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"category-custom\\\"/>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options) : helperMissing.call(depth0, \"__\", \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!-- some user features (Test Navigation, Test Taker Tools, etc.) are in fact implemented as categories. They will appear here: -->\\n        <div class=\\\"category-presets\\\"></div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Selection\", options) : helperMissing.call(depth0, \"__\", \"Selection\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection -->\\n    <div class=\\\"section-selection toggled\\\">\\n\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-enable-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Enable selection\", options) : helperMissing.call(depth0, \"__\", \"Enable selection\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-enable-selection\\\"  />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection/select -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-select\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select\", options) : helperMissing.call(depth0, \"__\", \"Select\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"section-select\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"0\\\" data-bind=\\\"selection.select\\\"  data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The number of child elements to be selected.\", options) : helperMissing.call(depth0, \"__\", \"The number of child elements to be selected.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection/withReplacement -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-with-replacement\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"With Replacement\", options) : helperMissing.call(depth0, \"__\", \"With Replacement\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-with-replacement\\\" value=\\\"true\\\" data-bind=\\\"selection.withReplacement\\\"  data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"When selecting child elements each element is normally eligible for selection once only.\", options) : helperMissing.call(depth0, \"__\", \"When selecting child elements each element is normally eligible for selection once only.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-ordering\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Ordering\", options) : helperMissing.call(depth0, \"__\", \"Ordering\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/ordering -->\\n    <div class=\\\"section-ordering toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/ordering/shuffle -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-shuffle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Shuffle\", options) : helperMissing.call(depth0, \"__\", \"Shuffle\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-shuffle\\\" value=\\\"true\\\" data-bind=\\\"ordering.shuffle\\\"  data-bind-encoder=\\\"boolean\\\"  />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options) : helperMissing.call(depth0, \"__\", \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl -->\\n    <div class=\\\"section-item-session-control toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/maxAttempts -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"section-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/showFeedback -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowComment -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowSkipping -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"section-time-limits toggled\\\">\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this section.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this section.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"itemref-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"itemref-props props clearfix\\\">\\n\\n    <h3>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the item reference.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the item reference.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/href -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-href\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reference\", options) : helperMissing.call(depth0, \"__\", \"Reference\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-href\\\" data-bind=\\\"href\\\" readonly=\\\"readonly\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The reference.\", options) : helperMissing.call(depth0, \"__\", \"The reference.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/required -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-required\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required\", options) : helperMissing.call(depth0, \"__\", \"Required\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-required\\\" value=\\\"true\\\" data-bind=\\\"required\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If required it must appear (at least once) in the selection.\", options) : helperMissing.call(depth0, \"__\", \"If required it must appear (at least once) in the selection.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/fixed -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-fixed\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Fixed\", options) : helperMissing.call(depth0, \"__\", \"Fixed\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-fixed\\\" value=\\\"true\\\" data-bind=\\\"fixed\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Not shuffled, the position remains fixed.\", options) : helperMissing.call(depth0, \"__\", \"Not shuffled, the position remains fixed.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"categories\\\">\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"category-custom\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"custom categories\", options) : helperMissing.call(depth0, \"__\", \"custom categories\", options)))\n    + \"\\\" name=\\\"category-custom\\\"/>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items can optionally be assigned to one or more categories.\", options) : helperMissing.call(depth0, \"__\", \"Items can optionally be assigned to one or more categories.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\\n        <textarea title=\\\"categories\\\" class=\\\"hidden\\\" type=\\\"text\\\" name=\\\"itemref-category\\\" data-bind=\\\"categories\\\" data-bind-encoder=\\\"str2array\\\"></textarea>\\n\\n        <!-- some user features (Test Navigation, Test Taker Tools, etc.) are in fact implemented as categories. They will appear here: -->\\n        <div class=\\\"category-presets\\\"></div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-weights\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weights\", options) : helperMissing.call(depth0, \"__\", \"Weights\", options)))\n    + \"</h4>\\n\\n    <div class=\\\"itemref-weights toggled\\\">\\n        <div class=\\\"grid-row \\\">\\n            <div class=\\\"col-9\\\">\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</strong>\\n            </div>\\n            <div class=\\\"col-2\\\">\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Value\", options) : helperMissing.call(depth0, \"__\", \"Value\", options)))\n    + \"</strong>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the contribution of an individual item score to the overall test score.\", options) : helperMissing.call(depth0, \"__\", \"Controls the contribution of an individual item score to the overall test score.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/weights -->\\n        <div data-bind-each=\\\"weights\\\" data-bind-tmpl=\\\"itemrefweight\\\"></div>\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-12\\\">\\n                <a class=\\\"itemref-weight-add\\\"><span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"add a new weight\", options) : helperMissing.call(depth0, \"__\", \"add a new weight\", options)))\n    + \"</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl -->\\n    <div class=\\\"itemref-item-session-control toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/maxAttempts -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"itemref-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/showFeedback -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowComment -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowSkipping -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"itemref-time-limits toggled\\\">\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this item.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this item.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props-weight', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"grid-row itemref-weight\\\">\\n    <div class=\\\"col-9\\\">\\n        <input data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" />\\n    </div>\\n    <div class=\\\"col-2\\\">\\n        <input data-bind=\\\"value\\\" data-validate=\\\"$notEmpty; $numeric;\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-bind-encoder=\\\"float\\\" />\\n    </div>\\n    <div class=\\\"col-1\\\">\\n        <a class=\\\"itemref-weight-remove\\\" data-delete=\\\":parent .itemref-weight\\\">\\n            <span class=\\\"icon-bin\\\"></span>\\n        </a>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"rubric-feedback toggled\\\">\\n\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/activated -->\\n        <div class=\\\"grid-row rubric-feedback-activated\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"activated\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Activated\", options) : helperMissing.call(depth0, \"__\", \"Activated\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"activated\\\" value=\\\"true\\\" data-bind=\\\"feedback.activated\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the rubric block as a feedback block\", options) : helperMissing.call(depth0, \"__\", \"Set the rubric block as a feedback block\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/outcome -->\\n        <div class=\\\"grid-row rubric-feedback-outcome\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"feedback-outcome\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome\", options) : helperMissing.call(depth0, \"__\", \"Outcome\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"feedback-outcome\\\" data-bind=\\\"feedback.outcome\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set outcome identifier the feedback block is related to\", options) : helperMissing.call(depth0, \"__\", \"Set outcome identifier the feedback block is related to\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/matchValue -->\\n        <div class=\\\"grid-row rubric-feedback-match-value\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"feedback-match-value\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Match value\", options) : helperMissing.call(depth0, \"__\", \"Match value\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"feedback-match-value\\\" data-bind=\\\"feedback.matchValue\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the value of the outcome that will activate the feedback block\", options) : helperMissing.call(depth0, \"__\", \"Set the value of the outcome that will activate the feedback block\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"rubricblock-props props clearfix\\\">\\n\\n    <h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block\", options)))\n    + \": \";\n  if (helper = helpers.orderIndex) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.orderIndex); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/views -->\\n    <!--\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Views\", options) : helperMissing.call(depth0, \"__\", \"Views\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <select name=\\\"view\\\" multiple=\\\"multiple\\\" data-bind=\\\"views\\\">\\n                <option value=\\\"author\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Author\", options) : helperMissing.call(depth0, \"__\", \"Author\", options)))\n    + \"</option>\\n                <option value=\\\"candidate\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Candidate\", options) : helperMissing.call(depth0, \"__\", \"Candidate\", options)))\n    + \"</option>\\n                <option value=\\\"proctor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Proctor\", options) : helperMissing.call(depth0, \"__\", \"Proctor\", options)))\n    + \"</option>\\n                <option value=\\\"scorer\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scorer\", options) : helperMissing.call(depth0, \"__\", \"Scorer\", options)))\n    + \"</option>\\n                <option value=\\\"testConstructor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test constructor\", options) : helperMissing.call(depth0, \"__\", \"Test constructor\", options)))\n    + \"</option>\\n                <option value=\\\"tutor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Tutor\", options) : helperMissing.call(depth0, \"__\", \"Tutor\", options)))\n    + \"</option>\\n            </select>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Who can view the rubric block during the delivery.\", options) : helperMissing.call(depth0, \"__\", \"Who can view the rubric block during the delivery.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    -->\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/class -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"class\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Class\", options) : helperMissing.call(depth0, \"__\", \"Class\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"class\\\" data-bind=\\\"class\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_\\\\s][a-zA-Z0-9_\\\\s-]*)?$);\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the XHTML-QTI class of the rubric block.\", options) : helperMissing.call(depth0, \"__\", \"Set the XHTML-QTI class of the rubric block.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/id -->\\n    <!--\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"id\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"id\\\" data-bind=\\\"id\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_\\\\s][a-zA-Z0-9_\\\\s-]*)?$);\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the XHTML-QTI identifier of the rubric block.\", options) : helperMissing.call(depth0, \"__\", \"Set the XHTML-QTI identifier of the rubric block.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    -->\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .rubric-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Feedback block\", options) : helperMissing.call(depth0, \"__\", \"Feedback block\", options)))\n    + \"</h4>\\n\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback -->\\n    \";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.feedback), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/category-presets', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n\\n<h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .category-preset-group-\";\n  if (helper = helpers.groupId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.groupLabel) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupLabel); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h4>\\n\\n<div class=\\\"category-preset-group-\";\n  if (helper = helpers.groupId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" toggled\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.presets), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <div class=\\\"grid-row pseudo-label-box category-preset\\\" data-qti-category=\\\"\";\n  if (helper = helpers.qtiCategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.qtiCategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n        <div class=\\\"col-1\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"category-preset-\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" value=\\\"\";\n  if (helper = helpers.qtiCategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.qtiCategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"/>\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-10\\\">\\n            <label for=\\\"category-preset-\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n});\n\n","define('taoQtiTest/controller/creator/templates/index',[\n    'tpl!taoQtiTest/controller/creator/templates/testpart',\n    'tpl!taoQtiTest/controller/creator/templates/section',\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock',\n    'tpl!taoQtiTest/controller/creator/templates/itemref',\n    'tpl!taoQtiTest/controller/creator/templates/item',\n    'tpl!taoQtiTest/controller/creator/templates/outcomes',\n    'tpl!taoQtiTest/controller/creator/templates/test-props',\n    'tpl!taoQtiTest/controller/creator/templates/testpart-props',\n    'tpl!taoQtiTest/controller/creator/templates/section-props',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props-weight',\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock-props',\n    'tpl!taoQtiTest/controller/creator/templates/category-presets'\n],\nfunction(\n    testPart,\n    section,\n    rubricBlock,\n    itemRef,\n    item,\n    outcomes,\n    testProps,\n    testPartProps,\n    sectionProps,\n    itemRefProps,\n    itemRefPropsWeight,\n    rubricBlockProps,\n    categoryPresets\n){\n    'use strict';\n\n    /**\n     * Expose all the templates used by the test creator\n     * @exports taoQtiTest/controller/creator/templates/index\n     */\n    return {\n        'testpart'      : testPart,\n        'section'       : section,\n        'itemref'       : itemRef,\n        'item'          : item,\n        'rubricblock'   : rubricBlock,\n        'outcomes'      : outcomes,\n        'properties'    : {\n            'test'      : testProps,\n            'testpart'  : testPartProps,\n            'section'   : sectionProps,\n            'itemref'   : itemRefProps,\n            'itemrefweight'     : itemRefPropsWeight,\n            'rubricblock'       : rubricBlockProps,\n            'categorypresets'  : categoryPresets\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/item',[\n    'jquery',\n    'lodash',\n    'taoQtiTest/controller/creator/templates/index'\n], function($, _, templates){\n    'use strict';\n\n    var itemTemplate = templates.item;\n\n\n\n   /**\n     * The ItemView setup items related components\n     * @exports taoQtiTest/controller/creator/views/item\n     * @param {Function} loadItems - the function used to get items from the server\n     * @param {Function} getCategories - the function used to get items' categories\n     */\n    var itemView =  function(loadItems, getCategories){\n\n        var $panel     = $('.test-creator-items .item-selection');\n        var $search    = $('#item-filter');\n        var $itemBox   = $('.item-box', $panel);\n\n        var getItems = function getItems(pattern){\n            return loadItems(pattern).then(function(items){\n                if(!items || !items.length){\n                    return update();\n                }\n                return getCategories(_.pluck(items, 'uri')).then(function(categories){\n                    update(_.map(items, function(item){\n                        item.categories = _.isArray(categories[item.uri]) ? categories[item.uri] : [];\n                        return item;\n                    }));\n                });\n            });\n        };\n\n        getItems().then(setUpLiveSearch);\n\n        /**\n         * Set up the search behavior: once 3 chars are enters into the field,\n         * we load the items that matches the given search pattern.\n         * @private\n         */\n        function setUpLiveSearch (){\n            var timeout;\n\n            var liveSearch = function(){\n                var pattern = $search.val();\n                if(pattern.length > 1 || pattern.length === 0){\n                    clearTimeout(timeout);\n                    timeout = setTimeout(function(){\n                        getItems(pattern);\n                    }, 300);\n                }\n            };\n\n            //trigger the search on keyp and on the magnifer button click\n            $search.keyup(liveSearch)\n                     .siblings('.ctrl').click(liveSearch);\n        }\n\n        /**\n         * Update the items list\n         * @private\n         * @param {Array} items - the new items\n         */\n        function update (items){\n            disableSelection();\n            $itemBox.empty().append(itemTemplate(items));\n            enableSelection();\n        }\n\n        /**\n         * Disable the selectable component\n         * @private\n         * @param {Array} items - the new items\n         */\n        function disableSelection (){\n            if($panel.data('selectable')){\n                $panel.selectable('disable');\n            }\n        }\n\n        /**\n         * Enable to select items to be added to sections\n         * using the jquery-ui selectable.\n         * @private\n         */\n        function enableSelection (){\n\n            if($panel.data('selectable')){\n                $panel.selectable('enable');\n            } else {\n                $panel.selectable({\n                    filter: 'li',\n                    selected: function( event, ui ) {\n                        $(ui.selected).addClass('selected');\n                    },\n                    unselected: function( event, ui ) {\n                        $(ui.unselected).removeClass('selected');\n                    },\n                    stop: function(){\n                        $(this).trigger('itemselect.creator', $('.selected'));\n                    }\n                });\n            }\n        }\n    };\n\n    return itemView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/property',[\n    'jquery',\n    'ui',\n    'core/databinder',\n    'taoQtiTest/controller/creator/templates/index'\n],\nfunction($, ui, DataBinder, templates){\n    'use strict';\n\n    /**\n     * @callback PropertyViewCallback\n     * @param {propertyView} propertyView - the view object\n     */\n\n    /**\n     * The PropertyView setup the property panel component\n     *\n     * @exports taoQtiTest/controller/creator/views/property\n     */\n    var propView = function propView(tmplName, model){\n        var $container = $('.test-creator-props');\n        var template = templates.properties[tmplName];\n        var $view;\n\n        /**\n         * Opens the view for the 1st time\n         */\n        var open = function propOpen(){\n            var databinder,\n                binderOptions = {\n                    templates: templates.properties\n                };\n            $container.children('.props').hide().trigger('propclose.propview');\n            $view = $(template(model)).appendTo($container).filter('.props');\n\n            //start listening for DOM compoenents inside the view\n            ui.startDomComponent($view);\n\n            //start the data binding\n            databinder = new DataBinder($view, model, binderOptions);\n            databinder.bind();\n\n            propValidation();\n\n            $view.trigger('propopen.propview');\n        };\n\n       /**\n        * Get the view container element\n        * @returns {jQueryElement}\n        */\n        var getView = function propGetView(){\n            return $view;\n        };\n\n       /**\n        * Check wheter the view is displayed\n        * @returns {boolean} true id opened\n        */\n        var isOpen = function propIsOpen(){\n            return $view.css('display') !== 'none';\n        };\n\n       /**\n        * Bind a callback on view open\n        * @param {PropertyViewCallback} cb\n        */\n        var onOpen = function propOnOpen(cb){\n            $view.on('propopen.propview', function(e){\n                e.stopPropagation();\n                cb();\n            });\n        };\n\n\n        /**\n         * Bind a callback on view close\n         * @param {PropertyViewCallback} cb\n         */\n        var onClose = function propOnClose(cb){\n            $view.on('propclose.propview', function(e){\n                e.stopPropagation();\n                cb();\n            });\n        };\n\n        /**\n         * Removes the property view\n         */\n        var destroy = function propDestroy(){\n            $view.remove();\n        };\n\n        /**\n         * Toggles the property view display\n         */\n        var toggle = function propToggle(){\n            $container.children('.props').not($view).hide().trigger('propclose.propview');\n            if(isOpen()){\n                $view.hide().trigger('propclose.propview');\n            } else {\n                $view.show().trigger('propopen.propview');\n            }\n        };\n\n       /**\n        * Set up the validation on the property view\n        * @private\n        */\n        function propValidation() {\n            $view.on('validated.group', function(e, isValid){\n                if(e.namespace === 'group'){\n                    var $togglers = $('#test-creator .property-toggler, #saver');\n                    if(isValid === true){\n                        $togglers.removeClass('disabled');\n                    } else {\n                        $togglers.addClass('disabled');\n                    }\n                }\n            });\n            $view.groupValidator();\n         }\n\n        return {\n            open : open,\n            getView : getView,\n            isOpen : isOpen,\n            onOpen : onOpen,\n            onClose : onClose,\n            destroy : destroy,\n            toggle : toggle\n        };\n    };\n\n   return propView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/actions',[\n'jquery',\n'taoQtiTest/controller/creator/views/property'],\nfunction($, propertyView){\n    'use strict';\n\n    var disabledClass = 'disabled';\n    var activeClass = 'active';\n    var btnOnClass = 'tlb-button-on';\n\n    /**\n     * Set up the property view for an element\n     * @param {jQueryElement} $container - that contains the property opener\n     * @param {String} template - the name of the template to give to the propertyView\n     * @param {Object} model - the model to bind\n     * @param {PropertyViewCallback} cb - execute at view setup phase\n     */\n    function properties ($container, template, model, cb) {\n        var propView = null;\n        $container.find('.property-toggler').on('click', function(e){\n            e.preventDefault();\n            var $elt = $(this);\n            if(!$(this).hasClass(disabledClass)){\n\n                $elt.blur(); //to remove the focus\n\n                if(propView === null){\n\n                    $container.addClass(activeClass);\n                    $elt.addClass(btnOnClass);\n\n                    propView = propertyView(template, model);\n                    propView.open();\n\n                    propView.onOpen(function(){\n                        $container.addClass(activeClass);\n                        $elt.addClass(btnOnClass);\n                    });\n                    propView.onClose(function(){\n                        $container.removeClass(activeClass);\n                        $elt.removeClass(btnOnClass);\n                    });\n\n                    if(typeof cb === 'function'){\n                        cb(propView);\n                    }\n                } else {\n                    propView.toggle();\n                }\n            }\n        });\n    }\n\n\n    /**\n     * Enable to move an element\n     * @param {jQueryElement} $actionContainer - where the mover is\n     * @param {String} containerClass - the cssClass of the element container\n     * @param {String} elementClass - the cssClass to identify elements\n     */\n    function move ($actionContainer, containerClass, elementClass) {\n        var $element = $actionContainer.parents('.' + elementClass);\n        var $container = $element.parents('.' + containerClass );\n\n        //move up an element\n        $('.move-up', $actionContainer).click(function(e){\n            var $elements, index;\n\n            //prevent default and click during animation\n            e.preventDefault();\n            if($element.is(':animated')){\n                return false;\n            }\n\n            //get the position\n            $elements = $('.' + elementClass, $container);\n            index = $elements.index($element);\n            if (index > 0) {\n                $element.fadeOut(200, function(){\n                    $element\n                        .insertBefore($('.' + elementClass + ' :eq(' + (index - 1) + ')', $container))\n                        .fadeIn(400, function(){\n                            $container.trigger('change');\n                        });\n                });\n            }\n        });\n\n        //move down an element\n        $('.move-down', $actionContainer).click(function(e){\n            var $elements, index;\n\n            //prevent default and click during animation\n            e.preventDefault();\n            if($element.is(':animated')){\n                return false;\n            }\n\n            //get the position\n            $elements = $('.' + elementClass, $container);\n            index = $elements.index($element);\n            if (index < ($elements.length - 1) && $elements.length > 1) {\n                $element.fadeOut(200, function(){\n                    $element\n                        .insertAfter($('.' + elementClass + ' :eq(' + (index + 1) + ')', $container))\n                        .fadeIn(400, function(){\n                            $container.trigger('change');\n                        });\n                });\n            }\n        });\n    }\n\n    /**\n     * Update the movable state of an element\n     * @param {jQueryElement} $container - the movable elements (scopped)\n     * @param {String} elementClass - the cssClass to identify elements\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function movable ($container, elementClass, actionContainerElt){\n        $container.each(function(){\n            var $elt = $(this);\n            var $actionContainer = $(actionContainerElt, $elt);\n\n            var index = $container.index($elt);\n            var $moveUp = $('.move-up', $actionContainer);\n            var $moveDown = $('.move-down', $actionContainer);\n\n            //only one test part, no moving\n            if( $container.length === 1 ){\n                $moveUp.addClass(disabledClass);\n                $moveDown.addClass(disabledClass);\n\n            //testpart is the first, only moving down\n            } else if(index === 0) {\n                $moveUp.addClass(disabledClass);\n                $moveDown.removeClass(disabledClass);\n\n            //testpart is the lasst, only moving up\n            } else if ( index >= ($container.length - 1) ) {\n                $moveDown.addClass(disabledClass);\n                $moveUp.removeClass(disabledClass);\n\n            //or enable moving top/bottom\n            } else {\n                $moveUp.removeClass(disabledClass);\n                $moveDown.removeClass(disabledClass);\n            }\n         });\n    }\n\n    /**\n     * Update the removable state of an element\n     * @param {jQueryElement} $container - that contains the removable action\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function removable ($container, actionContainerElt){\n        $container.each(function(){\n            var $elt = $(this);\n            var $actionContainer = $(actionContainerElt, $elt);\n            var $delete = $('[data-delete]', $actionContainer);\n\n            if($container.length <= 1){\n                $delete.addClass(disabledClass);\n            } else {\n                $delete.removeClass(disabledClass);\n            }\n        });\n    }\n\n    /**\n     * Disable all the actions of the target\n     * @param {jQueryElement} $container - that contains the the actions\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function disable($container, actionContainerElt){\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').addClass(disabledClass);\n    }\n\n    /**\n     * Enable all the actions of the target\n     * @param {jQueryElement} $container - that contains the the actions\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function enable($container, actionContainerElt){\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').removeClass(disabledClass);\n    }\n\n    /**\n     * The actions gives you shared behavior for some actions.\n     *\n     * @exports taoQtiTest/controller/creator/views/actions\n     */\n    return {\n        properties  : properties,\n        move        : move,\n        removable   : removable,\n        movable     : movable,\n        disable     : disable,\n        enable      : enable\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * This helper manages the category selection UI:\n * - either via a text entry field that allow to enter any custom categories\n * - either via displaying grouped checkboxes that allow to select any categories presets\n * All categories are then grouped and given to this object's listeners, as they will later end up in the same model field.\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/categorySelector',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/eventifier',\n    'ui/tooltip',\n    'taoQtiTest/controller/creator/templates/index',\n    'select2'\n], function($, _, __, eventifier, tooltip, templates) {\n    'use strict';\n\n    var allPresets = [],\n        allQtiCategoriesPresets = [];\n\n\n    function categorySelectorFactory($container) {\n        var categorySelector,\n\n            $presetsContainer = $container.find('.category-presets'),\n            $presetsCheckboxes,\n            $customCategoriesSelect = $container.find('[name=category-custom]');\n\n        /**\n         * Read the form state from the DOM and trigger an event with the result, so the listeners can update the item/section model\n         * @fires categorySelector#category-change\n         */\n        function updateCategories() {\n            var selectedCategories,\n                indeterminatedCategories,\n\n                presetSelected = $container\n                    .find('.category-preset input:checked')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.value;\n                    }),\n                presetIndeterminate = $container\n                    .find('.category-preset input:indeterminate')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.value;\n                    }),\n                customSelected = $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice').not('.partial')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.textContent && categoryEl.textContent.trim();\n                    }),\n                customIndeterminate = $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice.partial')\n                    .toArray()\n                    .map(function(categoryEl) {\n                        return categoryEl.textContent && categoryEl.textContent.trim();\n                    });\n\n            selectedCategories = presetSelected.concat(customSelected);\n            indeterminatedCategories = presetIndeterminate.concat(customIndeterminate);\n\n            /**\n             * @event categorySelector#category-change\n             * @param {String[]} allCategories\n             * @param {String[]} indeterminate\n             */\n            this.trigger('category-change', selectedCategories, indeterminatedCategories);\n        }\n\n        categorySelector = {\n            /**\n             * Create the category selection form\n             *\n             * @param {Array} [currentCategories] - all categories currently associated to the item. If applied to a section,\n             * contains all the categories applied to at least one item of the section.\n             */\n            createForm: function createForm(currentCategories) {\n                var self = this,\n                    presetsTpl = templates.properties.categorypresets,\n                    customCategories = _.difference(currentCategories, allQtiCategoriesPresets);\n\n                // add preset checkboxes\n                $presetsContainer.append(\n                    presetsTpl(allPresets)\n                );\n\n                $presetsContainer.on('click', function(e) {\n                    var $preset = $(e.target).closest('.category-preset'),\n                        $checkbox;\n\n                    if ($preset.length) {\n                        $checkbox = $preset.find('input');\n                        $checkbox.prop('indeterminate', false);\n\n                        _.defer(function() {\n                            updateCategories.call(self);\n                        });\n                    }\n                });\n\n                // init custom categories field\n                $customCategoriesSelect.select2({\n                    width: '100%',\n                    tags : customCategories,\n                    multiple : true,\n                    tokenSeparators: [\",\", \" \", \";\"],\n                    formatNoMatches : function(){\n                        return __('Enter a custom category');\n                    },\n                    maximumInputLength : 32\n                }).on('change', function(){\n                    updateCategories.call(self);\n                });\n\n                // enable help tooltips\n                tooltip($container);\n            },\n\n            /**\n             * Check/Uncheck boxes and fill the custom category field to match the new model\n             * @param {String[]} selected - categories associated with an item, or with all the items of the same section\n             * @param {String[]} [indeterminate] - categories in an indeterminate state at a section level\n             */\n            updateFormState: function updateFormState(selected, indeterminate) {\n                var customCategories;\n\n                indeterminate = indeterminate || [];\n\n                customCategories = _.difference(selected.concat(indeterminate), allQtiCategoriesPresets);\n\n                // Preset categories\n\n                $presetsCheckboxes = $container.find('.category-preset input');\n                $presetsCheckboxes.each(function() {\n                    var category = this.value;\n\n                    this.indeterminate = false;\n                    this.checked = false;\n\n                    if (indeterminate.indexOf(category) !== -1) {\n                        this.indeterminate = true;\n                    } else if (selected.indexOf(category) !== -1) {\n                        this.checked = true;\n                    }\n                });\n\n                // Custom categories\n\n                $customCategoriesSelect.select2('val', customCategories);\n\n                $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice').each(function(){\n                    var $li = $(this);\n                    var content = $li.find('div').text();\n                    if(indeterminate.indexOf(content) !== -1){\n                        $li.addClass('partial');\n                    }\n                });\n            }\n        };\n\n        eventifier(categorySelector);\n\n        return categorySelector;\n    }\n\n    /**\n     * @param {Object[]} presets - expected format:\n     * [\n     *  {\n     *      groupId: 'navigation',\n     *      groupLabel: 'Test Navigation',\n     *      presets: [\n     *          {\n     *              id: 'nextPartWarning',\n     *              label: 'Next Part Warning',\n     *              qtiCategory : 'x-tao-option-nextPartWarning',\n     *              description : 'Displays a warning before the user finishes a part'\n *              },\n     *          ...\n     *      ]\n     *  },\n     *  ...\n     * ]\n     */\n    categorySelectorFactory.setPresets = function setPresets(presets) {\n        if (_.isArray(presets)) {\n            allPresets = presets;\n            allQtiCategoriesPresets = extractCategoriesFromPresets();\n        }\n    };\n\n    /**\n     * Extract the qtiCategory property of all presets of all groups\n     * @returns {String[]}\n     */\n    function extractCategoriesFromPresets() {\n        return allPresets.reduce(function (prev, current) {\n            var groupIds = _.pluck(current.presets, 'qtiCategory');\n            return prev.concat(groupIds);\n        }, []);\n    }\n\n    return categorySelectorFactory;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n */\ndefine('taoQtiTest/controller/creator/helpers/sectionCategory',[\n    'lodash',\n    'i18n',\n    'core/errorHandler'\n], function (_, __, errorHandler){\n\n    'use strict';\n\n    var _ns = '.sectionCategory';\n\n    /**\n     * Check if the given object is a valid assessmentSection model object\n     *\n     * @param {object} model\n     * @returns {boolean}\n     */\n    function isValidSectionModel(model){\n        return (_.isObject(model) && model['qti-type'] === 'assessmentSection' && _.isArray(model.sectionParts));\n    }\n\n    /**\n     * Set an array of categories to the section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} selected - all categories active for the whole section\n     * @param {array} partial - only categories in an indeterminate state\n     * @returns {undefined}\n     */\n    function setCategories(model, selected, partial){\n\n        var toRemove,\n            toAdd,\n            currentCategories = getCategories(model);\n\n        partial = partial || [];\n\n        //the categories that are no longer in the new list of categories should be removed\n        toRemove = _.difference(currentCategories.all, selected.concat(partial));\n\n        //the categories that are not in the current categories collection should be added to the children\n        toAdd = _.difference(selected, currentCategories.propagated);\n\n        //process the modification\n        addCategories(model, toAdd);\n        removeCategories(model, toRemove);\n    }\n\n    /**\n     * Get the categories assign to the section model, infered by its interal itemRefs\n     *\n     * @param {object} model\n     * @returns {object}\n     */\n    function getCategories(model){\n        var categories,\n            arrays,\n            union,\n            propagated,\n            partial;\n\n        if(isValidSectionModel(model)){\n            categories = _.map(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\n                    return _.compact(itemRef.categories);\n                }\n            });\n            //array of categories\n            arrays = _.values(categories);\n            union = _.union.apply(null, arrays);\n\n            //categories that are common to all itemRef\n            propagated = _.intersection.apply(null, arrays);\n\n            //the categories that are only partially covered on the section level : complementary of \"propagated\"\n            partial = _.difference(union, propagated);\n\n            return {\n                all : union.sort(),\n                propagated : propagated.sort(),\n                partial : partial.sort()\n            };\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Add an array of categories to a section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function addCategories(model, categories){\n        if(isValidSectionModel(model)){\n            _.each(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef'){\n                    if(!_.isArray(itemRef.categories)){\n                        itemRef.categories = [];\n                    }\n                    itemRef.categories = _.union(itemRef.categories, categories);\n                }\n            });\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Remove an array of categories from a section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function removeCategories(model, categories){\n        if(isValidSectionModel(model)){\n            _.each(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\n                    itemRef.categories = _.difference(itemRef.categories, categories);\n                }\n            });\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    return {\n        isValidSectionModel : isValidSectionModel,\n        setCategories : setCategories,\n        getCategories : getCategories,\n        addCategories : addCategories,\n        removeCategories : removeCategories\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/qtiTest',[\n    'lodash',\n    'i18n',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/qtiElement'\n], function(_, __, outcomeHelper, qtiElementHelper){\n    'use strict';\n\n    /**\n     * Utils to manage the QTI Test model\n     * @exports taoQtiTest/controller/creator/qtiTestHelper\n     */\n    var qtiTestHelper = {\n\n        /**\n         * Extract qti identifiers from a model\n         * @param {Object} obj - the model to extract id from\n         * @returns {Array} the extracted identifiers\n         */\n        extractIdentifiers : function extractIdentifiers(obj){\n            var self = this;\n            var identifiers = [];\n            if(_.has(obj, 'identifier')){\n                identifiers = identifiers.concat(obj.identifier.toLowerCase());\n            }\n            _.flatten(_.forEach(obj, function(value) {\n                identifiers = identifiers.concat(typeof value === \"object\" ? self.extractIdentifiers(value) : []);\n            }), true);\n            return identifiers;\n        },\n\n        /**\n         * Get a valid and avialable qti identifier\n         * @param {String} qtiType - the type of element you want an id for\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\n         * @returns {String} the identifier\n         */\n        getIdentifier : function getIdentifier(qtiType, lockedIdentifiers){\n            var index = 1;\n            var suggestion;\n            var glue =  '-';\n\n            do {\n                suggestion = qtiType +  glue + (index++);\n            } while(_.contains(lockedIdentifiers, suggestion.toLowerCase()));\n\n            lockedIdentifiers.push(suggestion.toLowerCase());\n\n            return suggestion;\n        },\n\n        /**\n         * Gives you a validator that check QTI id format\n         * @returns {Object} the validator\n         */\n        idFormatValidator : function idFormatValidator(){\n            var qtiIdPattern = /^[_a-zA-Z]{1}[a-zA-Z0-9\\-._]{0,31}$/i;\n            return {\n                name : 'idFormat',\n                message : __('is not a valid identifier (alphanum, underscore, dash and dots)'),\n                validate : function(value, callback){\n                    if(typeof callback === 'function'){\n                        callback(qtiIdPattern.test(value));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Gives you a validator that check QTI id format of the test (it is different from the others...)\n         * @returns {Object} the validator\n         */\n        testidFormatValidator : function testidFormatValidator(){\n            var qtiTestIdPattern = /^\\S+$/;\n            return {\n                name : 'testIdFormat',\n                message : __('is not a valid identifier (everything except spaces)'),\n                validate : function(value, callback){\n                    if(typeof callback === 'function'){\n                        callback(qtiTestIdPattern.test(value));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Gives you a validator that check if a QTI id is available\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\n         * @returns {Object} the validator\n         */\n        idAvailableValidator : function idAvailableValidator(lockedIdentifiers){\n            return {\n                name : 'testIdAvailable',\n                message : __('is already used in the test.'),\n                validate : function(value, callback, options){\n                    if(typeof callback === 'function'){\n                        callback(!_.contains(_.values(lockedIdentifiers), value.toLowerCase()) || (options.original && value === options.original));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Does the value contains the type type\n         * @param {Object} value\n         * @param {string} type\n         * @returns {boolean}\n         */\n        filterQtiType : function filterQtiType (value, type){\n            return value['qti-type'] && value['qti-type'] === type;\n        },\n\n        /**\n         * Add the 'qti-type' properties to object that miss it, using the parent key name\n         * @param {Object|Array} collection\n         * @param {string} parentType\n         */\n        addMissingQtiType : function addMissingQtiType(collection, parentType) {\n            var self = this;\n            _.forEach(collection, function(value, key) {\n                if (_.isObject(value) && !_.isArray(value) && !_.has(value, 'qti-type')) {\n                    if (_.isNumber(key)) {\n                        if (parentType) {\n                            value['qti-type'] = parentType;\n                        }\n                    } else {\n                        value['qti-type'] = key;\n                    }\n                }\n                if (_.isArray(value)) {\n                    self.addMissingQtiType(value, key.replace(/s$/, ''));\n                } else if (_.isObject(value)) {\n                    self.addMissingQtiType(value);\n                }\n            });\n        },\n\n        /**\n         * Applies consolidation rules to the model\n         * @param {Object} model\n         * @returns {Object}\n         */\n        consolidateModel : function consolidateModel(model){\n            if(model && model.testParts && _.isArray(model.testParts)){\n\n                _.forEach(model.testParts, function(testPart) {\n\n                    if(testPart.assessmentSections && _.isArray(testPart.assessmentSections)){\n\n                        _.forEach(testPart.assessmentSections, function(assessmentSection) {\n\n                            //remove ordering is shuffle is false\n                            if(assessmentSection.ordering &&\n                                assessmentSection.ordering.shuffle !== undefined && assessmentSection.ordering.shuffle === false){\n                                delete assessmentSection.ordering;\n                            }\n\n                            // clean categories (QTI identifier can't be empty string)\n                            if(assessmentSection.sectionParts && _.isArray(assessmentSection.sectionParts)) {\n                                _.forEach(assessmentSection.sectionParts, function(part) {\n                                    if(part.categories && _.isArray(part.categories) && (part.categories.length === 0 || part.categories[0].length === 0)) {\n                                        part.categories = [];\n                                    }\n                                });\n                            }\n\n                            if(assessmentSection.rubricBlocks && _.isArray(assessmentSection.rubricBlocks)) {\n\n                                //remove rubrick blocks if empty\n                                if (assessmentSection.rubricBlocks.length === 0 ||\n                                    (assessmentSection.rubricBlocks.length === 1 && assessmentSection.rubricBlocks[0].content.length === 0) ) {\n\n                                    delete assessmentSection.rubricBlocks;\n                                }\n                                //ensure the view attribute is present\n                                else if(assessmentSection.rubricBlocks.length > 0){\n                                    _.forEach(assessmentSection.rubricBlocks, function(rubricBlock){\n                                        rubricBlock.views = ['candidate'];\n                                        //change once views are supported\n                                        //if(rubricBlock && rubricBlock.content && (!rubricBlock.views || (_.isArray(rubricBlock.views) && rubricBlock.views.length === 0))){\n                                        //rubricBlock.views = ['candidate'];\n                                        //}\n                                    });\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n            return model;\n        },\n\n        /**\n         * Validates the provided model\n         * @param {Object} model\n         * @throws {Error} if the model is not valid\n         */\n        validateModel: function validateModel(model) {\n            var outcomes = _.indexBy(outcomeHelper.listOutcomes(model));\n\n            _.forEach(model.testParts, function (testPart) {\n                _.forEach(testPart.assessmentSections, function (assessmentSection) {\n                    _.forEach(assessmentSection.rubricBlocks, function (rubricBlock) {\n                        var feedbackBlock = qtiElementHelper.lookupElement(rubricBlock, 'rubricBlock.div.feedbackBlock', 'content');\n                        if (feedbackBlock && !outcomes[feedbackBlock.outcomeIdentifier]) {\n                            throw new Error(__('The outcome \"%s\" does not exist, but it is referenced by a feedback block!', feedbackBlock.outcomeIdentifier));\n                        }\n                    });\n                });\n            });\n        }\n    };\n\n    return  qtiTestHelper;\n});\n\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/itemref',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/helpers/categorySelector',\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/templates/index'\n],\nfunction(\n    $,\n    _,\n    __,\n    actions,\n    categorySelectorFactory,\n    sectionCategory,\n    qtiTestHelper,\n    templates\n){\n    'use strict';\n\n    /**\n     * We need to resize the itemref in case of long labels\n     */\n    var resize = _.throttle(function resize(){\n        var $refs = $('.itemrefs').first();\n        var $actions = $('.itemref .actions').first();\n        var width = $refs.innerWidth() - $actions.outerWidth();\n        $('.itemref > .title').width(width);\n    }, 100);\n\n    /**\n     * Set up an item ref: init action behaviors. Called for each one.\n     *\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     * @param {Object} refModel - the data model to bind to the item ref\n     * @param {jQueryElement} $itemRef - the itemRef element to set up\n     */\n    function setUp (modelOverseer, refModel, $itemRef){\n\n        var $actionContainer = $('.actions', $itemRef);\n\n        actions.properties($actionContainer, 'itemref', refModel, propHandler);\n        actions.move($actionContainer, 'itemrefs', 'itemref');\n\n        resize();\n\n        /**\n         * Perform some binding once the property view is create\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            categoriesProperty(propView.getView());\n            weightsProperty(propView);\n\n            $itemRef.parents('.testpart').on('delete', removePropHandler);\n            $itemRef.parents('.section').on('delete', removePropHandler);\n            $itemRef.on('delete', removePropHandler);\n\n            function removePropHandler(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the category property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function categoriesProperty($view){\n            var categorySelector = categorySelectorFactory($view),\n                $categoryField = $view.find('[name=\"itemref-category\"]');\n\n            categorySelector.createForm();\n            categorySelector.updateFormState(refModel.categories);\n\n            $view.on('propopen.propview', function(){\n                categorySelector.updateFormState(refModel.categories);\n            });\n\n            categorySelector.on('category-change', function(selected) {\n                // Let the binder update the model by going through the category hidden field\n                $categoryField.val(selected.join(','));\n                $categoryField.trigger('change');\n\n                modelOverseer.trigger('category-change', selected);\n            });\n        }\n\n\n        /**\n         * Setup the weights properties\n         */\n        function weightsProperty(propView) {\n            var $view = propView.getView(),\n                $weightList = $view.find('[data-bind-each=\"weights\"]'),\n                weightTpl = templates.properties.itemrefweight;\n\n            $view.find('.itemref-weight-add').on('click', function(e) {\n                var defaultData = {\n                    value: 1,\n                    identifier: (refModel.weights.length === 0)\n                        ? 'WEIGHT'\n                        : qtiTestHelper.getIdentifier('WEIGHT', qtiTestHelper.extractIdentifiers(refModel))\n                };\n                e.preventDefault();\n\n                $weightList.append(weightTpl(defaultData));\n                $weightList.trigger('add.internalbinder'); // trigger model update\n\n                $view.groupValidator();\n            });\n        }\n    }\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    function listenActionState (){\n\n        $('.itemrefs').each(function(){\n            actions.movable($('.itemref', $(this)), 'itemref', '.actions');\n        });\n\n        $(document)\n            .on('delete', function(e){\n                var $parent;\n                var $target = $(e.target);\n                if($target.hasClass('itemref')){\n                    $parent = $target.parents('.itemrefs');\n                    actions.disable($parent.find('.itemref'), '.actions');\n                }\n            })\n            .on('add change undo.deleter deleted.deleter', '.itemrefs',  function(e){\n                var $parent;\n                var $target = $(e.target);\n                if($target.hasClass('itemref') || $target.hasClass('itemrefs')){\n                    $parent = $('.itemref', $target.hasClass('itemrefs') ? $target : $target.parents('.itemrefs'));\n                    actions.enable($parent, '.actions');\n                    actions.movable($parent, 'itemref', '.actions');\n                }\n            });\n    }\n\n    /**\n     * The itemrefView setup itemref related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/itemref\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState,\n        resize : resize\n    };\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/encoders/dom2qti',[\n    'jquery',\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/qtiElement'\n], function ($, _, qtiElementHelper) {\n    'use strict';\n\n    /**\n     * A mapping of QTI-XML node names in order to keep the camel case form\n     * @type {Object}\n     */\n    var normalizedNodes = {\n        feedbackblock: 'feedbackBlock',\n        outcomeidentifier: 'outcomeIdentifier',\n        showhide: 'showHide'\n    };\n\n    /**\n     * Get the list of objects attributes to encode\n     * @param {Object} object\n     * @returns {Array}\n     */\n    function getAttributes(object) {\n        return _.omit(object, [\n            'qti-type',\n            'content',\n            'xmlBase',\n            'lang',\n            'label'\n        ]);\n    }\n\n    /**\n     * Encode object's properties to xml/html string attributes\n     * @param {Object} attributes\n     * @returns {String}\n     */\n    function attrToStr(attributes) {\n        return _.reduce(attributes, function (acc, value, key) {\n            if (_.isNumber(value) || (_.isString(value) && !_.isEmpty(value))) {\n                return acc + ' ' + key + '=\"' + value + '\" ';\n            }\n            return acc;\n        }, '');\n    }\n\n    /**\n     * Ensures the nodeName has a normalized form:\n     * - standard HTML tags are in lower case\n     * - QTI-XML tags are in the right form\n     * @param {String} nodeName\n     * @returns {String}\n     */\n    function normalizeNodeName(nodeName) {\n        var normalized = nodeName.toLocaleLowerCase();\n        return normalizedNodes[normalized] || normalized;\n    }\n\n    /**\n     * This encoder is used to transform DOM to JSON QTI and JSON QTI to DOM.\n     * It works now for the rubricBlocks components.\n     * @exports creator/encoders/dom2qti\n     */\n    return {\n\n        /**\n         * Encode an object to a dom string\n         * @param {Object} modelValue\n         * @returns {String}\n         */\n        encode: function (modelValue) {\n            var self = this;\n\n            if (_.isArray(modelValue)) {\n                return _.reduce(modelValue, function (result, value) {\n                    return result + self.encode(value);\n                }, '');\n            } else if (_.isObject(modelValue) && modelValue['qti-type']) {\n                if (modelValue['qti-type'] === 'textRun') {\n                    return modelValue.content;\n                }\n                var startTag = '<' + modelValue['qti-type'] + attrToStr(getAttributes(modelValue));\n                if (modelValue.content) {\n                    return startTag + '>' + self.encode(modelValue.content) + '</' + modelValue['qti-type'] + '>';\n                } else {\n                    return startTag + '/>';\n                }\n            }\n            return '' + modelValue;\n        },\n\n        /**\n         * Decode a string that represents a DOM to a QTI formatted object\n         * @param {String} nodeValue\n         * @returns {Array}\n         */\n        decode: function (nodeValue) {\n            var self = this;\n            var $nodeValue = (nodeValue instanceof $) ? nodeValue : $(nodeValue);\n            var result = [];\n\n            _.forEach($nodeValue, function (elt) {\n                var object;\n                if (elt.nodeType === 3) {\n                    if (!_.isEmpty($.trim(elt.nodeValue))) {\n                        result.push(qtiElementHelper.create('textRun', {\n                            'content': elt.nodeValue,\n                            'xmlBase': ''\n                        }));\n                    }\n                } else if (elt.nodeType === 1) {\n                    object = _.merge(qtiElementHelper.create(normalizeNodeName(elt.nodeName), {\n                        'id': '',\n                        'class': '',\n                        'xmlBase': '',\n                        'lang': '',\n                        'label': ''\n                    }),\n                    _.transform(elt.attributes, function (acc, value) {\n                        if (value.nodeName) {\n                            acc[normalizeNodeName(value.nodeName)] = value.nodeValue;\n                        }\n                    }));\n                    if (elt.childNodes.length > 0) {\n                        object.content = self.decode(elt.childNodes);\n                    }\n                    result.push(object);\n                }\n            });\n            return result;\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/ckConfigurator',['ui/ckeditor/ckConfigurator', 'mathJax'], function(ckConfigurator, mathJax) {\n    'use strict';\n\n    /**\n     * Generate a configuration object for CKEDITOR\n     *\n     * @param editor instance of ckeditor\n     * @param toolbarType block | inline | flow | qtiBlock | qtiInline | qtiFlow | reset to get back to normal\n     * @param {Object} [options] - is based on the CKEDITOR config object with some additional sugar\n     *        Note that it's here you need to add parameters for the resource manager.\n     *        Some options are not covered in http://docs.ckeditor.com/#!/api/CKEDITOR.config\n     * @param [options.dtdOverrides] - @see dtdOverrides which pre-defines them\n     * @param {Object} [options.positionedPlugins] - @see ckConfig.positionedPlugins\n     * @param {Boolean} [options.qtiImage] - enables the qtiImage plugin\n     * @param {Boolean} [options.qtiInclude] - enables the qtiInclude plugin\n     * @param {Boolean} [options.underline] - enables the underline plugin\n     * @param {Boolean} [options.mathJax] - enables the mathJax plugin\n     *\n     * @see http://docs.ckeditor.com/#!/api/CKEDITOR.config\n     */\n    var getConfig = function(editor, toolbarType, options){\n        options = options || {};\n\n        options.underline = true;\n\n        return ckConfigurator.getConfig(editor, toolbarType, options);\n    };\n\n    return {\n        getConfig : getConfig\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/rubricblock',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'ui/dialog/alert',\n    'util/namespace',\n    'taoQtiTest/controller/creator/views/actions',\n    'helpers',\n    'ckeditor',\n    'taoQtiTest/controller/creator/encoders/dom2qti',\n    'taoQtiTest/controller/creator/helpers/ckConfigurator',\n    'taoQtiTest/controller/creator/helpers/qtiElement'\n], function ($, _, __, hider, dialogAlert, namespaceHelper, actions, helpers, ckeditor, Dom2QtiEncoder, ckConfigurator, qtiElementHelper) { // qtiClasses, creatorRenderer, XmlRenderer, simpleParser){\n    'use strict';\n\n    //compute ckeditor config only once\n    var ckConfig = ckConfigurator.getConfig(ckeditor, 'qtiBlock');\n\n    function filterPlugin(plugin) {\n        return _.contains(['taoqtiimage', 'taoqtimedia', 'taoqtimaths', 'taoqtiinclude'], plugin);\n    }\n\n    ckConfig.plugins = _.reject(ckConfig.plugins.split(','), filterPlugin).join(',');\n    ckConfig.extraPlugins = _.reject(ckConfig.extraPlugins.split(','), filterPlugin).join(',');\n\n    /**\n     * The rubriclockView setup RB related components and behavior\n     *\n     * @exports taoQtiTest/controller/creator/views/rubricblock\n     */\n    return {\n        /**\n         * Set up a rubric block: init action behaviors. Called for each one.\n         *\n         * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n         * @param {Object} rubricModel - the rubric block data\n         * @param {jQueryElement} $rubricBlock - the rubric block to set up\n         */\n        setUp: function setUp(modelOverseer, rubricModel, $rubricBlock) {\n            //we need to synchronize the ck elt with an hidden elt that has data-binding\n            var $rubricBlockContent = $('.rubricblock-content', $rubricBlock);\n            var syncRubricBlockContent = _.debounce(editorToModel, 100);\n            var editor;\n\n            /**\n             * Bind a listener only related to this rubric.\n             * @param {jQuery} $el\n             * @param {String} eventName\n             * @param {Function} cb\n             * @returns {jQuery}\n             */\n            function bindEvent($el, eventName, cb) {\n                eventName = namespaceHelper.namespaceAll(eventName, rubricModel.uid);\n                return $el.off(eventName).on(eventName, cb);\n            }\n\n            /**\n             * Ensures an html content is wrapped by a container tag.\n             * @param {String} html\n             * @returns {String}\n             */\n            function ensureWrap(html) {\n                html = (html || '').trim();\n                if (html.charAt(0) !== '<' || html.charAt(html.length - 1) !== '>') {\n                    html = '<div>' + html + '</div>';\n                }\n                if ($(html).length > 1) {\n                    html = '<div>' + html + '</div>';\n                }\n                return html;\n            }\n\n            /**\n             * Forwards the editor content into the model\n             */\n            function editorToModel() {\n                var rubric = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock', 'content');\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\n                var content = Dom2QtiEncoder.decode(ensureWrap($rubricBlockContent.html()));\n\n                if (wrapper) {\n                    wrapper.content = content;\n                } else {\n                    rubric.content = content;\n                }\n            }\n\n            /**\n             * Forwards the model content into the editor\n             */\n            function modelToEditor() {\n                var rubric = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock', 'content');\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\n                var content = wrapper ? wrapper.content : rubric.content;\n                var html = ensureWrap(Dom2QtiEncoder.encode(content));\n                $rubricBlockContent.html(html);\n            }\n\n            /**\n             * Wrap/unwrap the rubric block in a feedback according to the user selection\n             * @param {Object} feedback\n             * @returns {Boolean}\n             */\n            function updateFeedback(feedback) {\n                var activated = feedback && feedback.activated;\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\n\n                if (activated) {\n                    // wrap the actual content into a feedbackBlock if needed\n                    if (!wrapper) {\n                        rubricModel.content = [qtiElementHelper.create('div', {\n                            content: [qtiElementHelper.create('feedbackBlock', {\n                                outcomeIdentifier: feedback.outcome,\n                                identifier: feedback.matchValue,\n                                content: rubricModel.content\n                            })]\n                        })];\n                    } else {\n                        wrapper.outcomeIdentifier = feedback.outcome;\n                        wrapper.identifier = feedback.matchValue;\n                    }\n                    modelToEditor();\n                } else {\n                    // remove the feedbackBlock wrapper, just keep the actual content\n                    if (wrapper) {\n                        rubricModel.content = wrapper.content;\n                        modelToEditor();\n                    }\n                }\n\n                return activated;\n            }\n\n            /**\n             * Perform some binding once the property view is created\n             * @private\n             * @param {propView} propView - the view object\n             */\n            function propHandler(propView) {\n                var $view = propView.getView();\n                var $feedbackOutcomeLine = $('.rubric-feedback-outcome', $view);\n                var $feedbackMatchLine = $('.rubric-feedback-match-value', $view);\n                var $feedbackOutcome = $('[name=feedback-outcome]', $view);\n                var $feedbackActivated = $('[name=activated]', $view);\n\n                // toggle the feedback panel\n                function changeFeedback(activated) {\n                    hider.toggle($feedbackOutcomeLine, activated);\n                    hider.toggle($feedbackMatchLine, activated);\n                }\n\n                // should be called when the properties panel is removed\n                function removePropHandler() {\n                    rubricModel.feedback = {};\n                    if (propView !== null) {\n                        propView.destroy();\n                    }\n                }\n\n                // take care of changes in the properties view\n                function changeHandler(e, changedModel) {\n                    if (e.namespace === 'binder' && changedModel['qti-type'] === 'rubricBlock') {\n                        changeFeedback(updateFeedback(changedModel.feedback));\n                    }\n                }\n\n                // update the list of outcomes the feedback can target\n                function updateOutcomes() {\n                    var activated = rubricModel.feedback && rubricModel.feedback.activated;\n                    // build the list of outcomes in a way select2 can understand\n                    var outcomes = _.map(modelOverseer.getOutcomesNames(), function(name) {\n                        return {\n                            id: name,\n                            text: name\n                        };\n                    });\n\n                    // create/update the select field\n                    $feedbackOutcome.select2({\n                        minimumResultsForSearch: -1,\n                        width: '100%',\n                        data: outcomes\n                    });\n\n                    // update the UI to reflect the data\n                    if (!activated) {\n                        $feedbackActivated.removeAttr('checked');\n                    }\n                    changeFeedback(activated);\n                }\n\n                $('[name=type]', $view).select2({\n                    minimumResultsForSearch: -1,\n                    width: '100%'\n                });\n\n                $view.on('change.binder', changeHandler);\n                bindEvent($rubricBlock.parents('.testpart'), 'delete', removePropHandler);\n                bindEvent($rubricBlock.parents('.section'), 'delete', removePropHandler);\n                bindEvent($rubricBlock, 'delete', removePropHandler);\n                bindEvent($rubricBlock, 'outcome-removed', function() {\n                    $feedbackOutcome.val('');\n                    updateOutcomes();\n                });\n                bindEvent($rubricBlock, 'outcome-updated', function() {\n                    updateFeedback(rubricModel.feedback);\n                    updateOutcomes();\n                });\n\n                changeFeedback(rubricModel.feedback);\n                updateOutcomes();\n                rbViews($view);\n            }\n\n            /**\n             * Set up the views select box\n             * @private\n             * @param {jQueryElement} $propContainer - the element container\n             */\n            function rbViews($propContainer) {\n                var $select = $('[name=view]', $propContainer);\n\n                bindEvent($select.select2({'width': '100%'}), \"select2-removed\", function () {\n                    if ($select.select2('val').length === 0) {\n                        $select.select2('val', [1]);\n                    }\n                });\n\n                if ($select.select2('val').length === 0) {\n                    $select.select2('val', [1]);\n                }\n            }\n\n            rubricModel.orderIndex = rubricModel.index + 1;\n            rubricModel.uid = _.uniqueId('rb');\n            rubricModel.feedback = {\n                activated: !!qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content'),\n                outcome: qtiElementHelper.lookupProperty(rubricModel, 'rubricBlock.div.feedbackBlock.outcomeIdentifier', 'content'),\n                matchValue: qtiElementHelper.lookupProperty(rubricModel, 'rubricBlock.div.feedbackBlock.identifier', 'content')\n            };\n\n            modelOverseer\n                .before('scoring-write.' + rubricModel.uid, function() {\n                    var feedbackOutcome = rubricModel.feedback && rubricModel.feedback.outcome;\n                    if (feedbackOutcome && _.indexOf(modelOverseer.getOutcomesNames(), feedbackOutcome) < 0) {\n                        // the targeted outcome has been removed, so remove the feedback\n                        modelOverseer.changedRubricBlock = (modelOverseer.changedRubricBlock || 0) + 1;\n                        rubricModel.feedback.activated = false;\n                        rubricModel.feedback.outcome = '';\n                        updateFeedback(rubricModel.feedback);\n                        $rubricBlock.trigger('outcome-removed');\n                    } else {\n                        // the tageted outcome is still here, just notify the properties panel to update the list\n                        $rubricBlock.trigger('outcome-updated');\n                    }\n                })\n                .on('scoring-write.' + rubricModel.uid, function() {\n                    // will notify the user of any removed feedbacks\n                    if (modelOverseer.changedRubricBlock) {\n                        /** @todo: provide a way to cancel changes */\n                        dialogAlert(__('Some rubric blocks have been updated to reflect the changes in the list of outcomes.'));\n                        modelOverseer.changedRubricBlock = 0;\n                    }\n                });\n\n            actions.properties($rubricBlock, 'rubricblock', rubricModel, propHandler);\n\n            modelToEditor();\n\n            editor = ckeditor.inline($rubricBlockContent[0], ckConfig);\n            editor.on('change', function () {\n                syncRubricBlockContent();\n            });\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\ndefine('taoQtiTest/controller/creator/helpers/sectionBlueprints',[\n    'lodash',\n    'i18n',\n    'core/errorHandler'\n], function (_, __, errorHandler){\n\n    'use strict';\n\n    var _ns = '.sectionBlueprint';\n\n\n    /**\n     * Set an array of categories to the section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {string} blueprint\n     * @returns {undefined}\n     */\n    function setBlueprint(model, blueprint){\n        model.blueprint = blueprint;\n    }\n\n    /**\n     * Get the categories assign to the section model, infered by its interal itemRefs\n     *\n     * @param {string} getUrl\n     * @param {object} model\n     * @returns {object}\n     */\n    function getBlueprint(getUrl, model){\n\n        return $.ajax({\n            url: getUrl,\n            type: 'GET',\n            data: {\n                section: model.identifier\n            },\n            dataType: 'json'\n\n        })\n        .fail(function () {\n            errorHandler.throw(_ns, 'invalid tool config format');\n        });\n\n    }\n\n    return {\n        setBlueprint : setBlueprint,\n        getBlueprint : getBlueprint\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/section',[\n    'jquery',\n    'lodash',\n    'uri',\n    'i18n',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/itemref',\n    'taoQtiTest/controller/creator/views/rubricblock',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/helpers/categorySelector',\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\n    'taoQtiTest/controller/creator/helpers/sectionBlueprints'\n],\nfunction(\n    $,\n    _,\n    uri,\n    __,\n    actions,\n    itemRefView,\n    rubricBlockView,\n    templates,\n    qtiTestHelper,\n    categorySelectorFactory,\n    sectionCategory,\n    sectionBlueprint\n){\n    'use strict';\n\n    /**\n     * Set up a section: init action behaviors. Called for each section.\n     *\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     * @param {Object} sectionModel - the data model to bind to the test section\n     * @param {jQueryElement} $section - the section to set up\n     */\n    function setUp (modelOverseer, sectionModel, $section){\n\n        var $actionContainer = $('h2', $section);\n        var config = modelOverseer.getConfig();\n\n        if(!_.isEmpty(config.routes.blueprintsById)){\n            sectionModel.hasBlueprint = true;\n        }\n        actions.properties($actionContainer, 'section', sectionModel, propHandler);\n        actions.move($actionContainer, 'sections', 'section');\n        itemRefs();\n        acceptItemRefs();\n        rubricBlocks();\n        addRubricBlock();\n\n        //trigger for the case the section is added an a selection is ongoing\n\n        /**\n         * Perform some binding once the property view is create\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            var $title;\n            var $view = propView.getView();\n\n            //enable/disable selection\n            var $selectionSwitcher = $('[name=section-enable-selection]', $view);\n            var $selectionSelect = $('[name=section-select]', $view);\n            var $selectionWithRep = $('[name=section-with-replacement]', $view);\n\n            var switchSelection = function switchSelection(){\n                if($selectionSwitcher.prop('checked') === true){\n                    $selectionSelect.incrementer('enable');\n                    $selectionWithRep.removeClass('disabled');\n                } else {\n                    $selectionSelect.incrementer('disable');\n                    $selectionWithRep.addClass('disabled');\n                }\n            };\n            $selectionSwitcher.on('change', switchSelection);\n            $selectionSwitcher.on('change', function updateModel(){\n                if(!$selectionSwitcher.prop('checked')){\n                    $selectionSelect.val(0);\n                    $selectionWithRep.prop('checked', false);\n                    delete sectionModel.selection;\n                }\n            });\n\n            $selectionSwitcher.prop('checked', !!sectionModel.selection).trigger('change');\n\n            //listen for databinder change to update the test part title\n            $title =  $('[data-bind=title]', $section);\n            $view.on('change.binder', function(e){\n                if(e.namespace === 'binder' && sectionModel['qti-type'] === 'assessmentSection'){\n                    $title.text(sectionModel.title);\n                }\n            });\n\n            $section.parents('.testpart').on('deleted.deleter', removePropHandler);\n            $section.on('deleted.deleter', removePropHandler);\n\n            //section level category configuration\n            categoriesProperty($view);\n\n            if(typeof sectionModel.hasBlueprint !== 'undefined'){\n                blueprintProperty($view);\n            }\n\n            function removePropHandler(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the item refs that already belongs to the section\n         * @private\n         */\n        function itemRefs(){\n\n            if(!sectionModel.sectionParts){\n                sectionModel.sectionParts = [];\n            }\n            $('.itemref', $section).each(function(){\n                var $itemRef = $(this);\n                var index = $itemRef.data('bind-index');\n                if(!sectionModel.sectionParts[index]){\n                    sectionModel.sectionParts[index] = {};\n                }\n\n                itemRefView.setUp(modelOverseer, sectionModel.sectionParts[index], $itemRef);\n                $itemRef.find('.title').text(\n                    config.labels[uri.encode($itemRef.data('uri'))]\n                );\n            });\n        }\n\n        /**\n         * Make the section to accept the selected items\n         * @private\n         * @fires modelOverseer#item-add\n         */\n        function acceptItemRefs(){\n            var $selected;\n            var $items     = $('.test-creator-items');\n\n            //the item selector trigger a select event\n            $items.on('itemselect.creator', function(){\n                var selection = Array.prototype.slice.call(arguments, 1);\n                var $placeholder = $('.itemref-placeholder', $section);\n                var $placeholders = $('.itemref-placeholder');\n\n                if(selection.length > 0){\n                    $placeholder.show().off('click').on('click', function(){\n\n                        //prepare the item data\n                        var categories,\n                            defaultItemData = {};\n\n                        if(sectionModel.itemSessionControl && !_.isUndefined(sectionModel.itemSessionControl.maxAttempts)){\n\n                            //for a matter of consistency, the itemRef will \"inherit\" the itemSessionControl configuration from its parent section\n                            defaultItemData.itemSessionControl = _.clone(sectionModel.itemSessionControl);\n                        }\n\n                        //the itemRef should also \"inherit\" the categories set at the item level\n                        categories = sectionCategory.getCategories(sectionModel);\n                        defaultItemData.categories = _.clone(categories.propagated);\n\n                        _.forEach(selection, function(item){\n                            var $item = $(item);\n                            var itemCategories = $item.data('categories');\n                            var itemData = _.defaults({\n                                href        : uri.decode($item.data('uri')),\n                                label       : $.trim($item.clone().children().remove().end().text()),\n                                'qti-type'  : 'assessmentItemRef'\n                            }, defaultItemData);\n                            if(!_.isEmpty(itemCategories)){\n                                itemData.categories = _.merge( itemData.categories, itemCategories.trim().split(',') );\n                            }\n\n                            addItemRef($('.itemrefs', $section), null, itemData);\n                        });\n\n                        //reset the current selection\n                        $('.ui-selected', $items).removeClass('ui-selected').removeClass('selected');\n                        $placeholders.hide().off('click');\n                    });\n                } else {\n                    $placeholders.hide().off('click');\n                }\n            });\n\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n                .off('add.binder', '#' + $section.attr('id') + ' .itemrefs')\n                .on('add.binder', '#' + $section.attr('id') + ' .itemrefs', function(e, $itemRef){\n                    var index, itemRefModel;\n                    if(e.namespace === 'binder' && $itemRef.hasClass('itemref')){\n                        index = $itemRef.data('bind-index');\n                        itemRefModel = sectionModel.sectionParts[index];\n\n                        //initialize the new item ref\n                        itemRefView.setUp(modelOverseer, itemRefModel, $itemRef);\n\n                        /**\n                         * @event modelOverseer#item-add\n                         * @param {Object} itemRefModel\n                         */\n                        modelOverseer.trigger('item-add', itemRefModel);\n                    }\n                });\n\n            //on set up, if there is a selection ongoing, we trigger the event\n            $selected = $('.selected', $items);\n            if($selected.length > 0){\n                $items.trigger('itemselect.creator', $selected);\n            }\n        }\n\n        /**\n         * Add a new item ref to the section\n         * @param {jQueryElement} $refList - the element to add the item to\n         * @param {Number} [index] - the position of the item to add\n         * @param {Object} [itemData] - the data to bind to the new item ref\n         */\n        function addItemRef($refList, index, itemData){\n            var $itemRef;\n            var $items = $refList.children('li');\n            index = index || $items.length;\n            itemData.identifier = qtiTestHelper.getIdentifier('item', config.identifiers);\n            itemData.index = index + 1;\n            $itemRef = $(templates.itemref(itemData));\n            if(index > 0){\n                $itemRef.insertAfter($items.eq(index - 1));\n            } else {\n                $itemRef.appendTo($refList);\n            }\n            $refList.trigger('add', [$itemRef, itemData]);\n        }\n\n\n        /**\n         * Set up the rubric blocks that already belongs to the section\n         * @private\n         */\n        function rubricBlocks () {\n            if(!sectionModel.rubricBlocks){\n                sectionModel.rubricBlocks = [];\n            }\n            $('.rubricblock', $section).each(function(){\n                var $rubricBlock = $(this);\n                var index = $rubricBlock.data('bind-index');\n                if(!sectionModel.rubricBlocks[index]){\n                    sectionModel.rubricBlocks[index] = {};\n                }\n\n                rubricBlockView.setUp(modelOverseer, sectionModel.rubricBlocks[index], $rubricBlock);\n            });\n\n            //opens the rubric blocks section if they are there.\n            if(sectionModel.rubricBlocks.length > 0){\n                $('.rub-toggler', $section).trigger('click');\n            }\n        }\n\n        /**\n         * Enable to add new rubric block\n         * @private\n         * @fires modelOverseer#rubric-add\n         */\n        function addRubricBlock () {\n\n            $('.rublock-adder', $section).adder({\n                target: $('.rubricblocks', $section),\n                content : templates.rubricblock,\n                templateData : function(cb){\n                    cb({\n                        'qti-type' : 'rubricBlock',\n                        index  : $('.rubricblock', $section).length,\n                        content : [],\n                        views : [1]\n                    });\n                }\n            });\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document).on('add.binder', '#' + $section.attr('id') + ' .rubricblocks', function(e, $rubricBlock){\n                var index, rubricModel;\n                if(e.namespace === 'binder' && $rubricBlock.hasClass('rubricblock')){\n                    index = $rubricBlock.data('bind-index');\n                    rubricModel = sectionModel.rubricBlocks[index];\n\n                    $('.rubricblock-binding', $rubricBlock).html('<p>&nbsp;</p>');\n                    rubricBlockView.setUp(modelOverseer, rubricModel, $rubricBlock);\n\n                    /**\n                     * @event modelOverseer#rubric-add\n                     * @param {Object} rubricModel\n                     */\n                    modelOverseer.trigger('rubric-add', rubricModel);\n                }\n            });\n        }\n\n        /**\n         * Set up the category property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         * @fires modelOverseer#category-change\n         */\n        function categoriesProperty($view){\n            var categories = sectionCategory.getCategories(sectionModel),\n                categorySelector = categorySelectorFactory($view);\n\n            categorySelector.createForm(categories.all);\n            updateFormState(categorySelector);\n\n            $view.on('propopen.propview', function(){\n                updateFormState(categorySelector);\n            });\n\n            categorySelector.on('category-change', function(selected, indeterminate) {\n                sectionCategory.setCategories(sectionModel, selected, indeterminate);\n\n                modelOverseer.trigger('category-change');\n            });\n        }\n\n        function updateFormState(categorySelector) {\n            var categories = sectionCategory.getCategories(sectionModel);\n            categorySelector.updateFormState(categories.propagated, categories.partial);\n        }\n\n        /**\n         * Set up the Blueprint property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function blueprintProperty($view){\n            var $select = $('[name=section-blueprint]', $view);\n            $select.select2({\n                ajax:{\n                    url: config.routes.blueprintsById,\n                    dataType: 'json',\n                    delay: 350,\n                    method: 'POST',\n                    data: function (params) {\n                        return {\n                            identifier: params // search term\n                        };\n                    },\n                    results: function (data) {\n                        return data;\n                    }\n                },\n                minimumInputLength: 3,\n                width: '100%',\n                multiple : false,\n                allowClear: true,\n                placeholder: __('Select a blueprint'),\n                formatNoMatches : function(){\n                    return __('Enter a blueprint');\n                },\n                maximumInputLength : 32\n            }).on('change', function(e){\n                setBlueprint(e.val);\n            });\n\n            initBlueprint();\n            $view.on('propopen.propview', function(){\n                initBlueprint();\n            });\n\n            /**\n             * Start the blueprint editing\n             * @private\n             */\n            function initBlueprint(){\n\n                if(typeof sectionModel.blueprint === 'undefined'){\n                    sectionBlueprint\n                        .getBlueprint(config.routes.blueprintByTestSection, sectionModel)\n                        .success(function(data){\n                            if(!_.isEmpty(data)){\n                                if(sectionModel.blueprint !== \"\"){\n                                    sectionModel.blueprint = data.uri;\n                                    $select.select2('data', {id: data.uri, text: data.text});\n                                    $select.trigger('change');\n                                }\n                            }\n                        });\n                }\n            }\n\n            /**\n             * save the categories into the model\n             * @private\n             */\n            function setBlueprint(blueprint){\n                sectionBlueprint.setBlueprint(sectionModel, blueprint);\n            }\n\n        }\n    }\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    function listenActionState (){\n\n        var $sections;\n\n        $('.sections').each(function(){\n            $sections = $('.section', $(this));\n\n            actions.removable($sections, 'h2');\n            actions.movable($sections, 'section', 'h2');\n        });\n\n        $(document)\n            .on('delete', function(e){\n                var $parent;\n                var $target = $(e.target);\n                if($target.hasClass('section')){\n                    $parent = $target.parents('.sections');\n                    actions.disable($parent.find('.section'), 'h2');\n                }\n            })\n            .on('add change undo.deleter deleted.deleter', function(e){\n                var $target = $(e.target);\n                if($target.hasClass('section') || $target.hasClass('sections')){\n                    $sections = $('.section', $target.hasClass('sections') ? $target : $target.parents('.sections'));\n                    actions.removable($sections, 'h2');\n                    actions.movable($sections, 'section', 'h2');\n                }\n            })\n            .on('open.toggler', '.rub-toggler', function(e){\n                if(e.namespace === 'toggler'){\n                    $(this).parents('h2').addClass('active');\n                }\n            })\n            .on('close.toggler', '.rub-toggler', function(e){\n                if(e.namespace === 'toggler'){\n                    $(this).parents('h2').removeClass('active');\n                }\n            });\n    }\n\n    /**\n     * The sectionView setup section related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/section\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/testpart',[\n    'jquery', 'lodash',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/section',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest'],\nfunction($, _, actions, sectionView, templates, qtiTestHelper){\n    'use strict';\n\n    /**\n     * Set up a test part: init action behaviors. Called for each test part.\n     *\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     * @param {Object} partModel - the data model to bind to the test part\n     * @param {jQueryElement} $testPart - the testpart container to set up\n     */\n    function setUp (modelOverseer, partModel, $testPart){\n        var $actionContainer = $('h1', $testPart);\n        var config = modelOverseer.getConfig();\n\n        //run setup methods\n        actions.properties($actionContainer, 'testpart', partModel, propHandler);\n        actions.move($actionContainer, 'testparts', 'testpart');\n        sections();\n        addSection();\n\n        /**\n         * Perform some binding once the property view is created\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            var $view = propView.getView();\n\n            //listen for databinder change to update the test part title\n            var $identifier =  $('[data-bind=identifier]', $testPart);\n            $view.on('change.binder', function(e, model){\n                if(e.namespace === 'binder' && model['qti-type'] === 'testPart'){\n                    $identifier.text(model.identifier);\n                }\n            });\n\n            //destroy it when it's testpart is removed\n            $testPart.on('delete', function(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            });\n        }\n\n        /**\n         * Set up sections that already belongs to the test part\n         * @private\n         */\n        function sections(){\n            if(!partModel.assessmentSections){\n                partModel.assessmentSections = [];\n            }\n            $('.section', $testPart).each(function(){\n                var $section = $(this);\n                var index = $section.data('bind-index');\n                if(!partModel.assessmentSections[index]){\n                    partModel.assessmentSections[index] = {};\n                }\n\n                sectionView.setUp(modelOverseer, partModel.assessmentSections[index], $section);\n            });\n        }\n\n        /**\n         * Enable to add new sections\n         * @private\n         * @fires modelOverseer#section-add\n         */\n        function addSection(){\n            $('.section-adder', $testPart).adder({\n                target: $('.sections', $testPart),\n                content : templates.section,\n                templateData : function(cb){\n\n                    //create a new section model object to be bound to the template\n                    var sectionIndex = $('.section', $testPart).length;\n                    cb({\n                        'qti-type' : 'assessmentSection',\n                        identifier : qtiTestHelper.getIdentifier('assessmentSection',  config.identifiers),\n                        title : 'Section ' + (sectionIndex + 1),\n                        index : 0,\n                        sectionParts : []\n                    });\n                }\n            });\n\n\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n                .off('add.binder', '#' + $testPart.attr('id') + ' .sections')\n                .on ('add.binder', '#' + $testPart.attr('id') + ' .sections', function(e, $section){\n                    var index, sectionModel;\n                    if(e.namespace === 'binder' && $section.hasClass('section')){\n                        index = $section.data('bind-index');\n                        sectionModel = partModel.assessmentSections[index];\n\n                        //initialize the new test part\n                        sectionView.setUp(modelOverseer, sectionModel, $section);\n\n                        /**\n                         * @event modelOverseer#section-add\n                         * @param {Object} sectionModel\n                         */\n                        modelOverseer.trigger('section-add', sectionModel);\n                    }\n                });\n        }\n    }\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    function listenActionState (){\n\n        var $testParts = $('.testpart');\n\n        actions.removable($testParts, 'h1');\n        actions.movable($testParts, 'testpart', 'h1');\n\n        $('.testparts')\n            .on('delete', function(e){\n                var $target = $(e.target);\n                if($target.hasClass('testpart')){\n                    actions.disable($('.testpart'), 'h1');\n                }\n            })\n            .on('add change undo.deleter deleted.deleter', function(e){\n                var $target = $(e.target);\n\n                if($target.hasClass('testpart') || $target.hasClass('testparts')){\n\n                    //refresh\n                    $testParts = $('.testpart');\n\n                    //check state\n                    actions.removable($testParts, 'h1');\n                    actions.movable($testParts, 'testpart', 'h1');\n                }\n            });\n    }\n\n    /**\n     * The testPartView setup testpart related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/testpart\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/test',[\n    'jquery', 'lodash', 'i18n', 'ui/hider', 'ui/feedback',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/testpart',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest'\n],\nfunction($, _, __, hider, feedback, actions, testPartView, templates, qtiTestHelper){\n    'use strict';\n\n    /**\n     * The TestView setup test related components and behavior\n     *\n     * @exports taoQtiTest/controller/creator/views/test\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\n     */\n    function testView (modelOverseer) {\n        var testModel = modelOverseer.getModel();\n        var config = modelOverseer.getConfig();\n\n        actions.properties($('.test-creator-test > h1'), 'test', testModel, propHandler);\n        testParts();\n        addTestPart();\n\n        /**\n         * set up the existing test part views\n         * @private\n         */\n        function testParts () {\n            if(!testModel.testParts){\n                testModel.testParts = [];\n            }\n            $('.testpart').each(function(){\n                var $testPart = $(this);\n                var index = $testPart.data('bind-index');\n                if(!testModel.testParts[index]){\n                    testModel.testParts[index] = {};\n                }\n\n                testPartView.setUp(modelOverseer, testModel.testParts[index], $testPart);\n            });\n        }\n\n        /**\n         * Perform some binding once the property view is created\n         * @private\n         * @param {propView} propView - the view object\n         * @fires modelOverseer#scoring-change\n         */\n        function propHandler(propView) {\n\n            var $view = propView.getView();\n            var $categoryScoreLine = $('.test-category-score', $view);\n            var $cutScoreLine = $('.test-cut-score', $view);\n            var $weightIdentifierLine = $('.test-weight-identifier', $view);\n            var $descriptions = $('.test-outcome-processing-description', $view);\n            var $generate = $('[data-action=\"generate-outcomes\"]', $view);\n            var $title = $('.test-creator-test > h1 [data-bind=title]');\n            var scoringState = JSON.stringify(testModel.scoring);\n\n            function changeScoring(scoring) {\n                var noOptions = !!scoring && ['none', 'custom'].indexOf(scoring.outcomeProcessing) === -1;\n                var newScoringState = JSON.stringify(scoring);\n\n                hider.toggle($cutScoreLine, !!scoring && scoring.outcomeProcessing === 'cut');\n                hider.toggle($categoryScoreLine, noOptions);\n                hider.toggle($weightIdentifierLine, noOptions);\n                hider.hide($descriptions);\n                hider.show($descriptions.filter('[data-key=\"' + scoring.outcomeProcessing + '\"]'));\n\n                if (scoringState !== newScoringState) {\n                    /**\n                     * @event modelOverseer#scoring-change\n                     * @param {Object} testModel\n                     */\n                    modelOverseer.trigger('scoring-change', testModel);\n                }\n                scoringState = newScoringState;\n            }\n\n            function updateOutcomes() {\n                var $panel = $('.outcome-declarations', $view);\n\n                $panel.html(templates.outcomes(modelOverseer.getOutcomesList()));\n            }\n\n            $('[name=test-outcome-processing]', $view).select2({\n                minimumResultsForSearch: -1,\n                width: '100%'\n            });\n\n            $generate.on('click', function() {\n                $generate.addClass('disabled').attr('disabled', true);\n                modelOverseer\n                    .on('scoring-write.regenerate', function() {\n                        modelOverseer.off('scoring-write.regenerate');\n                        feedback().success(__('The outcomes have been regenerated!')).on('destroy', function() {\n                            $generate.removeClass('disabled').removeAttr('disabled');\n                        });\n                    })\n                    .trigger('scoring-change');\n            });\n\n            $view.on('change.binder', function (e, model) {\n                if (e.namespace === 'binder' && model['qti-type'] === 'assessmentTest') {\n                    changeScoring(model.scoring);\n\n                    //update the test part title when the databinder has changed it\n                    $title.text(model.title);\n                }\n            });\n\n            modelOverseer.on('scoring-write', updateOutcomes);\n\n            changeScoring(testModel.scoring);\n            updateOutcomes();\n        }\n\n        /**\n         * Enable to add new test parts\n         * @private\n         * @fires modelOverseer#part-add\n         */\n        function addTestPart () {\n\n            $('.testpart-adder').adder({\n                target: $('.testparts'),\n                content : templates.testpart,\n                templateData : function(cb){\n\n                    //create an new testPart model object to be bound to the template\n                    var testPartIndex = $('.testpart').length;\n                    cb({\n                        'qti-type' : 'testPart',\n                        identifier : qtiTestHelper.getIdentifier('testPart', config.identifiers),\n                        index  : testPartIndex,\n                        navigationMode : 0,\n                        submissionMode : 0,\n                        assessmentSections : [{\n                            'qti-type' : 'assessmentSection',\n                            identifier : qtiTestHelper.getIdentifier('assessmentSection',  config.identifiers),\n                            title : 'Section 1',\n                            index : 0,\n                            sectionParts : []\n                        }]\n                    });\n                }\n            });\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n                .off('add.binder', '.testparts')\n                .on ('add.binder', '.testparts', function(e, $testPart, added){\n                    var partModel;\n                    if(e.namespace === 'binder' && $testPart.hasClass('testpart')){\n                        partModel = testModel.testParts[added.index];\n\n                        //initialize the new test part\n                        testPartView.setUp(modelOverseer, partModel, $testPart);\n\n                        /**\n                         * @event modelOverseer#part-add\n                         * @param {Object} partModel\n                         */\n                        modelOverseer.trigger('part-add', partModel);\n                    }\n                });\n        }\n    }\n\n    return testView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to generate outcomes processing rules for a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/processingRule',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/outcomeValidator',\n    'taoQtiTest/controller/creator/helpers/qtiElement',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality'\n], function (_, outcomeValidator, qtiElementHelper, baseTypeHelper, cardinalityHelper) {\n    'use strict';\n\n    var processingRuleHelper = {\n        /**\n         * Creates a basic processing rule\n         * @param {String} type\n         * @param {String} [identifier]\n         * @param {Array|Object} [expression]\n         * @returns {Object}\n         * @throws {TypeError} if the type is empty or is not a string\n         * @throws {TypeError} if the identifier is not valid\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        create: function create(type, identifier, expression) {\n            var processingRule = qtiElementHelper.create(type, identifier && validateIdentifier(identifier));\n\n            if (expression) {\n                processingRuleHelper.setExpression(processingRule, expression);\n            }\n\n            return processingRule;\n        },\n\n        /**\n         * Sets an expression to a processing rule\n         * @param {Object} processingRule\n         * @param {Object|Array} expression\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        setExpression: function setExpression(processingRule, expression) {\n            if (processingRule) {\n                if (_.isArray(expression)) {\n                    if (processingRule.expression) {\n                        processingRule.expression = null;\n                    }\n                    processingRule.expressions = validateOutcomeList(expression);\n                } else {\n                    if (processingRule.expressions) {\n                        processingRule.expressions = null;\n                    }\n                    if (expression) {\n                        processingRule.expression = validateOutcome(expression);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Adds an expression to a processing rule\n         * @param {Object} processingRule\n         * @param {Object|Array} expression\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        addExpression: function addExpression(processingRule, expression) {\n            if (processingRule && expression) {\n                if (processingRule.expression) {\n                    processingRule.expressions = forceArray(processingRule.expression);\n                    processingRule.expression = null;\n                }\n\n                if (_.isArray(expression)) {\n                    processingRule.expressions = forceArray(processingRule.expressions).concat(validateOutcomeList(expression));\n                } else {\n                    if (processingRule.expressions) {\n                        processingRule.expressions.push(expression);\n                    } else {\n                        processingRule.expression = validateOutcome(expression);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Creates a `setOutcomeValue` rule\n         * @param {String} identifier\n         * @param {Object|Array} [expression]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         * @throws {TypeError} if the expression does not contain valid QTI elements\n         */\n        setOutcomeValue: function setOutcomeValue(identifier, expression) {\n            return processingRuleHelper.create('setOutcomeValue',  validateIdentifier(identifier), expression);\n        },\n\n        /**\n         * Creates a `gte` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        gte: function gte(left, right) {\n            return binaryOperator('gte', left, right);\n        },\n\n        /**\n         * Creates a `lte` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        lte: function lte(left, right) {\n            return binaryOperator('lte', left, right);\n        },\n\n        /**\n         * Creates a `divide` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        divide: function divide(left, right) {\n            return binaryOperator('divide', left, right);\n        },\n\n        /**\n         * Creates a `sum` rule\n         * @param {Object|Array} terms\n         * @returns {Object}\n         * @throws {TypeError} if the terms are not valid QTI elements\n         */\n        sum: function sum(terms) {\n            var processingRule = processingRuleHelper.create('sum', null, forceArray(terms));\n\n            processingRule.minOperands = 1;\n            processingRule.maxOperands = -1;\n            processingRule.acceptedCardinalities = [cardinalityHelper.SINGLE, cardinalityHelper.MULTIPLE, cardinalityHelper.ORDERED];\n            processingRule.acceptedBaseTypes = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `testVariables` rule\n         * @param {String} identifier\n         * @param {String|Number} [type]\n         * @param {String} weightIdentifier\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        testVariables: function testVariables(identifier, type, weightIdentifier, includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('testVariables');\n\n            processingRule.variableIdentifier = validateIdentifier(identifier);\n            processingRule.baseType = baseTypeHelper.getValid(type);\n            addWeightIdentifier(processingRule, weightIdentifier);\n            addSectionIdentifier(processingRule, '');\n            addCategories(processingRule, includeCategories, excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `outcomeMaximum` rule\n         * @param {String} identifier\n         * @param {String} weightIdentifier\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        outcomeMaximum: function outcomeMaximum(identifier, weightIdentifier, includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('outcomeMaximum');\n\n            processingRule.outcomeIdentifier = validateIdentifier(identifier);\n\n            addWeightIdentifier(processingRule, weightIdentifier);\n            addSectionIdentifier(processingRule, '');\n            addCategories(processingRule, includeCategories, excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `numberPresented` rule\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         */\n        numberPresented: function numberPresented(includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('numberPresented');\n\n            addSectionIdentifier(processingRule, '');\n            addCategories(processingRule, includeCategories, excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `baseValue` rule\n         * @param {*} [value]\n         * @param {String|Number} [type]\n         * @returns {Object}\n         */\n        baseValue: function baseValue(value, type) {\n            var processingRule = processingRuleHelper.create('baseValue');\n\n            processingRule.baseType = baseTypeHelper.getValid(type, baseTypeHelper.FLOAT);\n            processingRule.value = baseTypeHelper.getValue(processingRule.baseType, value);\n\n            return processingRule;\n        },\n\n        /**\n         ** Creates a `variable` rule\n         * @param {String} identifier\n         * @param {String} [weightIdentifier]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is not valid\n         * @throws {TypeError} if the weight identifier is not valid\n         */\n        variable: function variable(identifier, weightIdentifier) {\n            var processingRule = processingRuleHelper.create('variable', validateIdentifier(identifier));\n\n            addWeightIdentifier(processingRule, weightIdentifier);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `match` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\n         */\n        match: function match(left, right) {\n            return binaryOperator('match', left, right, cardinalityHelper.SAME, cardinalityHelper.SAME);\n        },\n\n        /**\n         * Creates a `isNull` rule\n         * @param {Object|Array} expression - the operand\n         * @returns {Object}\n         * @throws {TypeError} if the operand is not valid QTI element\n         */\n        isNull: function isNull(expression) {\n            return unaryOperator('isNull', expression, baseTypeHelper.ANY, cardinalityHelper.ANY);\n        },\n\n        /**\n         * Creates a `outcomeCondition` rule\n         * @param {Object} outcomeIf\n         * @param {Object} outcomeElse\n         * @returns {Object}\n         * @throws {TypeError} if the outcomeIf and outcomeElse operands are not valid QTI elements\n         */\n        outcomeCondition: function outcomeCondition(outcomeIf, outcomeElse) {\n            var processingRule = processingRuleHelper.create('outcomeCondition');\n\n            if (!outcomeValidator.validateOutcome(outcomeIf, false, 'outcomeIf')) {\n                throw new TypeError('You must provide a valid outcomeIf element!');\n            }\n\n            if (outcomeElse && !outcomeValidator.validateOutcome(outcomeElse, false, 'outcomeElse')) {\n                throw new TypeError('You must provide a valid outcomeElse element!');\n            }\n\n            processingRule.outcomeIf = outcomeIf;\n            processingRule.outcomeElseIfs = [];\n\n            if (outcomeElse) {\n                processingRule.outcomeElse = outcomeElse;\n            }\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `outcomeIf` rule\n         * @param {Object} expression\n         * @param {Object|Object[]} instruction\n         * @returns {Object}\n         * @throws {TypeError} if the expression and instruction operands are not valid QTI elements\n         */\n        outcomeIf: function outcomeIf(expression, instruction) {\n            var processingRule = processingRuleHelper.create('outcomeIf');\n\n            if (!_.isArray(instruction)) {\n                instruction = [instruction];\n            }\n\n            processingRule.expression = validateOutcome(expression);\n            processingRule.outcomeRules = validateOutcomeList(instruction);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `outcomeElse` rule\n         * @param {Object|Object[]} instruction\n         * @returns {Object}\n         * @throws {TypeError} if the instruction is not a valid QTI element\n         */\n        outcomeElse: function outcomeElse(instruction) {\n            var processingRule = processingRuleHelper.create('outcomeElse');\n\n            if (!_.isArray(instruction)) {\n                instruction = [instruction];\n            }\n\n            processingRule.outcomeRules = validateOutcomeList(instruction);\n\n            return processingRule;\n        }\n\n    };\n\n    /**\n     * Creates a unary operator rule\n     * @param {String} type - The rule type\n     * @param {Object|Array} expression - The operand\n     * @param {Number|Array} [baseType] - The accepted base type\n     * @param {Number|Array} [cardinality] - The accepted cardinality\n     * @returns {Object}\n     * @throws {TypeError} if the type is empty or is not a string\n     * @throws {TypeError} if the operand is not valid QTI element\n     */\n    function unaryOperator(type, expression, baseType, cardinality) {\n        var processingRule = processingRuleHelper.create(type, null, [expression]);\n\n        processingRule.minOperands = 1;\n        processingRule.maxOperands = 1;\n\n        addTypeAndCardinality(processingRule, baseType, cardinality);\n\n        return processingRule;\n    }\n\n    /**\n     * Creates a binary operator rule\n     * @param {String} type - The rule type\n     * @param {Object|Array} left - The left operand\n     * @param {Object|Array} right - The right operand\n     * @param {Number|Array} [baseType] - The accepted base type\n     * @param {Number|Array} [cardinality] - The accepted cardinality\n     * @returns {Object}\n     * @throws {TypeError} if the type is empty or is not a string\n     * @throws {TypeError} if the left and right operands are not valid QTI elements\n     */\n    function binaryOperator(type, left, right, baseType, cardinality) {\n        var processingRule = processingRuleHelper.create(type, null, [left, right]);\n\n        processingRule.minOperands = 2;\n        processingRule.maxOperands = 2;\n\n        addTypeAndCardinality(processingRule, baseType, cardinality);\n\n        return processingRule;\n    }\n\n    /**\n     * Appends the base type and the cardinality on a processing rule\n     * @param {Object} processingRule\n     * @param {Number|Array} [baseType] - The accepted base type\n     * @param {Number|Array} [cardinality] - The accepted cardinality\n     * @returns {Object}\n     */\n    function addTypeAndCardinality(processingRule, baseType, cardinality) {\n        if (_.isUndefined(baseType)) {\n            baseType = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\n        }\n\n        if (_.isUndefined(cardinality)) {\n            cardinality = [cardinalityHelper.SINGLE];\n        }\n\n        processingRule.acceptedCardinalities = forceArray(cardinality);\n        processingRule.acceptedBaseTypes = forceArray(baseType);\n\n        return processingRule;\n    }\n\n    /**\n     * Extends a processing rule with categories\n     * @param {Object} processingRule\n     * @param {Array|String} [includeCategories]\n     * @param {Array|String} [excludeCategories]\n     * @returns {Object}\n     */\n    function addCategories(processingRule, includeCategories, excludeCategories) {\n        processingRule.includeCategories = forceArray(includeCategories);\n        processingRule.excludeCategories = forceArray(excludeCategories);\n\n        return processingRule;\n    }\n\n    /**\n     * Appends the section identifier on a processing rule\n     * @param {Object} processingRule\n     * @param {String} [sectionIdentifier]\n     * @returns {Object}\n     * @throws {TypeError} if the weight identifier is not valid\n     */\n    function addSectionIdentifier(processingRule, sectionIdentifier) {\n        if (sectionIdentifier) {\n            if (!outcomeValidator.validateIdentifier(sectionIdentifier)) {\n                throw new TypeError('You must provide a valid weight identifier!');\n            }\n            processingRule.sectionIdentifier = sectionIdentifier;\n        } else {\n            processingRule.sectionIdentifier = '';\n        }\n\n        return processingRule;\n    }\n\n    /**\n     * Appends the weight identifier on a processing rule\n     * @param {Object} processingRule\n     * @param {String} [weightIdentifier]\n     * @returns {Object}\n     * @throws {TypeError} if the weight identifier is not valid\n     */\n    function addWeightIdentifier(processingRule, weightIdentifier) {\n        if (weightIdentifier) {\n            if (!outcomeValidator.validateIdentifier(weightIdentifier)) {\n                throw new TypeError('You must provide a valid weight identifier!');\n            }\n            processingRule.weightIdentifier = weightIdentifier;\n        } else {\n            processingRule.weightIdentifier = '';\n        }\n\n        return processingRule;\n    }\n\n    /**\n     * Validates an identifier\n     * @param {String} identifier\n     * @returns {String}\n     * @throws {TypeError} if the identifier is not valid\n     */\n    function validateIdentifier(identifier) {\n        if (!outcomeValidator.validateIdentifier(identifier)) {\n            throw new TypeError('You must provide a valid identifier!');\n        }\n        return identifier;\n    }\n\n    /**\n     * Validates an outcome\n     * @param {Object} outcome\n     * @returns {Object}\n     * @throws {TypeError} if the outcome is not valid\n     */\n    function validateOutcome(outcome) {\n        if (!outcomeValidator.validateOutcome(outcome)) {\n            throw new TypeError('You must provide a valid QTI element!');\n        }\n        return outcome;\n    }\n\n    /**\n     * Validates a list of outcomes\n     * @param {Array} outcomes\n     * @returns {Array}\n     * @throws {TypeError} if an outcome is not valid\n     */\n    function validateOutcomeList(outcomes) {\n        if (!outcomeValidator.validateOutcomes(outcomes)) {\n            throw new TypeError('You must provide a valid list of QTI elements!');\n        }\n        return outcomes;\n    }\n\n    /**\n     * Ensures a value is an array\n     * @param {*} value\n     * @returns {Array}\n     */\n    function forceArray(value) {\n        if (!value) {\n            value = [];\n        }\n        if (!_.isArray(value)) {\n            value = [value];\n        }\n        return value;\n    }\n\n    return processingRuleHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to manage the score processing declaration in a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/scoring',[\n    'lodash',\n    'i18n',\n    'core/format',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/processingRule'\n], function (_, __, format, baseTypeHelper, outcomeHelper, processingRuleHelper) {\n    'use strict';\n\n    /**\n     * The default cut score\n     * @todo Move this to a config file\n     * @type {Number}\n     */\n    var defaultCutScore = 0.5;\n\n    /**\n     * The name of the variable containing the score\n     * @type {String}\n     */\n    var defaultScoreIdentifier = 'SCORE';\n\n    /**\n     * The list of supported processing modes, indexed by mode identifier\n     * @type {Object}\n     */\n    var processingModes = {\n        none: {\n            key: 'none',\n            label: __('None'),\n            description: __('No outcome processing. Erase the existing rules, if any.')\n        },\n        custom: {\n            key: 'custom',\n            label: __('Custom'),\n            description: __('Custom outcome processing. No changes will be made to the existing rules.')\n        },\n        total: {\n            key: 'total',\n            label: __('Total score'),\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will take place in the SCORE_TOTAL outcome.')\n                         + ' ' +\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the SCORE_xxx outcome, where xxx is the name of the category.')\n        },\n        cut: {\n            key: 'cut',\n            label: __('Cut score'),\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will be compared to the cut score, then the PASS_TOTAL outcome will be set accordingly.')\n                         + ' ' +\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the PASS_xxx outcome, where xxx is the name of the category.')\n        }\n    };\n\n    /**\n     * The list of recipes to generate the outcomes\n     * @type {Object}\n     */\n    var outcomesRecipes = {\n        none: {\n            key: 'none',\n            clean: true\n        },\n        custom: {\n            key: 'custom',\n            clean: false\n        },\n        total: {\n            key: 'total',\n            signature: /^SCORE_([a-zA-Z][a-zA-Z0-9_\\.-]*)$/,\n            outcomes: [{\n                writer: 'total',\n                identifier: 'SCORE_TOTAL',\n                weighted: 'SCORE_TOTAL_WEIGHTED',\n                categoryIdentifier: 'SCORE_CATEGORY_%s',\n                categoryWeighted: 'SCORE_CATEGORY_WEIGHTED_%s'\n            }, {\n                writer: 'max',\n                identifier: 'SCORE_TOTAL_MAX',\n                weighted: 'SCORE_TOTAL_MAX_WEIGHTED',\n                categoryIdentifier: 'SCORE_CATEGORY_MAX_%s',\n                categoryWeighted: 'SCORE_CATEGORY_WEIGHTED_MAX_%s'\n            }],\n            clean: true\n        },\n        cut: {\n            key: 'cut',\n            include: 'total',\n            signature: /^PASS_([a-zA-Z][a-zA-Z0-9_\\.-]*)$/,\n            outcomes: [{\n                writer: 'cut',\n                identifier: 'PASS_ALL',\n                feedback: 'PASS_ALL_RENDERING',\n                feedbackOk: \"passed\",\n                feedbackFailed: \"not_passed\",\n                categoryIdentifier: 'PASS_CATEGORY_%s',\n                categoryFeedback: 'PASS_CATEGORY_%s_RENDERING'\n            }],\n            clean: true\n        }\n    };\n\n    /**\n     * List of writers that provide the outcomes for each score processing mode.\n     * @type {Object}\n     */\n    var outcomesWriters = {\n        /**\n         * Generates the outcomes that compute the \"Total score\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         * @param {Array} [categories]\n         */\n        total: function writerTotal(descriptor, scoring, outcomes, categories) {\n            // create the outcome and the rule that process the overall score\n            addTotalScoreOutcomes(outcomes, scoring, descriptor.identifier, false);\n            if (descriptor.weighted && scoring.weightIdentifier) {\n                addTotalScoreOutcomes(outcomes, scoring, descriptor.weighted, true);\n            }\n\n            // create an outcome per categories\n            if (descriptor.categoryIdentifier && categories) {\n                _.forEach(categories, function (category) {\n                    addTotalScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryIdentifier), false, category);\n                    if (descriptor.categoryWeighted && scoring.weightIdentifier) {\n                        addTotalScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryWeighted), true, category);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Generates the outcomes that compute the \"Max score\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         * @param {Array} [categories]\n         */\n        max: function writerMax(descriptor, scoring, outcomes, categories) {\n            // create the outcome and the rule that process the maximum overall score\n            addMaxScoreOutcomes(outcomes, scoring, descriptor.identifier, false);\n            if (descriptor.weighted && scoring.weightIdentifier) {\n                addMaxScoreOutcomes(outcomes, scoring, descriptor.weighted, true);\n            }\n\n            // create an outcome per categories\n            if (descriptor.categoryIdentifier && categories) {\n                _.forEach(categories, function (category) {\n                    addMaxScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryIdentifier), false, category);\n                    if (descriptor.categoryWeighted && scoring.weightIdentifier) {\n                        addMaxScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryWeighted), true, category);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Generates the outcomes that compute the \"Cut score\"\n         * @param {Object} descriptor\n         * @param {Object} scoring\n         * @param {Object} outcomes\n         * @param {Array} [categories]\n         */\n        cut: function writerCut(descriptor, scoring, outcomes, categories) {\n            var cutScore = scoring.cutScore;\n            var totalModeOutcomes = outcomesRecipes.total.outcomes;\n            var total = _.find(totalModeOutcomes, {writer: 'total'});\n            var max = _.find(totalModeOutcomes, {writer: 'max'});\n            var whichOutcome = scoring.weightIdentifier ? 'weighted' : 'identifier';\n            var scoreIdentifier = total[whichOutcome];\n            var countIdentifier = max[whichOutcome];\n\n            // create the outcome and the rule that process the overall score\n            addCutScoreOutcomes(outcomes, descriptor.identifier, scoreIdentifier, countIdentifier, cutScore);\n\n            // create the outcome and the rule that process the score feedback\n            if (descriptor.feedback) {\n                addFeedbackScoreOutcomes(\n                    outcomes,\n                    descriptor.feedback,\n                    descriptor.identifier,\n                    descriptor.feedbackOk,\n                    descriptor.feedbackFailed\n                );\n            }\n\n            // create an outcome per category\n            if (descriptor.categoryIdentifier && categories) {\n                _.forEach(categories, function (category) {\n                    var categoryOutcome = scoring.weightIdentifier ? 'categoryWeighted' : 'categoryIdentifier';\n                    var categoryOutcomeIdentifier = formatCategoryOutcome(category, descriptor.categoryIdentifier);\n                    var categoryScoreIdentifier = formatCategoryOutcome(category, total[categoryOutcome]);\n                    var categoryCountIdentifier = formatCategoryOutcome(category, max[categoryOutcome]);\n\n                    addCutScoreOutcomes(outcomes, categoryOutcomeIdentifier, categoryScoreIdentifier, categoryCountIdentifier, cutScore);\n\n                    if (descriptor.categoryFeedback) {\n                        addFeedbackScoreOutcomes(\n                            outcomes,\n                            formatCategoryOutcome(category, descriptor.categoryFeedback),\n                            categoryOutcomeIdentifier,\n                            descriptor.feedbackOk,\n                            descriptor.feedbackFailed\n                        );\n                    }\n                });\n            }\n\n            return outcomes;\n        }\n    };\n\n    var scoringHelper = {\n        /**\n         * Checks the test model against outcome processing mode.\n         * Initializes the scoring property accordingly.\n         *\n         * @param {modelOverseer} modelOverseer\n         * @throws {TypeError} if the modelOverseer is invalid\n         * @fires modelOverseer#scoring-init\n         * @fires modelOverseer#scoring-generate\n         * @fires modelOverseer#scoring-write\n         */\n        init: function init(modelOverseer) {\n            var model;\n\n            if (!modelOverseer || !_.isFunction(modelOverseer.getModel)) {\n                throw new TypeError(\"You must provide a valid modelOverseer\");\n            }\n\n            model = modelOverseer.getModel();\n\n            // detect the score processing mode and build the descriptor used to manage the UI\n            model.scoring = detectScoring(modelOverseer);\n\n            modelOverseer\n                .on('scoring-change category-change delete', function () {\n                    /**\n                     * Regenerates the outcomes on any significant changes.\n                     * After the outcomes have been generated a write is needed to actually apply the data.\n                     * Other component can listen to this event and eventually prevent the write to happen.\n                     * @event modelOverseer#scoring-generate\n                     * @param {Object} outcomes\n                     */\n                    modelOverseer.trigger('scoring-generate', scoringHelper.generate(modelOverseer));\n                })\n                .on('scoring-generate', function (outcomes) {\n                    outcomeHelper.replaceOutcomes(model, outcomes);\n\n                    /**\n                     * The generated outcome have just been applied on the model.\n                     * @event modelOverseer#scoring-write\n                     * @param {Object} testModel\n                     */\n                    modelOverseer.trigger('scoring-write', model);\n                })\n\n                /**\n                 * @event modelOverseer#scoring-init\n                 * @param {Object} testModel\n                 */\n                .trigger('scoring-init', model);\n        },\n\n        /**\n         * If the processing mode has been set, generates the outcomes that define the scoring.\n         *\n         * @param {modelOverseer} modelOverseer\n         * @returns {Object}\n         * @throws {TypeError} if the modelOverseer is invalid or the processing mode is unknown\n         */\n        generate: function generate(modelOverseer) {\n            var model, scoring, outcomes, outcomeRecipe, recipes, categories;\n\n            if (!modelOverseer || !_.isFunction(modelOverseer.getModel)) {\n                throw new TypeError(\"You must provide a valid modelOverseer\");\n            }\n\n            model = modelOverseer.getModel();\n            scoring = model.scoring;\n            outcomes = getOutcomes(model);\n\n            // write the score processing mode by generating the outcomes variables, but only if the mode has been set\n            if (scoring) {\n                outcomeRecipe = outcomesRecipes[scoring.outcomeProcessing];\n                if (outcomeRecipe) {\n\n                    if (outcomeRecipe.clean) {\n                        // erase the existing rules, they will be replaced by those that are defined here\n                        removeScoring(outcomes);\n                    }\n\n                    // get the recipes that define the outcomes, include sub-recipes if any\n                    recipes = getRecipes(outcomeRecipe);\n\n                    // only get the categories if requested\n                    if (handleCategories(modelOverseer)) {\n                        categories = modelOverseer.getCategories();\n                    }\n\n                    // will generate outcomes based of the defined recipe\n                    _.forEach(recipes, function(recipe) {\n                        var writer = outcomesWriters[recipe.writer];\n                        writer(recipe, scoring, outcomes, categories);\n                    });\n\n                } else {\n                    throw new Error('Unknown score processing mode: ' + scoring.outcomeProcessing);\n                }\n            }\n\n            return outcomes;\n        }\n    };\n\n    /**\n     * Creates an outcome and the rule that process the total score\n     *\n     * @param {Object} model\n     * @param {Object} scoring\n     * @param {String} identifier\n     * @param {Boolean} [weight]\n     * @param {String} [category]\n     */\n    function addTotalScoreOutcomes(model, scoring, identifier, weight, category) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.sum(\n                processingRuleHelper.testVariables(scoring.scoreIdentifier, -1, weight && scoring.weightIdentifier, category)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the maximum score\n     *\n     * @param {Object} model\n     * @param {Object} scoring\n     * @param {String} identifier\n     * @param {Boolean} [weight]\n     * @param {String} [category]\n     */\n    function addMaxScoreOutcomes(model, scoring, identifier, weight, category) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.sum(\n                processingRuleHelper.outcomeMaximum(scoring.scoreIdentifier, weight && scoring.weightIdentifier, category)\n            )\n        );\n        var outcomeCondition = processingRuleHelper.outcomeCondition(\n            processingRuleHelper.outcomeIf(\n                processingRuleHelper.isNull(\n                    processingRuleHelper.variable(identifier)\n                ),\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.numberPresented(category)\n                )\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n        outcomeHelper.addOutcomeProcessing(model, outcomeCondition);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the cut score\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String} scoreIdentifier\n     * @param {String} countIdentifier\n     * @param {String|Number} cutScore\n     */\n    function addCutScoreOutcomes(model, identifier, scoreIdentifier, countIdentifier, cutScore) {\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.BOOLEAN);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.gte(\n                processingRuleHelper.divide(\n                    processingRuleHelper.variable(scoreIdentifier),\n                    processingRuleHelper.variable(countIdentifier)\n                ),\n                processingRuleHelper.baseValue(cutScore, baseTypeHelper.FLOAT)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the score feedback\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String} variable\n     * @param {String} passed\n     * @param {String} notPassed\n     */\n    function addFeedbackScoreOutcomes(model, identifier, variable, passed, notPassed) {\n        var type = baseTypeHelper.IDENTIFIER;\n        var outcome = outcomeHelper.createOutcome(identifier, type);\n        var processingRule = processingRuleHelper.outcomeCondition(\n            processingRuleHelper.outcomeIf(\n                processingRuleHelper.match(\n                    processingRuleHelper.variable(variable),\n                    processingRuleHelper.baseValue(true, baseTypeHelper.BOOLEAN)\n                ),\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.baseValue(passed, type)\n                )\n            ),\n            processingRuleHelper.outcomeElse(\n                processingRuleHelper.setOutcomeValue(identifier,\n                    processingRuleHelper.baseValue(notPassed, type)\n                )\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome);\n        outcomeHelper.addOutcomeProcessing(model, processingRule);\n    }\n\n    /**\n     * Formats the identifier of a category outcome\n     * @param {String} category\n     * @param {String} template\n     * @returns {String}\n     */\n    function formatCategoryOutcome(category, template) {\n        return format(template, category.toUpperCase());\n    }\n\n    /**\n     * Checks whether an identifier belongs to a particular recipe\n     * @param {String} identifier\n     * @param {Object} recipe\n     * @param {Boolean} [onlyCategories]\n     * @returns {Boolean}\n     */\n    function belongToRecipe(identifier, recipe, onlyCategories) {\n        var match = false;\n        if (recipe.signature && recipe.signature.test(identifier)) {\n            match = true;\n            if (onlyCategories) {\n                _.forEach(recipe.outcomes, function(outcome) {\n                    if (outcome.identifier === identifier ||\n                        (outcome.weighted && outcome.weighted === identifier) ||\n                        (outcome.feedback && outcome.feedback === identifier)) {\n                        match = false;\n                        return false;\n                    }\n                });\n            }\n        }\n        return match;\n    }\n\n    /**\n     * Checks if all the outcomes are related to the recipe\n     * @param {Object} outcomeRecipe\n     * @param {Array} outcomes\n     * @param {Array} categories\n     * @returns {Boolean}\n     */\n    function matchRecipe(outcomeRecipe, outcomes, categories) {\n        var signatures = getSignatures(outcomeRecipe);\n        var match = true;\n\n        // check the outcomes definitions against the provided identifier\n        function matchRecipeOutcome(recipe, identifier) {\n            var outcomeMatch = false;\n\n            // first level, the signature must match\n            if (recipe.signature && recipe.signature.test(identifier)) {\n                _.forEach(recipe.outcomes, function(outcome) {\n                    // second level, the main identifier must match\n                    if (outcome.identifier !== identifier &&\n                        (!outcome.weighted || (outcome.weighted && outcome.weighted !== identifier)) &&\n                        (!outcome.feedback || (outcome.feedback && outcome.feedback !== identifier))) {\n\n                        if (categories) {\n                            // third level, a category must match\n                            _.forEach(categories, function(category) {\n                                if (outcome.categoryIdentifier &&\n                                    identifier === formatCategoryOutcome(category, outcome.categoryIdentifier)) {\n                                    outcomeMatch = true;\n                                } else if (outcome.categoryWeighted &&\n                                    identifier === formatCategoryOutcome(category, outcome.categoryWeighted)) {\n                                    outcomeMatch = true;\n                                } else if (outcome.categoryFeedback &&\n                                    identifier === formatCategoryOutcome(category, outcome.categoryFeedback)) {\n                                    outcomeMatch = true;\n                                }\n                                // found something?\n                                if (outcomeMatch) {\n                                    return false;\n                                }\n                            });\n                        }\n                    } else {\n                        outcomeMatch = true;\n                    }\n\n                    // found something?\n                    if (outcomeMatch) {\n                        return false;\n                    }\n                });\n            }\n\n            if (!outcomeMatch && recipe.include) {\n                outcomeMatch = matchRecipeOutcome(outcomesRecipes[recipe.include], identifier);\n            }\n\n            return outcomeMatch;\n        }\n\n        // only check the outcomes that are related to the scoring mode\n        _.forEach(outcomes, function(identifier) {\n            var signatureMatch = false;\n            _.forEach(signatures, function(signature) {\n                if (signature.test(identifier)) {\n                    signatureMatch = true;\n                    return false;\n                }\n            });\n\n            if (signatureMatch) {\n                match = matchRecipeOutcome(outcomeRecipe, identifier);\n\n                if (!match) {\n                    return false;\n                }\n            }\n        });\n\n        return match;\n    }\n\n    /**\n     * Gets all the outcomes signatures related to a scoring mode\n     * @param {Object} recipe\n     * @returns {Array}\n     */\n    function getSignatures(recipe) {\n        var signatures = [];\n\n        // list the signatures for each processing mode, taking care of includes\n        while(recipe) {\n            if (recipe.signature) {\n                signatures.push(recipe.signature);\n            }\n            recipe = recipe.include && outcomesRecipes[recipe.include];\n        }\n\n        return signatures;\n    }\n\n    /**\n     * Gets all the outcomes recipes related to a scoring mode\n     * @param {Object} recipe\n     * @returns {Array}\n     */\n    function getRecipes(recipe) {\n        var descriptors = [];\n\n        // get the recipes that define the outcomes, include sub-recipes if any\n        while(recipe) {\n            if (recipe.outcomes) {\n                descriptors = [].concat(recipe.outcomes, descriptors);\n            }\n            recipe = recipe.include && outcomesRecipes[recipe.include];\n        }\n\n        return descriptors;\n    }\n\n    /**\n     * Checks if an outcome is related to the outcomes recipe,\n     * then returns the recipe descriptor.\n     * @param {Object|String} outcome\n     * @returns {Object}\n     */\n    function getOutcomesRecipe(outcome) {\n        var identifier = outcomeHelper.getOutcomeIdentifier(outcome);\n        var mode = null;\n        _.forEach(outcomesRecipes, function (processingRecipe) {\n            if (belongToRecipe(identifier, processingRecipe)) {\n                mode = processingRecipe;\n                return false;\n            }\n        });\n        return mode;\n    }\n\n    /**\n     * Gets the score processing modes from a list of outcomes\n     * @param {Array} outcomes\n     * @returns {Array}\n     */\n    function listScoringModes(outcomes) {\n        var modes = {};\n        _.forEach(outcomes, function (outcome) {\n            var recipe = getOutcomesRecipe(outcome);\n            if (recipe) {\n                modes[recipe.key] = true;\n            }\n        });\n        return _.keys(modes);\n    }\n\n    /**\n     * Checks whether the categories have to be taken into account\n     * @param {modelOverseer} modelOverseer\n     * @returns {Boolean}\n     */\n    function handleCategories(modelOverseer) {\n        var model = modelOverseer.getModel();\n        return !!(model.scoring && model.scoring.categoryScore);\n    }\n\n    /**\n     * Checks if the test model contains outcomes for categories\n     * @param {Object} model\n     * @returns {Boolean}\n     */\n    function hasCategoryOutcome(model) {\n        var categoryOutcomes = false;\n        _.forEach(outcomeHelper.getOutcomeDeclarations(model), function (outcomeDeclaration) {\n            var identifier = outcomeHelper.getOutcomeIdentifier(outcomeDeclaration);\n            _.forEach(outcomesRecipes, function (processingRecipe) {\n                if (belongToRecipe(identifier, processingRecipe, true)) {\n                    categoryOutcomes = true;\n                    return false;\n                }\n            });\n        });\n        return categoryOutcomes;\n    }\n\n    /**\n     * Gets the defined cut score from the outcome rules\n     * @param {Object} model\n     * @returns {Number}\n     */\n    function getCutScore(model) {\n        var values = _(outcomeHelper.getOutcomeProcessingRules(model)).map(function (outcome) {\n            return outcomeHelper.getProcessingRuleProperty(outcome, 'setOutcomeValue.gte.baseValue.value');\n        }).compact().uniq().value();\n        if (_.isEmpty(values)) {\n            values = [defaultCutScore];\n        }\n        return Math.max(0, _.max(values));\n    }\n\n    /**\n     * Gets the defined weight identifier from the outcome rules\n     * @param {Object} model\n     * @returns {String}\n     */\n    function getWeightIdentifier(model) {\n        var values = [];\n        outcomeHelper.eachOutcomeProcessingRuleExpressions(model, function (processingRule) {\n            if (processingRule['qti-type'] === 'testVariables' && processingRule.weightIdentifier) {\n                values.push(processingRule.weightIdentifier);\n            }\n        });\n        values = _(values).compact().uniq().value();\n\n        return values.length ? values[0] : '';\n    }\n\n    /**\n     * Detects the outcome processing mode for the scoring\n     * @param {modelOverseer} modelOverseer\n     * @returns {String}\n     */\n    function getOutcomeProcessing(modelOverseer) {\n        var model = modelOverseer.getModel();\n        var outcomeDeclarations = outcomeHelper.getOutcomeDeclarations(model);\n        var outcomeRules = outcomeHelper.getOutcomeProcessingRules(model);\n\n        // walk through each outcome declaration, and tries to identify the score processing mode\n        var declarations = listScoringModes(outcomeDeclarations);\n        var processing = listScoringModes(outcomeRules);\n        var diff = _.difference(declarations, processing);\n        var count = _.size(declarations);\n        var included;\n\n        // default fallback, applied when several modes are detected at the same time\n        var outcomeProcessing = 'custom';\n\n        // set the score processing mode with respect to the found outcomes\n        if (count === _.size(processing)) {\n            if (!count) {\n                // no mode detected, set the mode to none\n                outcomeProcessing = 'none';\n            } else if (_.isEmpty(diff)) {\n                if (count > 1) {\n                    // several modes detected, try to reduce the list by detecting includes\n                    included = [];\n                    _.forEach(declarations, function(mode) {\n                        if (outcomesRecipes[mode] && outcomesRecipes[mode].include) {\n                            included.push(outcomesRecipes[mode].include);\n                        }\n                    });\n                    processing = _.difference(processing, included);\n                    count = _.size(processing);\n                }\n\n                if (count === 1) {\n                    // single mode detected, keep the last got key\n                    outcomeProcessing = processing[0];\n\n                    // check if all outcomes are strictly related to the detected mode\n                    if (!matchRecipe(outcomesRecipes[outcomeProcessing], modelOverseer.getOutcomesNames(), modelOverseer.getCategories())) {\n                        outcomeProcessing = 'custom';\n                    }\n                }\n            }\n        }\n\n        return outcomeProcessing;\n    }\n\n    /**\n     * Detects the score processing mode and builds the descriptor used to manage the UI.\n     * @param {modelOverseer} modelOverseer\n     * @returns {Object}\n     */\n    function detectScoring(modelOverseer) {\n        var model = modelOverseer.getModel();\n        return {\n            modes: processingModes,\n            scoreIdentifier: defaultScoreIdentifier,\n            weightIdentifier: getWeightIdentifier(model),\n            cutScore: getCutScore(model),\n            categoryScore: hasCategoryOutcome(model),\n            outcomeProcessing: getOutcomeProcessing(modelOverseer)\n        };\n    }\n\n    /**\n     * Removes all scoring outcomes\n     * @param {Object} model\n     */\n    function removeScoring(model) {\n        var scoringOutcomes = _.indexBy(outcomeHelper.listOutcomes(model, getOutcomesRecipe), function (outcome) {\n            return outcome;\n        });\n\n        outcomeHelper.removeOutcomes(model, function(outcome) {\n            var match = false;\n\n            function browseExpressions(processingRule) {\n                if (_.isArray(processingRule)) {\n                    _.forEach(processingRule, browseExpressions);\n                } else if (processingRule) {\n                    if (scoringOutcomes[outcomeHelper.getOutcomeIdentifier(processingRule)]) {\n                        match = true;\n                    }\n\n                    if (!match && processingRule.expression) {\n                        browseExpressions(processingRule.expression);\n                    }\n                    if (!match && processingRule.expressions) {\n                        browseExpressions(processingRule.expressions);\n                    }\n                    if (!match && processingRule.outcomeRules) {\n                        browseExpressions(processingRule.outcomeRules);\n                    }\n                    if (!match && processingRule.outcomeIf) {\n                        browseExpressions(processingRule.outcomeIf);\n                    }\n                    if (!match && processingRule.outcomeElse) {\n                        browseExpressions(processingRule.outcomeElse);\n                    }\n                }\n            }\n\n            if (outcome['qti-type'] === 'outcomeCondition') {\n                browseExpressions(outcome);\n            } else {\n                match = !!scoringOutcomes[outcomeHelper.getOutcomeIdentifier(outcome)];\n            }\n            return match;\n        });\n    }\n\n    /**\n     * Gets a copy of the list of outcomes, provides the same structure as the model\n     * @param {Object} model\n     * @returns {Object}\n     */\n    function getOutcomes(model) {\n        return {\n            outcomeDeclarations: [].concat(outcomeHelper.getOutcomeDeclarations(model)),\n            outcomeProcessing: {\n                outcomeRules: [].concat(outcomeHelper.getOutcomeProcessingRules(model))\n            }\n        };\n    }\n\n    return scoringHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/creator',[\n    'module',\n    'jquery',\n    'lodash',\n    'helpers',\n    'i18n',\n    'html5-history-api',\n    'ui/feedback',\n    'core/databindcontroller',\n    'taoQtiTest/controller/creator/modelOverseer',\n    'taoQtiTest/controller/creator/views/item',\n    'taoQtiTest/controller/creator/views/test',\n    'taoQtiTest/controller/creator/views/testpart',\n    'taoQtiTest/controller/creator/views/section',\n    'taoQtiTest/controller/creator/views/itemref',\n    'taoQtiTest/controller/creator/encoders/dom2qti',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/helpers/scoring',\n    'taoQtiTest/controller/creator/helpers/categorySelector',\n    'core/validator/validators',\n    'core/promise'\n], function(\n    module,\n    $,\n    _,\n    helpers,\n    __,\n    history,\n    feedback,\n    DataBindController,\n    modelOverseerFactory,\n    itemView, testView,\n    testPartView,\n    sectionView,\n    itemrefView,\n    Dom2QtiEncoder,\n    templates,\n    qtiTestHelper,\n    scoringHelper,\n    categorySelector,\n    validators,\n    Promise\n    ){\n\n    'use strict';\n\n    /**\n     * Call the server to get the list of items\n     * @param {string} url\n     * @param {string} search - a posix pattern to filter items\n     * @returns {Promise}\n     */\n    var loadItems = function loadItems(url, search){\n        return new Promise( function(resolve, reject){\n            $.getJSON(url, {pattern : search, notempty : 'true'})\n                .done(resolve)\n                .fail(function(xhr){\n                    return reject(new Error(xhr.status + ' : ' + xhr.statusText));\n                });\n        });\n    };\n\n    /**\n     * Call the server to get the items categories\n     * @param {String} url - the endpoint\n     * @param {String[]} items - the list of items URIs\n     * @returns {Promise}\n     */\n    var getCategories = function getCategories(url, items){\n        return new Promise( function(resolve, reject){\n            if(items && items.length){\n                $.getJSON(url, { uris : items })\n                    .done(resolve)\n                    .fail(function(xhr){\n                        return reject(new Error(xhr.status + ' : ' + xhr.statusText));\n                    });\n            }\n        });\n    };\n\n    /**\n     * The test creator controller is the main entry point\n     * and orchestrates data retrieval and view/components loading.\n     * @exports creator/controller\n     */\n    var Controller = {\n\n        routes : {},\n\n        identifiers: [],\n\n         /**\n          * Start the controller, main entry method.\n          * @public\n          * @param {Object} options\n          * @param {Object} options.labels - the list of item's labels to give to the ItemView\n          * @param {Object} options.routes - action's urls\n          * @param {Object} options.categoriesPresets - predefined category that can be set at the item or section level\n          */\n        start : function(options){\n            var self = this;\n            var $container = $('#test-creator');\n            var $saver = $('#saver');\n            var binder, binderOptions, modelOverseer;\n\n            self.identifiers = [];\n\n            options = _.merge(module.config(), options || {});\n            options.routes = options.routes || {};\n            options.labels = options.labels || {};\n            options.categoriesPresets = options.categoriesPresets || {};\n\n            categorySelector.setPresets(options.categoriesPresets);\n\n            //back button\n            $('#authoringBack').on('click', function(e){\n                e.preventDefault();\n\n                if (history) {\n                    history.back();\n                }\n            });\n\n            //set up the ItemView, give it a configured loadItems ref\n            itemView(\n                _.partial(loadItems, options.routes.items),\n                _.partial(getCategories, options.routes.categories)\n            );\n\n            // forwards some binder events to the model overseer\n            $container.on('change.binder delete.binder', function (e, model) {\n                if (e.namespace === 'binder' && model) {\n                    modelOverseer.trigger(e.type, model);\n                }\n            });\n\n            //Data Binding options\n            binderOptions = _.merge(options.routes, {\n                filters : {\n                    'isItemRef' : function(value){\n                        return qtiTestHelper.filterQtiType(value, 'assessmentItemRef');\n                    },\n                    'isSection' : function(value){\n                        return qtiTestHelper.filterQtiType(value, 'assessmentSection');\n                    }\n                },\n                encoders : {\n                    'dom2qti' : Dom2QtiEncoder\n                },\n                templates : templates,\n                beforeSave : function(model){\n                    //ensure the qti-type is present\n                    qtiTestHelper.addMissingQtiType(model);\n\n                    //apply consolidation rules\n                    qtiTestHelper.consolidateModel(model);\n\n                    //validate the model\n                    try {\n                        qtiTestHelper.validateModel(model);\n                    } catch(err) {\n                        $saver.attr('disabled', false).removeClass('disabled');\n                        feedback().error(__('The test has not been saved.') + ' ' + err);\n                        return false;\n                    }\n                    return true;\n                }\n            });\n\n            //set up the databinder\n            binder = DataBindController\n                .takeControl($container, binderOptions)\n                .get(function(model){\n                    //extract ids\n                    self.identifiers = qtiTestHelper.extractIdentifiers(model);\n\n                    // the model must be wrapped in order to share more (events, internal states, and more)\n                    modelOverseer = modelOverseerFactory(model, {\n                        uri : options.uri,\n                        identifiers : self.identifiers,\n                        labels : options.labels,\n                        routes : options.routes\n                    });\n\n                    //detect the scoring mode\n                    scoringHelper.init(modelOverseer);\n\n                    //register validators\n                    validators.register('idFormat', qtiTestHelper.idFormatValidator());\n                    validators.register('testIdFormat', qtiTestHelper.testidFormatValidator());\n                    validators.register('testIdAvailable', qtiTestHelper.idAvailableValidator(self.identifiers), true);\n\n                    //once model is loaded, we set up the test view\n                    testView(modelOverseer);\n\n                    //listen for changes to update available actions\n                    testPartView.listenActionState();\n                    sectionView.listenActionState();\n                    itemrefView.listenActionState();\n                    itemrefView.resize();\n\n                    $(window)\n                        .off('resize.qti-test-creator')\n                        .on('resize.qti-test-creator', function(){\n                            itemrefView.resize();\n                        });\n                });\n\n            //the save button triggers binder's save action.\n            $saver.on('click', function(event){\n                event.preventDefault();\n\n                if(!$saver.hasClass('disabled')){\n                    $saver.attr('disabled', true).addClass('disabled');\n                    binder.save(function(){\n\n                        $saver.attr('disabled', false).removeClass('disabled');\n\n                        feedback().success(__('Test Saved'));\n\n                    }, function(){\n\n                        $saver.attr('disabled', false).removeClass('disabled');\n                    });\n                }\n            });\n        }\n    };\n\n    return Controller;\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n *\n */\n\n/**\n * This module allows adding extra buttons in the action bar of the test runner\n *\n */\ndefine('taoQtiTest/testRunner/actionBarHook',[\n    'jquery',\n    'lodash',\n    'core/errorHandler',\n    'core/promise'\n], function ($, _, errorHandler, Promise) {\n\n    'use strict';\n\n    /**\n     * Events namespace\n     * @type {String}\n     * @private\n     */\n    var _ns = '.actionBarHook';\n\n    /**\n     * We need to access the root document to listen for some events\n     * @type {jQuery}\n     * @private\n     */\n    var $doc = $(document);\n\n    /**\n     * List of loaded and visible hooks\n     * @type {Object}\n     * @private\n     */\n    var tools = {};\n\n    /**\n     * Flag set to true when the item is loaded\n     * @type {Boolean}\n     * @private\n     */\n    var itemIsLoaded = false;\n\n    // catch the item loaded event\n    $doc.off(_ns).on('serviceloaded' + _ns, function() {\n        itemIsLoaded = true;\n        _.forEach(tools, function(tool) {\n            triggerItemLoaded(tool);\n        });\n    });\n\n    /**\n     * Check that the toolConfig is correct\n     *\n     * @param {Object} toolconfig\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\n     * @param {Array} [toolconfig.items] - an optional list of menu items\n     * @returns {Boolean}\n     */\n    function isValidConfig(toolconfig) {\n        return !!(_.isObject(toolconfig) && toolconfig.hook);\n    }\n\n    /**\n     * Triggers the itemLoaded event inside the provided actionBar hook\n     * @param {Object} tool\n     */\n    function triggerItemLoaded(tool) {\n        if (tool && tool.itemLoaded) {\n            tool.itemLoaded();\n        }\n    }\n\n    /**\n     * Init a test runner button from its config\n     *\n     * @param {String} id\n     * @param {Object|String} toolconfig\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\n     * @param {Array} [toolconfig.items] - an optional list of menu items\n     * @param {Object} testContext - the complete state of the test\n     * @param {Object} testRunner - the test runner instance\n     * @fires ready.actionBarHook when the hook has been initialized\n     * @returns {Promise}\n     */\n    function initQtiTool($toolsContainer, id, toolconfig, testContext, testRunner) {\n\n        // the tool is always initialized before the item is loaded, so we can safely false the flag\n        itemIsLoaded = false;\n        tools[id] = null;\n\n        if (_.isString(toolconfig)) {\n            toolconfig = {\n                hook: toolconfig\n            };\n        }\n\n        return new Promise(function(resolve) {\n            if (isValidConfig(toolconfig)) {\n\n                require([toolconfig.hook], function (hook) {\n\n                    var $button;\n                    var $existingBtn;\n\n                    if (isValidHook(hook)) {\n                        //init the control\n                        hook.init(id, toolconfig, testContext, testRunner);\n\n                        //if an instance of the tool is already attached, remove it:\n                        $existingBtn = $toolsContainer.children('[data-control=\"' + id + '\"]');\n                        if ($existingBtn.length) {\n                            hook.clear($existingBtn);\n                            $existingBtn.remove();\n                        }\n\n                        //check if the tool is to be available\n                        if (hook.isVisible()) {\n                            //keep access to the tool\n                            tools[id] = hook;\n\n                            // renders the button from the config\n                            $button = hook.render();\n\n                            //only attach the button to the dom when everything is ready\n                            _appendInOrder($toolsContainer, $button);\n\n                            //ready !\n                            $button.trigger('ready' + _ns, [hook]);\n\n                            //fires the itemLoaded event if the item has already been loaded\n                            if (itemIsLoaded) {\n                                triggerItemLoaded(hook);\n                            }\n                        }\n\n                        resolve(hook);\n                    } else {\n                        errorHandler.throw(_ns, 'invalid hook format');\n                        resolve(null);\n                    }\n\n                }, function (e) {\n                    errorHandler.throw(_ns, 'the hook amd module cannot be found');\n                    resolve(null);\n                });\n\n            } else {\n                errorHandler.throw(_ns, 'invalid tool config format');\n                resolve(null);\n            }\n        });\n    }\n\n    /**\n     * Append a dom element $button to a $container in a specific order\n     * The orders are provided by data-order attribute set to the $button\n     *\n     * @param {JQuery} $container\n     * @param {JQuery} $button\n     */\n    function _appendInOrder($container, $button) {\n\n        var $after, $before;\n        var order = $button.data('order');\n\n        if ('last' === order) {\n\n            $container.append($button);\n\n        } else if ('first' === order) {\n\n            $container.prepend($button);\n\n        } else {\n\n            order = _.parseInt(order);\n            if (!_.isNaN(order)) {\n\n                $container.children('.action').each(function () {\n\n                    var $btn = $(this),\n                        _order = $btn.data('order');\n\n                    if ('last' === _order) {\n\n                        $before = $btn;\n                        $after = null;\n\n                    } else if ('first' === _order) {\n\n                        $before = null;\n                        $after = $btn;\n\n                    } else {\n\n                        _order = _.parseInt(_order);\n\n                        if (_.isNaN(_order) || _order > order) {\n                            $before = $btn;\n                            $after = null;\n                            //stops here because $container children returns the dom elements in the dom order\n                            return false;\n                        } else if (_order === order) {\n                            $after = $btn;\n                        } else if (_order < order) {\n                            $after = $btn;\n                            $before = null;\n                        }\n\n                    }\n\n                });\n\n                if ($after) {\n                    $after.after($button);\n                } else if ($before) {\n                    $before.before($button);\n                } else {\n                    $container.append($button);\n                }\n\n            } else {\n                //unordered buttons are append at the end (including when order equals 0)\n                $container.append($button);\n            }\n        }\n    }\n\n    /**\n     * Check if the hook object is valid\n     *\n     * @param {Object} hook\n     * @param {Function} hook.init\n     * @param {Function} hook.clear\n     * @param {Function} hook.isVisible\n     * @returns {Boolean}\n     */\n    function isValidHook(hook) {\n        return (_.isObject(hook) && _(['init', 'render', 'clear', 'isVisible']).reduce(function (result, method) {\n            return result && _.isFunction(hook[method]);\n        }, true));\n    }\n\n    return {\n        isValid: isValidConfig,\n        initQtiTool: initQtiTool\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/actionBarTools',[\n    'jquery',\n    'lodash',\n    'core/eventifier',\n    'core/promise',\n    'taoQtiTest/testRunner/actionBarHook'\n], function ($, _, eventifier, Promise, actionBarHook) {\n    'use strict';\n\n    /**\n     * The list of registered actionBar tools\n     * @type {Object}\n     */\n    var registeredQtiTools;\n\n    /**\n     * The list of actionBar tools instances\n     * @type {Object}\n     */\n    var qtiTools;\n\n    /**\n     * Manages the actionBar tools\n     * @type {Object}\n     */\n    var actionBarTools = {\n        /**\n         * Registers the actionBar tools\n         * @param {Object} tools\n         */\n        register : function register(tools) {\n            var registerTools = tools || {};\n\n            /**\n             * @event actionBarTools#beforeregister\n             * @param {Object} tools\n             * @param {actionBarTools} this\n             */\n            this.trigger('beforeregister', registerTools, this);\n\n            registeredQtiTools = registerTools;\n\n            /**\n             * @event actionBarTools#afterregister\n             * @param {Object} tools\n             * @param {actionBarTools} this\n             */\n            this.trigger('afterregister', registerTools, this);\n        },\n\n        /**\n         * Gets the list of registered tools\n         * @returns {Object}\n         */\n        getRegisteredTools : function getRegisteredTools() {\n            return registeredQtiTools || {};\n        },\n\n        /**\n         * Gets a particular tool config\n         * @param {String} id\n         * @returns {Object}\n         */\n        getRegistered : function getRegistered(id) {\n            return registeredQtiTools && registeredQtiTools[id];\n        },\n\n        /**\n         * Checks if a particular tool is registered\n         * @param {String} id\n         * @returns {Boolean}\n         */\n        isRegistered : function isRegistered(id) {\n            return !!(registeredQtiTools && registeredQtiTools[id]);\n        },\n\n        /**\n         * Gets a particular tool\n         * @param {String} id\n         * @returns {Object}\n         */\n        get : function get(id) {\n            return qtiTools && qtiTools[id];\n        },\n\n        /**\n         * Gets the list of tools instances\n         * @returns {Array}\n         */\n        list : function list() {\n            return _.values(qtiTools || {});\n        },\n\n        /**\n         * Renders the actionBar\n         * @param {String|jQuery|HTMLElement} container - The container in which renders the tools\n         * @param {Object} testContext - The assessment test context\n         * @param {Object} testRunner - The assessment test runner\n         * @param {Function} [callback] - An optional callback fired when all tools have been rendered\n         */\n        render : function render(container, testContext, testRunner, callback) {\n            var self = this;\n            var $container = $(container);\n            var promises = [];\n\n            /**\n             * @event actionBarTools#beforerender\n             * @param {jQuery} $container\n             * @param {Object} testContext\n             * @param {Object} testRunner\n             * @param {actionBarTools} this\n             */\n            this.trigger('beforerender', $container, testContext, testRunner, this);\n\n            _.forIn(this.getRegisteredTools(), function(toolconfig, id){\n                promises.push(actionBarHook.initQtiTool($container, id, toolconfig, testContext, testRunner));\n            });\n\n            Promise.all(promises).then(function(values) {\n                var tools = [];\n                qtiTools = {};\n\n                _.forEach(values, function(tool) {\n                    if (tool) {\n                        tools.push(tool);\n                        qtiTools[tool.getId()] = tool;\n                    }\n                });\n\n                if (_.isFunction(callback)) {\n                    callback.call(self, tools, $container, testContext, testRunner, self);\n                }\n\n                /**\n                 * @event actionBarTools#afterrender\n                 * @param {Array} tools\n                 * @param {jQuery} $container\n                 * @param {Object} testContext\n                 * @param {Object} testRunner\n                 * @param {actionBarTools} this\n                 */\n                self.trigger('afterrender', tools, $container, testContext, testRunner, self);\n            });\n        }\n    };\n\n    return eventifier(actionBarTools);\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\n  buffer += \"        <aside class=\\\"test-sidebar test-sidebar-\";\n  if (helper = helpers.region) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.region); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" flex-container-navi qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n            <div class=\\\"qti-navigator-collapsible\\\">\\n                <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n                <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n            </div>\\n\\n            <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n                <ul class=\\\"collapsible-panel plain\\\">\\n                    <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                </ul>\\n            </div>\\n\\n            <div class=\\\"qti-navigator-filters\\\">\\n                <ul class=\\\"plain clearfix\\\">\\n                    <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                        <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"</span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                        <span class=\\\"icon-unanswered qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\"></span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                        <span class=\\\"icon-flagged qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\"></span>\\n                    </li>\\n                </ul>\\n            </div>\\n\\n            <nav class=\\\"qti-navigator-tree\\\">\\n            </nav>\\n\\n            <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n                <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n                <p class=\\\"qti-navigator-message\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n                </p>\\n            </div>\\n        </aside>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, self=this, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            <span class=\\\"icon-up\\\"></span>\\n                            <span class=\\\"icon-down\\\"></span>\\n                        </span>\\n                        \";\n  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.sections)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(29, program29, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                    </li>\\n                    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n                        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n                            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                        </ul>\\n                        \";\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                                    <span class=\\\"qti-navigator-counter\\\">\";\n  if (helper = helpers.answered) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.answered); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                                </span>\\n                                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                                </ul>\\n                            </li>\\n                            \";\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                                    <li class=\\\"qti-navigator-item\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                            <span class=\\\"qti-navigator-icon icon-\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.program(21, program21, data),fn:self.program(19, program19, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\\n                                            <span class=\\\"qti-navigator-number\\\">\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                                        </span>\\n                                    </li>\\n                                    \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  \n  return \" active\";\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \" flagged\";\n  }\n\nfunction program13(depth0,data) {\n  \n  \n  return \" answered\";\n  }\n\nfunction program15(depth0,data) {\n  \n  \n  return \" viewed\";\n  }\n\nfunction program17(depth0,data) {\n  \n  \n  return \" unseen\";\n  }\n\nfunction program19(depth0,data) {\n  \n  \n  return \"flagged\";\n  }\n\nfunction program21(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.program(24, program24, data),fn:self.program(22, program22, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program22(depth0,data) {\n  \n  \n  return \"answered\";\n  }\n\nfunction program24(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program25(depth0,data) {\n  \n  \n  return \"viewed\";\n  }\n\nfunction program27(depth0,data) {\n  \n  \n  return \"unseen\";\n  }\n\nfunction program29(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n                        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n                            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n                            <p class=\\\"qti-navigator-message\\\">\\n                                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n                            </p>\\n                            <p class=\\\"qti-navigator-actions\\\">\\n                                <button class=\\\"btn-info small\\\" data-id=\\\"\";\n  if (helper = helpers.itemId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.itemId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                                    <span class=\\\"icon-play r\\\"></span>\\n                                </button>\\n                            </p>\\n                        </div>\\n                        \";\n  return buffer;\n  }\n\n  buffer += \"                <ul class=\\\"qti-navigator-parts plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/testReview',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'tpl!taoQtiTest/testRunner/tpl/navigator',\n    'tpl!taoQtiTest/testRunner/tpl/navigatorTree',\n    'util/capitalize'\n], function ($, _, __, navigatorTpl, navigatorTreeTpl, capitalize) {\n    'use strict';\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active : 'active',\n        collapsed : 'collapsed',\n        collapsible : 'collapsible',\n        hidden : 'hidden',\n        disabled : 'disabled',\n        flagged : 'flagged',\n        answered : 'answered',\n        viewed : 'viewed',\n        unseen : 'unseen',\n        icon : 'qti-navigator-icon',\n        scope : {\n            test : 'scope-test',\n            testPart : 'scope-test-part',\n            testSection : 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component : '.qti-navigator',\n        filterBar : '.qti-navigator-filters',\n        tree : '.qti-navigator-tree',\n        collapseHandle : '.qti-navigator-collapsible',\n        linearState : '.qti-navigator-linear',\n        infoAnswered : '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed : '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered : '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged : '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel : '.qti-navigator-info',\n        infoPanelLabels : '.qti-navigator-info > .qti-navigator-label',\n        parts : '.qti-navigator-part',\n        partLabels : '.qti-navigator-part > .qti-navigator-label',\n        sections : '.qti-navigator-section',\n        sectionLabels : '.qti-navigator-section > .qti-navigator-label',\n        items : '.qti-navigator-item',\n        itemLabels : '.qti-navigator-item > .qti-navigator-label',\n        itemIcons : '.qti-navigator-item > .qti-navigator-icon',\n        icons : '.qti-navigator-icon',\n        linearStart : '.qti-navigator-linear-part button',\n        counters : '.qti-navigator-counter',\n        actives : '.active',\n        collapsible : '.collapsible',\n        collapsiblePanels : '.collapsible-panel',\n        unseen : '.unseen',\n        answered : '.answered',\n        flagged : '.flagged',\n        notFlagged : ':not(.flagged)',\n        notAnswered : ':not(.answered)',\n        hidden : '.hidden'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all : \"\",\n        unanswered : _selectors.answered,\n        flagged : _selectors.notFlagged,\n        answered : _selectors.notAnswered,\n        filtered : _selectors.hidden\n    };\n\n    /**\n     * Maps of config options translated from the context object to the local options\n     * @type {Object}\n     * @private\n     */\n    var _optionsMap = {\n        'reviewScope' : 'reviewScope',\n        'reviewPreventsUnseen' : 'preventsUnseen',\n        'canCollapse' : 'canCollapse'\n    };\n\n    /**\n     * Maps the handled review scopes\n     * @type {Object}\n     * @private\n     */\n    var _reviewScopes = {\n        test : 'test',\n        testPart : 'testPart',\n        testSection : 'testSection'\n    };\n\n    /**\n     * Provides a test review manager\n     * @type {Object}\n     */\n    var testReview = {\n        /**\n         * Initializes the component\n         * @param {String|jQuery|HTMLElement} element The element on which install the component\n         * @param {Object} [options] A list of extra options\n         * @param {String} [options.region] The region on which put the component: left or right\n         * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\n         * the whole test, the current test part or the current test section)\n         * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\n         * @returns {testReview}\n         */\n        init: function init(element, options) {\n            var initOptions = _.isObject(options) && options || {};\n            var putOnRight = 'right' === initOptions.region;\n            var insertMethod = putOnRight ? 'append' : 'prepend';\n\n            this.options = initOptions;\n            this.disabled = false;\n            this.hidden = !!initOptions.hidden;\n            this.currentFilter = 'all';\n\n            // clean the DOM if the init method is called after initialisation\n            if (this.$component) {\n                this.$component.remove();\n            }\n\n            // build the component structure and inject it into the DOM\n            this.$container = $(element);\n            insertMethod = this.$container[insertMethod];\n            if (insertMethod) {\n                insertMethod.call(this.$container, navigatorTpl({\n                    region: putOnRight ? 'right' : 'left',\n                    hidden: this.hidden\n                }));\n            } else {\n                throw new Error(\"Unable to inject the component structure into the DOM\");\n            }\n\n            // install the component behaviour\n            this._loadDOM();\n            this._initEvents();\n            this._updateDisplayOptions();\n\n            return this;\n        },\n\n        /**\n         * Links the component to the underlying DOM elements\n         * @private\n         */\n        _loadDOM: function() {\n            this.$component = this.$container.find(_selectors.component);\n\n            // access to info panel displaying counters\n            this.$infoAnswered = this.$component.find(_selectors.infoAnswered);\n            this.$infoViewed = this.$component.find(_selectors.infoViewed);\n            this.$infoUnanswered = this.$component.find(_selectors.infoUnanswered);\n            this.$infoFlagged = this.$component.find(_selectors.infoFlagged);\n\n            // access to filter switches\n            this.$filterBar = this.$component.find(_selectors.filterBar);\n            this.$filters = this.$filterBar.find('li');\n\n            // access to the tree of parts/sections/items\n            this.$tree = this.$component.find(_selectors.tree);\n\n            // access to the panel displayed when a linear part is reached\n            this.$linearState = this.$component.find(_selectors.linearState);\n        },\n\n        /**\n         * Installs the event handlers on the underlying DOM elements\n         * @private\n         */\n        _initEvents: function() {\n            var self = this;\n\n            // click on the collapse handle: collapse/expand the review panel\n            this.$component.on('click' + _selectors.component, _selectors.collapseHandle, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                self.$component.toggleClass(_cssCls.collapsed);\n                if (self.$component.hasClass(_cssCls.collapsed)) {\n                    self._openSelected();\n                }\n            });\n\n            // click on the info panel title: toggle the related panel\n            this.$component.on('click' + _selectors.component, _selectors.infoPanelLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.infoPanel);\n                self._togglePanel($panel, _selectors.infoPanel);\n            });\n\n            // click on a part title: toggle the related panel\n            this.$tree.on('click' + _selectors.component, _selectors.partLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.parts);\n                var open = self._togglePanel($panel, _selectors.parts);\n\n                if (open) {\n                    if ($panel.hasClass(_cssCls.active)) {\n                        self._openSelected();\n                    } else {\n                        self._openOnly($panel.find(_selectors.sections).first(), $panel);\n                    }\n                }\n            });\n\n            // click on a section title: toggle the related panel\n            this.$tree.on('click' + _selectors.component, _selectors.sectionLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.sections);\n\n                self._togglePanel($panel, _selectors.sections);\n            });\n\n            // click on an item: jump to the position\n            this.$tree.on('click' + _selectors.component, _selectors.itemLabels, function(event) {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $item = $(this).closest(_selectors.items);\n                var $target;\n\n                if (!$item.hasClass(_cssCls.disabled)) {\n                    $target = $(event.target);\n                    if ($target.is(_selectors.icons) && !self.$component.hasClass(_cssCls.collapsed)) {\n                        if (!$item.hasClass(_cssCls.unseen)) {\n                            self._mark($item);\n                        }\n                    } else {\n                        self._select($item);\n                        self._jump($item);\n                    }\n                }\n            });\n\n            // click on the start button inside a linear part: jump to the position\n            this.$tree.on('click' + _selectors.component, _selectors.linearStart, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $btn = $(this);\n\n                if (!$btn.hasClass(_cssCls.disabled)) {\n                    $btn.addClass(_cssCls.disabled);\n                    self._jump($btn);\n                }\n            });\n\n            // click on a filter button\n            this.$filterBar.on('click' + _selectors.component, 'li', function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $btn = $(this);\n                var mode = $btn.data('mode');\n\n                self.$filters.removeClass(_cssCls.active);\n                self.$component.removeClass(_cssCls.collapsed);\n                $btn.addClass(_cssCls.active);\n\n                self._filter(mode);\n            });\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         * @private\n         */\n        _filter: function(criteria) {\n            var $items = this.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n            var filter = _filterMap[criteria];\n            if (filter) {\n                $items.filter(filter).addClass(_cssCls.hidden);\n            }\n            this._updateSectionCounters(!!filter);\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         * @private\n         */\n        _select: function(position, open) {\n            // find the item to select and extract its hierarchy\n            var selected = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil(this.$tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this._openOnly(hierarchy);\n            }\n\n            // select the item\n            this.$tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         * @private\n         */\n        _openSelected: function() {\n            // find the selected item and extract its hierarchy\n            var selected = this.$tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil(this.$tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this._openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         * @private\n         */\n        _openOnly: function(opened, root) {\n            (root || this.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        _togglePanel: function(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Sets the icon of a particular item\n         * @param {jQuery} $item\n         * @param {String} icon\n         * @private\n         */\n        _setItemIcon: function($item, icon) {\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n        },\n\n        /**\n         * Sets the icon of a particular item according to its state\n         * @param {jQuery} $item\n         * @private\n         */\n        _adjustItemIcon: function($item) {\n            var icon = null;\n            var defaultIcon = _cssCls.unseen;\n            var iconCls = [\n                _cssCls.flagged,\n                _cssCls.answered,\n                _cssCls.viewed\n            ];\n\n            _.forEach(iconCls, function(cls) {\n                if ($item.hasClass(cls)) {\n                    icon = cls;\n                    return false;\n                }\n            });\n\n            this._setItemIcon($item, icon || defaultIcon);\n        },\n\n        /**\n         * Toggle the marked state of an item\n         * @param {jQuery} $item\n         * @param {Boolean} [flag]\n         * @private\n         */\n        _toggleFlag: function($item, flag) {\n            $item.toggleClass(_cssCls.flagged, flag);\n            this._adjustItemIcon($item);\n        },\n\n        /**\n         * Marks an item for later review\n         * @param {jQuery} $item\n         * @private\n         */\n        _mark: function($item) {\n            var itemId = $item.data('id');\n            var itemPosition = $item.data('position');\n            var flag = !$item.hasClass(_cssCls.flagged);\n\n            this._toggleFlag($item);\n\n            /**\n             * A storage of the flag is required\n             * @event testReview#mark\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             * @param {Number} position - The item position on which jump\n             * @param {String} itemId - The identifier of the target item\n             * @param {testReview} testReview - The client testReview component\n             */\n            this.trigger('mark', [flag, itemPosition, itemId]);\n        },\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        _jump: function($item) {\n            var itemId = $item.data('id');\n            var itemPosition = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event testReview#jump\n             * @param {Number} position - The item position on which jump\n             * @param {String} itemId - The identifier of the target item\n             * @param {testReview} testReview - The client testReview component\n             */\n            this.trigger('jump', [itemPosition, itemId]);\n        },\n\n        /**\n         * Updates the sections related items counters\n         * @param {Boolean} filtered\n         */\n        _updateSectionCounters: function(filtered) {\n            var self = this;\n            var filter = _filterMap[filtered ? 'filtered' : 'answered'];\n            this.$tree.find(_selectors.sections).each(function() {\n                var $section = $(this);\n                var $items = $section.find(_selectors.items);\n                var $filtered = $items.filter(filter);\n                var total = $items.length;\n                var nb = total - $filtered.length;\n                self._writeCount($section.find(_selectors.counters), nb, total);\n            });\n        },\n\n        /**\n         * Updates the display according to options\n         * @private\n         */\n        _updateDisplayOptions: function() {\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test';\n            var scopeClass = _cssCls.scope[reviewScope];\n            var $root = this.$component;\n            _.forEach(_cssCls.scope, function(cls) {\n                $root.removeClass(cls);\n            });\n            if (scopeClass) {\n                $root.addClass(scopeClass);\n            }\n            $root.toggleClass(_cssCls.collapsible, this.options.canCollapse);\n        },\n\n        /**\n         * Updates the local options from the provided context\n         * @param {Object} testContext The progression context\n         * @private\n         */\n        _updateOptions: function(testContext) {\n            var options = this.options;\n            _.forEach(_optionsMap, function(optionKey, contextKey) {\n                if (undefined !== testContext[contextKey]) {\n                    options[optionKey] = testContext[contextKey];\n                }\n            });\n        },\n\n        /**\n         * Updates the info panel\n         */\n        _updateInfos: function() {\n            var progression = this.progression,\n                unanswered = Number(progression.total) - Number(progression.answered);\n\n            // update the info panel\n            this._writeCount(this.$infoAnswered, progression.answered, progression.total);\n            this._writeCount(this.$infoUnanswered, unanswered, progression.total);\n            this._writeCount(this.$infoViewed, progression.viewed, progression.total);\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number} total\n         * @private\n         */\n        _writeCount: function($place, count, total) {\n            $place.text(count + '/' + total);\n        },\n\n        /**\n         * Gets the progression stats for the whole test\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTest: function(testContext) {\n            return {\n                total : testContext.numberItems || 0,\n                answered : testContext.numberCompleted || 0,\n                viewed : testContext.numberPresented || 0,\n                flagged : testContext.numberFlagged || 0\n            };\n        },\n\n        /**\n         * Gets the progression stats for the current test part\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTestPart: function(testContext) {\n            return {\n                total : testContext.numberItemsPart || 0,\n                answered : testContext.numberCompletedPart || 0,\n                viewed : testContext.numberPresentedPart || 0,\n                flagged : testContext.numberFlaggedPart || 0\n            };\n        },\n\n        /**\n         * Gets the progression stats for the current test section\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTestSection: function(testContext) {\n            return {\n                total : testContext.numberItemsSection || 0,\n                answered : testContext.numberCompletedSection || 0,\n                viewed : testContext.numberPresentedSection || 0,\n                flagged : testContext.numberFlaggedSection || 0\n            };\n        },\n\n        /**\n         * Updates the navigation tre\n         * @param {Object} testContext The progression context\n         */\n        _updateTree: function(testContext) {\n            var navigatorMap = testContext.navigatorMap;\n            var reviewScope = this.options.reviewScope;\n            var reviewScopePart = reviewScope === 'testPart';\n            var reviewScopeSection = reviewScope === 'testSection';\n            var _partsFilter = function(part) {\n                if (reviewScopeSection && part.sections) {\n                    part.sections = _.filter(part.sections, _partsFilter);\n                }\n                return part.active;\n            };\n\n            // rebuild the tree\n            if (navigatorMap) {\n                if (reviewScopePart || reviewScopeSection) {\n                    // display only the current section\n                    navigatorMap = _.filter(navigatorMap, _partsFilter);\n                }\n\n                this.$filterBar.show();\n                this.$linearState.hide();\n                this.$tree.html(navigatorTreeTpl({\n                    parts: navigatorMap\n                }));\n\n                if (this.options.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.$filterBar.hide();\n                this.$linearState.show();\n                this.$tree.empty();\n            }\n\n            // apply again the current filter\n            this._filter(this.$filters.filter(_selectors.actives).data('mode'));\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n\n            // update the item flag\n            this._toggleFlag($item, flag);\n\n            // update the info panel\n            progression.flagged = this.$tree.find(_selectors.flagged).length;\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\n            this._filter(this.currentFilter);\n        },\n\n        /**\n         * Update the number of flagged items in the test context\n         * @param {Object} testContext The test context\n         * @param {Number} position The position of the flagged item\n         * @param {Boolean} flag The flag state\n         */\n        updateNumberFlagged: function(testContext, position, flag) {\n            var fields = ['numberFlagged'];\n            var currentPosition = testContext.itemPosition;\n            var currentFound = false, currentSection = null, currentPart = null;\n            var itemFound = false, itemSection = null, itemPart = null;\n\n            if (testContext.navigatorMap) {\n                // find the current item and the marked item inside the navigator map\n                // check if the marked item is in the current section\n                _.forEach(testContext.navigatorMap, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            if (item) {\n                                if (item.position === position) {\n                                    itemPart = part;\n                                    itemSection = section;\n                                    itemFound = true;\n                                }\n                                if (item.position === currentPosition) {\n                                    currentPart = part;\n                                    currentSection = section;\n                                    currentFound = true;\n\n                                }\n                                if (itemFound && currentFound) {\n                                    return false;\n                                }\n                            }\n                        });\n\n                        if (itemFound && currentFound) {\n                            return false;\n                        }\n                    });\n\n                    if (itemFound && currentFound) {\n                        return false;\n                    }\n                });\n\n                // select the context to update\n                if (itemFound && currentPart === itemPart) {\n                    fields.push('numberFlaggedPart');\n                }\n                if (itemFound && currentSection === itemSection) {\n                    fields.push('numberFlaggedSection');\n                }\n            } else {\n                // no navigator map, the current the marked item is in the current section\n                fields.push('numberFlaggedPart');\n                fields.push('numberFlaggedSection');\n            }\n\n            _.forEach(fields, function(field) {\n                if (field in testContext) {\n                    testContext[field] += flag ? 1 : -1;\n                }\n            });\n        },\n\n        /**\n         * Get progression\n         * @param {Object} testContext The progression context\n         * @returns {object} progression\n         */\n        getProgression: function getProgression(testContext) {\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test',\n                progressInfoMethod = '_getProgressionOf' + capitalize(reviewScope),\n                getProgression = this[progressInfoMethod] || this._getProgressionOfTest,\n                progression = getProgression && getProgression(testContext) || {};\n\n            return progression;\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} testContext The progression context\n         * @returns {testReview}\n         */\n        update: function update(testContext) {\n            this.progression = this.getProgression(testContext);\n            this._updateOptions(testContext);\n            this._updateInfos(testContext);\n            this._updateTree(testContext);\n            this._updateDisplayOptions(testContext);\n            return this;\n        },\n\n        /**\n         * Disables the component\n         * @returns {testReview}\n         */\n        disable: function disable() {\n            this.disabled = true;\n            this.$component.addClass(_cssCls.disabled);\n            return this;\n        },\n\n        /**\n         * Enables the component\n         * @returns {testReview}\n         */\n        enable: function enable() {\n            this.disabled = false;\n            this.$component.removeClass(_cssCls.disabled);\n            return this;\n        },\n\n        /**\n         * Hides the component\n         * @returns {testReview}\n         */\n        hide: function hide() {\n            this.disabled = true;\n            this.hidden = true;\n            this.$component.addClass(_cssCls.hidden);\n            return this;\n        },\n\n        /**\n         * Shows the component\n         * @returns {testReview}\n         */\n        show: function show() {\n            this.disabled = false;\n            this.hidden = false;\n            this.$component.removeClass(_cssCls.hidden);\n            return this;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {testReview}\n         */\n        toggle: function toggle(show) {\n            if (undefined === show) {\n                show = this.hidden;\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        },\n\n        /**\n         * Install an event handler on the underlying DOM element\n         * @param {String} eventName\n         * @returns {testReview}\n         */\n        on: function on(eventName) {\n            var dom = this.$component;\n            if (dom) {\n                dom.on.apply(dom, arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Uninstall an event handler from the underlying DOM element\n         * @param {String} eventName\n         * @returns {testReview}\n         */\n        off: function off(eventName) {\n            var dom = this.$component;\n            if (dom) {\n                dom.off.apply(dom, arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Triggers an event on the underlying DOM element\n         * @param {String} eventName\n         * @param {Array|Object} extraParameters\n         * @returns {testReview}\n         */\n        trigger : function trigger(eventName, extraParameters) {\n            var dom = this.$component;\n\n            if (undefined === extraParameters) {\n                extraParameters = [];\n            }\n            if (!_.isArray(extraParameters)) {\n                extraParameters = [extraParameters];\n            }\n\n            extraParameters.push(this);\n\n            if (dom) {\n                dom.trigger(eventName, extraParameters);\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     * Builds an instance of testReview\n     * @param {String|jQuery|HTMLElement} element The element on which install the component\n     * @param {Object} [options] A list of extra options\n     * @param {String} [options.region] The region on which put the component: left or right\n     * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\n     * the whole test, the current test part or the current test section)\n     * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\n     * @returns {testReview}\n     */\n    var testReviewFactory = function(element, options) {\n        var component = _.clone(testReview, true);\n        return component.init(element, options);\n    };\n\n    return testReviewFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/progressUpdater',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/progressbar'\n], function ($, _, __) {\n    'use strict';\n\n    /**\n     * Provides a versatile progress bar updater\n     * @type {{init: Function, update: Function}}\n     */\n    var progressUpdaters = {\n        /**\n         * Initializes the progress updater\n         *\n         * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\n         * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\n         * @returns {progressUpdaters}\n         */\n        init: function(progressBar, progressLabel) {\n            this.progressBar = $(progressBar).progressbar();\n            this.progressLabel = $(progressLabel);\n            return this;\n        },\n\n        /**\n         * Writes the progress label and update the progress by ratio\n         * @param {String} label\n         * @param {Number} ratio\n         * @returns {progressUpdaters}\n         */\n        write: function(label, ratio) {\n            this.progressLabel.text(label);\n            this.progressBar.progressbar('value', ratio);\n            return this;\n        },\n\n        /**\n         * Updates the progress bar\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        update: function(testContext) {\n            var progressIndicator = testContext.progressIndicator || 'percentage';\n            var progressIndicatorMethod = progressIndicator + 'Progression';\n            var getProgression = this[progressIndicatorMethod] || this.percentageProgression;\n            var progression = getProgression && getProgression(testContext) || {};\n\n            this.write(progression.label, progression.ratio);\n            return progression;\n        },\n\n        /**\n         * Updates the progress bar displaying the percentage\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        percentageProgression: function(testContext) {\n            var total = Math.max(1, testContext.numberItems);\n            var ratio = Math.floor(testContext.numberCompleted / total * 100);\n            return {\n                ratio : ratio,\n                label : ratio + '%'\n            };\n        },\n\n        /**\n         * Updates the progress bar displaying the position\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        positionProgression: function(testContext) {\n            var progressScope = testContext.progressIndicatorScope;\n            var progressScopeCounter = {\n                test : {\n                    total : 'numberItems',\n                    position : 'itemPosition'\n                },\n                testPart : {\n                    total : 'numberItemsPart',\n                    position : 'itemPositionPart'\n                },\n                testSection : {\n                    total : 'numberItemsSection',\n                    position : 'itemPositionSection'\n                }\n            };\n            var counter = progressScopeCounter[progressScope] || progressScopeCounter.test;\n            var total = Math.max(1, testContext[counter.total]);\n            var position = testContext[counter.position] + 1;\n            return {\n                ratio : Math.floor(position / total * 100),\n                label : __('Item %d of %d', position, total)\n            };\n        }\n    };\n\n    /**\n     * Builds an instance of progressUpdaters\n     * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\n     * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\n     * @returns {progressUpdaters}\n     */\n    var progressUpdaterFactory = function(progressBar, progressLabel) {\n        var updater = _.clone(progressUpdaters, true);\n        return updater.init(progressBar, progressLabel);\n    };\n\n    return progressUpdaterFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n *\n */\n\n/**\n * Metadata to be sent to the server. Will be saved in result storage as a trace variable.\n * Usage example:\n * <pre>\n * var testMetaData = testMetaDataFactory({\n *   testServiceCallId : this.itemServiceApi.serviceCallId\n * });\n *\n * testMetaData.setData({\n *   'TEST' : {\n *      'TEST_EXIT_CODE' : 'T'\n *   },\n *   'SECTION' : {\n *      'SECTION_EXIT_CODE' : 704\n *   }\n * });\n *\n * testMetaData.addData({'ITEM' : {\n *      'ITEM_START_TIME_CLIENT' : 1443596730143,\n *      'ITEM_END_TIME_CLIENT' : 1443596731301\n *    }\n * });\n * </pre>\n *\n * Data for each service call id will be stored in local storage to be able get data\n * after reloading the page or resuming the test session.\n *\n * To clear all data related to current test_call_id used <i>clearData</i> method.\n */\ndefine('taoQtiTest/testRunner/testMetaData',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * @param {Object} options\n     * @param {string} options.testServiceCallId - test call id.\n     */\n     var testMetaDataFactory = function testMetaDataFactory(options) {\n        var _testServiceCallId,\n            _storageKeyPrefix = 'testMetaData_',\n            _data = {};\n\n        if (!options || options.testServiceCallId === undefined) {\n            throw new TypeError(\"testServiceCallId option is required\");\n        }\n\n        var testMetaData = {\n            SECTION_EXIT_CODE : {\n                'COMPLETED_NORMALLY': 700,\n                'QUIT': 701,\n                'COMPLETE_TIMEOUT': 703,\n                'TIMEOUT': 704,\n                'FORCE_QUIT': 705,\n                'IN_PROGRESS': 706,\n                'ERROR': 300\n            },\n            TEST_EXIT_CODE : {\n                'COMPLETE': 'C',\n                'TERMINATED': 'T',\n                'INCOMPLETE': 'IC',\n                'INCOMPLETE_QUIT': 'IQ',\n                'INACTIVE': 'IA',\n                'CANDIDATE_DISAGREED_WITH_NDA': 'DA'\n            },\n            /**\n             * Return test call id.\n             * @returns {string}- Test call id\n             */\n            getTestServiceCallId : function getTestServiceCallId () {\n                return _testServiceCallId;\n            },\n\n            /**\n             * Set test call id.\n             * @param {string} value\n             */\n            setTestServiceCallId : function setTestServiceCallId (value) {\n                _testServiceCallId = value;\n            },\n\n            /**\n             * Set meta data. Current data object will be overwritten.\n             * @param {Object} data - metadata object\n             */\n            setData : function setData(data) {\n                _data = data;\n                setLocalStorageData(JSON.stringify(_data));\n            },\n\n            /**\n             * Add data.\n             * @param {Object} data - metadata object\n             * @param {Boolean} overwrite - whether the same data should be overwritten. Default - <i>false</i>\n             */\n            addData : function addData(data, overwrite) {\n                data = _.clone(data);\n                if (overwrite === undefined) {\n                    overwrite = false;\n                }\n\n                if (overwrite) {\n                    _.merge(_data, data);\n                } else {\n                    _data = _.merge(data, _data);\n                }\n                setLocalStorageData(JSON.stringify(_data));\n            },\n\n            /**\n             * Get the saved data.\n             * The cloned object will be returned to avoid unwanted affecting of the original data.\n             * @returns {Object} - metadata object.\n             */\n            getData : function getData() {\n                return _.clone(_data);\n            },\n\n            /**\n             * Clear all data saved in current object and in local storage related to current test call id.\n             * @returns {Object} - metadata object.\n             */\n            clearData : function clearData() {\n                _data = {};\n                window.localStorage.removeItem(testMetaData.getLocalStorageKey());\n            },\n\n            getLocalStorageKey : function getLocalStorageKey () {\n                return _storageKeyPrefix + _testServiceCallId;\n            }\n        };\n\n        /**\n         * Initialize test meta data manager\n         */\n        function init() {\n            _testServiceCallId = options.testServiceCallId;\n            testMetaData.setData(getLocalStorageData());\n        }\n\n        /**\n         * Set data to local storage\n         * @param {string} val - data to be stored.\n         */\n        function setLocalStorageData(val) {\n            var currentKey = testMetaData.getLocalStorageKey();\n            try {\n                window.localStorage.setItem(currentKey, val);\n            } catch(domException) {\n                if (domException.name === 'QuotaExceededError' ||\n                    domException.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                    var removed = 0,\n                        i = window.localStorage.length,\n                        key;\n                    while (i--) {\n                        key  = localStorage.key(i);\n                        if (/^testMetaData_.*/.test(key) && key !== currentKey) {\n                            window.localStorage.removeItem(key);\n                            removed++;\n                        }\n                    }\n                    if (removed) {\n                        setLocalStorageData(val);\n                    } else {\n                        throw domException;\n                    }\n                } else {\n                    throw domException;\n                }\n            }\n        }\n\n        /**\n         * Get data from local storage stored for current call id\n         * @returns {*} saved data or empty object\n         */\n        function getLocalStorageData() {\n            var data = window.localStorage.getItem(testMetaData.getLocalStorageKey()),\n                result = JSON.parse(data) || {};\n\n            return result;\n        }\n\n        init();\n\n        return testMetaData;\n    };\n\n    return testMetaDataFactory;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\ndefine('serviceApi/ServiceApi',['jquery', 'urlParser'], function($, UrlParser){\n    'use strict';\n\n    /**\n     * @constructor\n     */\n    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService, paused){\n        this.baseUrl = baseUrl;\n        this.parameters = parameters;\n        this.connected = false;\n\n        this.serviceCallId = serviceCallId;\n        this.state = stateStorage;\n        this.userService = userService;\n        this.hasBeenPaused = paused;\n    }\n\n    ServiceApi.SIG_SUCCESS = 0;\n    ServiceApi.SIG_ERROR = 1;\n\n    ServiceApi.prototype.loadInto = function(frame, connected){\n        var self = this;\n        var $frame = $(frame);\n        var callUrl = this.getCallUrl();\n        var isCORSAllowed = new UrlParser(callUrl).checkCORS();\n\n        $frame.on('load', function(e){\n             //if we are  in the same domain, we add a variable\n             //to the frame window, so the frame knows it can communicate\n             //with the parent\n            $(document).on('serviceready', function(){\n                self.connect(frame, function(){\n                    $(document).off('serviceready');\n                    if(typeof connected === 'function'){\n                        connected();\n                    }\n                });\n            });\n             if(isCORSAllowed === true){\n                 frame.contentWindow.__knownParent__ = true;\n             }\n         });\n\n        $frame.attr('src', callUrl);\n    };\n\n    ServiceApi.prototype.connect = function(frame, connected){\n        if(this.connected === false && frame.contentWindow){\n            //frame.contentWindow.serviceApi = this;\n            if (typeof(frame.contentWindow.onServiceApiReady) === \"function\") {\n                frame.contentWindow.onServiceApiReady(this);\n                this.connected = true;\n                if(typeof connected === 'function'){\n                    connected();\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the service call URL\n     * @returns {String} the URI\n     */\n    ServiceApi.prototype.getCallUrl = function(){\n        var params = this.parameters || {};\n        params.serviceCallId = this.serviceCallId;\n        return this.baseUrl + '?' + $.param(params);\n    };\n\n    ServiceApi.prototype.getUserPropertyValues = function(property, callback){\n    \tthis.userService.get(property, callback);\n    };\n\n    //Context\n    ServiceApi.prototype.getServiceCallId = function(){\n        return this.serviceCallId;\n    };\n\n    //Context\n    ServiceApi.prototype.getState = function(){\n        return this.state.get();\n    };\n\n    ServiceApi.prototype.setState = function(state, callback){\n        return this.state.set(state, callback);\n    };\n\n    //Context\n    ServiceApi.prototype.getHasBeenPaused = function(){\n        return this.hasBeenPaused;\n    };\n\n    ServiceApi.prototype.setHasBeenPaused = function(paused){\n        this.hasBeenPaused = paused;\n    };\n\n    // Variables\n    ServiceApi.prototype.getParameter = function(identifier){\n        if (typeof(this.parameters[identifier]) !== \"undefined\") {\n            return this.parameters[identifier];\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Sets a callback on the finish action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onFinish = function(callback) {\n        this.onFinishCallback = callback;\n        return this;\n    };\n\n    /**\n     * Sets a callback on the kill action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onKill = function(callback) {\n        this.onKillCallback = callback;\n        return this;\n    };\n\n    /**\n     * Sets a callback on the exit action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onExit = function(callback) {\n        this.onExitCallback = callback;\n        return this;\n    };\n\n    /**\n     * @param {Function} callback - Function called if no dedicated callback is found\n     */\n    ServiceApi.prototype.kill = function(callback) {\n    \tif (typeof this.onKillCallback === 'function') {\n    \t\tthis.onKillCallback(callback);\n    \t} else {\n    \t\tcallback(0);\n    \t}\n    };\n\n    /**\n     * Exits the flow\n     * @param {Function} callback - Function called if no dedicated callback is found\n     */\n    ServiceApi.prototype.exit = function(callback) {\n    \tif (typeof this.onExitCallback === 'function') {\n    \t\tthis.onExitCallback(callback);\n    \t} else {\n    \t\tcallback(0);\n    \t}\n    };\n\n    /**\n     * Finishes the flow\n     * @param valueArray - return parameters of the service.\n     */\n    ServiceApi.prototype.finish = function(valueArray) {\n        //return execution to service caller\n        if (typeof this.onFinishCallback === 'function') {\n                this.onFinishCallback(valueArray);\n        }\n    };\n\n    return ServiceApi;\n\n});\n\n","define('serviceApi/UserInfoService',['jquery'], function($){\n    \n    function UserInfoService(requestUrl, data) {\n        this.data = data;\n        this.requestUrl = requestUrl;\n    }\n\n    UserInfoService.prototype.get = function(property, callback){\n        if (this.data.hasOwnProperty(property)) {\n            if (typeof callback === \"function\") {\n                    callback(this.data[property]);\n            }\n        } else {\n            $.ajax({\n                url : this.requestUrl,\n                data \t\t: {\n                    'property' : property\n                },\n                type        : 'post',\n                dataType\t: 'json',\n                success     : (function(service, callback) {return function(r) {\n            \t\tfor (key in r.data) {\n            \t\t\tservice.data[key] = r.data[key];\n            \t\t}\n                    if (typeof callback === \"function\") {\n                        callback(service.data[property]);\n                    }\n\n                }})(this, callback)\n                /*\t\n            \tfunction(r){\n                    if(r.success){\n                    \tconsole.log(this.data);\n                    \tthis.data[property] = r.values;\n                    \t//console.log(this.data);\n\t                    if (typeof callback === \"function\") {\n\t                        callback(this.data[property]);\n\t                    }\n                    }\n                }\n                */\n                \n                \n            });\n        }\n    };\n\n    return UserInfoService;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA ;\n */\ndefine('serviceApi/StateStorage',['jquery'], function($){\n    'use strict';\n    \n    function StateStorage(state, submitUrl) {\n        this.state = state;\n        this.submitUrl = submitUrl;\n    }\n\n    StateStorage.prototype.get = function(callback){\n        if (typeof callback === 'function') {\n                callback(this.state);\n        }\n        return this.state;\n    };\n\n    StateStorage.prototype.set = function(state, callback){\n\n        if (state === this.state) {\n            if (typeof callback === \"function\") {\n                    callback();\n            }\n        } else {\n            this.state = state;\n            $.ajax({\n                url : this.submitUrl,\n                data \t\t: {\n                    'state' : state\n                },\n                type        : 'post',\n                dataType\t: 'json',\n                success     : typeof callback === \"function\" ? callback : null\n            });\n        }\n    };\n\n    return StateStorage;\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n *\n */\n\ndefine('taoQtiTest/controller/runtime/testRunner',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'module',\n    'taoQtiTest/testRunner/actionBarTools',\n    'taoQtiTest/testRunner/testReview',\n    'taoQtiTest/testRunner/progressUpdater',\n    'taoQtiTest/testRunner/testMetaData',\n    'serviceApi/ServiceApi',\n    'serviceApi/UserInfoService',\n    'serviceApi/StateStorage',\n    'iframeNotifier',\n    'mathJax',\n    'ui/feedback',\n    'ui/deleter',\n    'moment',\n    'ui/modal',\n    'ui/progressbar'\n],\nfunction (\n    $,\n    _,\n    __,\n    module,\n    actionBarTools,\n    testReview,\n    progressUpdater,\n    testMetaDataFactory,\n    ServiceApi,\n    UserInfoService,\n    StateStorage,\n    iframeNotifier,\n    MathJax,\n    feedback,\n    deleter,\n    moment,\n    modal\n) {\n\n    'use strict';\n\n    var timerIds = [],\n        currentTimes = [],\n        lastDates = [],\n        timeDiffs = [],\n        waitingTime = 0,\n        $timers,\n        $controls,\n        timerIndex,\n        testMetaData,\n        sessionStateService,\n        $doc = $(document),\n        optionNextSection = 'x-tao-option-nextSection',\n        optionNextSectionWarning = 'x-tao-option-nextSectionWarning',\n        optionReviewScreen = 'x-tao-option-reviewScreen',\n        optionEndTestWarning = 'x-tao-option-endTestWarning',\n        optionNoExitTimedSectionWarning = 'x-tao-option-noExitTimedSectionWarning',\n        TestRunner = {\n            // Constants\n            'TEST_STATE_INITIAL': 0,\n            'TEST_STATE_INTERACTING': 1,\n            'TEST_STATE_MODAL_FEEDBACK': 2,\n            'TEST_STATE_SUSPENDED': 3,\n            'TEST_STATE_CLOSED': 4,\n            'TEST_NAVIGATION_LINEAR': 0,\n            'TEST_NAVIGATION_NONLINEAR': 1,\n            'TEST_ITEM_STATE_INTERACTING': 1,\n\n            /**\n             * Prepare a transition to another item\n             * @param {Function} [callback]\n             */\n            beforeTransition: function (callback) {\n                // Ask the top window to start the loader.\n                iframeNotifier.parent('loading');\n\n                // Disable buttons.\n                this.disableGui();\n\n                $controls.$itemFrame.hide();\n                $controls.$rubricBlocks.hide();\n                $controls.$timerWrapper.hide();\n\n                // Wait at least waitingTime ms for a better user experience.\n                if (typeof callback === 'function') {\n                    setTimeout(callback, waitingTime);\n                }\n            },\n\n            /**\n             * Complete a transition to another item\n             */\n            afterTransition: function () {\n                this.enableGui();\n\n                //ask the top window to stop the loader\n                iframeNotifier.parent('unloading');\n                testMetaData.addData({\n                    'ITEM' : {'ITEM_START_TIME_CLIENT' : Date.now() / 1000}\n                });\n            },\n\n            /**\n             * Jumps to a particular item in the test\n             * @param {Number} position The position of the item within the test\n             */\n            jump: function(position) {\n                var self = this,\n                    action = 'jump',\n                    params = {position: position};\n                this.disableGui();\n\n                if( this.isJumpOutOfSection(position)  && this.isCurrentItemActive() && this.isTimedSection() ){\n                    this.exitTimedSection(action, params);\n                } else {\n                    this.killItemSession(function() {\n                        self.actionCall(action, params);\n                    });\n                }\n            },\n\n            /**\n             * Push to server how long user seen that item before to track duration\n             * @param {Number} duration\n             */\n            keepItemTimed: function(duration){\n                if (duration) {\n                    var self = this,\n                        action = 'keepItemTimed',\n                        params = {duration: duration};\n                    self.actionCall(action, params);\n                }\n            },\n\n            /**\n             * Marks an item for later review\n             * @param {Boolean} flag The state of the flag\n             * @param {Number} position The position of the item within the test\n             */\n            markForReview: function(flag, position) {\n                var self = this;\n\n                // Ask the top window to start the loader.\n                iframeNotifier.parent('loading');\n\n                // Disable buttons.\n                this.disableGui();\n\n                $.ajax({\n                    url: self.testContext.markForReviewUrl,\n                    cache: false,\n                    async: true,\n                    type: 'POST',\n                    dataType: 'json',\n                    data: {\n                        flag: flag,\n                        position: position\n                    },\n                    success: function(data) {\n                        // update the item flagged state\n                        if (self.testReview) {\n                            self.testReview.setItemFlag(position, flag);\n                            self.testReview.updateNumberFlagged(self.testContext, position, flag);\n                            if (self.testContext.itemPosition === position) {\n                                self.testContext.itemFlagged = flag;\n                            }\n                            self.updateTools(self.testContext);\n                        }\n\n                        // Enable buttons.\n                        self.enableGui();\n\n                        //ask the top window to stop the loader\n                        iframeNotifier.parent('unloading');\n                    }\n                });\n            },\n\n            /**\n             * Move to the next available item\n             */\n            moveForward: function () {\n                var self = this,\n                    action = 'moveForward';\n\n                function doExitSection() {\n                    if( self.isTimedSection() && !self.testContext.isTimeout){\n                        self.exitTimedSection(action);\n                    } else {\n                        self.exitSection(action);\n                    }\n                }\n\n                this.disableGui();\n\n                if( (( this.testContext.numberItemsSection - this.testContext.itemPositionSection - 1) == 0) && this.isCurrentItemActive()){\n                    if (this.shouldDisplayEndTestWarning()) {\n                        this.displayEndTestWarning(doExitSection);\n                        this.enableGui();\n                    } else {\n                        doExitSection();\n                    }\n\n                } else {\n                    this.killItemSession(function () {\n                        self.actionCall(action);\n                    });\n                }\n            },\n\n            /**\n             * Check if necessary to display an end test warning\n             */\n            shouldDisplayEndTestWarning: function(){\n                return (this.testContext.isLast === true && this.hasOption(optionEndTestWarning));\n            },\n\n            /**\n             * Warns upon exiting test\n             */\n            displayEndTestWarning: function(nextAction){\n                var options = {\n                    confirmLabel: __('OK'),\n                    cancelLabel: __('Cancel'),\n                    showItemCount: false\n                };\n\n                this.displayExitMessage(\n                    __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                    nextAction,\n                    options\n                );\n            },\n\n            /**\n             * Move to the previous available item\n             */\n            moveBackward: function () {\n                var self = this,\n                    action = 'moveBackward';\n\n                this.disableGui();\n\n                if( (this.testContext.itemPositionSection == 0) && this.isCurrentItemActive() && this.isTimedSection() ){\n                    this.exitTimedSection(action);\n                } else {\n                this.killItemSession(function () {\n                        self.actionCall(action);\n                    });\n                }\n            },\n\n            /**\n             * Checks if a position is out of the current section\n             * @param {Number} jumpPosition\n             * @returns {Boolean}\n             */\n            isJumpOutOfSection: function(jumpPosition){\n                var items = this.getCurrentSectionItems(),\n                    isJumpToOtherSection = true,\n                    isValidPosition = (jumpPosition >= 0) && ( jumpPosition < this.testContext.numberItems );\n\n                if( isValidPosition){\n                    for(var i in items ) {\n                        if (!items.hasOwnProperty(i)) {\n                            continue;\n                        }\n                        if( items[i].position == jumpPosition ){\n                            isJumpToOtherSection = false;\n                            break;\n                        }\n                    }\n                } else {\n                    isJumpToOtherSection = false;\n                }\n\n                return isJumpToOtherSection;\n            },\n\n            /**\n             * Exit from the current section. Set the exit code.de\n             * @param {String} action\n             * @param {Object} params\n             * @param {Number} [exitCode]\n             */\n            exitSection: function(action, params, exitCode){\n                var self = this;\n\n                testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : exitCode || testMetaData.SECTION_EXIT_CODE.COMPLETED_NORMALLY}});\n                self.killItemSession(function () {\n                    self.actionCall(action, params);\n                });\n            },\n\n            /**\n             * Tries to exit a timed section. Display a confirm message.\n             * @param {String} action\n             * @param {Object} params\n             */\n            exitTimedSection: function(action, params){\n                var self = this,\n                    qtiRunner = this.getQtiRunner(),\n                    doExitTimedSection = function() {\n                        if (qtiRunner) {\n                            qtiRunner.updateItemApi();\n                        }\n                        self.exitSection(action, params);\n                    };\n\n                if ((action === 'moveForward' && this.shouldDisplayEndTestWarning())    // prevent duplicate warning\n                    || this.hasOption(optionNoExitTimedSectionWarning)                  // check if warning is disabled\n                    || this.testContext.keepTimerUpToTimeout                            // no need to display the message as we may be able to go back\n                ) {\n                    doExitTimedSection();\n                } else {\n                    this.displayExitMessage(\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                        doExitTimedSection,\n                        { scope: 'testSection' }\n                    );\n                }\n\n                this.enableGui();\n            },\n\n            /**\n             * Tries to leave the current section and go to the next\n             */\n            nextSection: function(){\n                var self = this;\n                var qtiRunner = this.getQtiRunner();\n                var doNextSection = function() {\n                    self.exitSection('nextSection', null, testMetaData.SECTION_EXIT_CODE.QUIT);\n                };\n\n                if (qtiRunner) {\n                    qtiRunner.updateItemApi();\n                }\n\n                if (this.hasOption(optionNextSectionWarning)) {\n                    this.displayExitMessage(\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                        doNextSection,\n                        { scope: 'testSection' }\n                    );\n                } else {\n                    doNextSection();\n                }\n\n                this.enableGui();\n            },\n\n            /**\n             * Gets the current progression within a particular scope\n             * @param {String} [scope]\n             * @returns {Object}\n             */\n            getProgression: function(scope) {\n                var scopeSuffixMap = {\n                    test : '',\n                    testPart : 'Part',\n                    testSection : 'Section'\n                };\n                var scopeSuffix = scope && scopeSuffixMap[scope] || '';\n\n                return {\n                    total : this.testContext['numberItems' + scopeSuffix] || 0,\n                    answered : this.testContext['numberCompleted' + scopeSuffix] || 0,\n                    viewed : this.testContext['numberPresented' + scopeSuffix] || 0,\n                    flagged : this.testContext['numberFlagged' + scopeSuffix] || 0\n                };\n            },\n\n            /**\n             * Displays an exit message for a particular scope\n             * @param {String} message\n             * @param {Function} [action]\n             * @param {Object} [options]\n             * @param {String} [options.scope]\n             * @param {String} [options.confirmLabel] - label of confirm button\n             * @param {String} [options.cancelLabel] - label of cancel button\n             * @param {Boolean} [options.showItemCount] - display the number of unanswered / flagged items in modal\n             * @returns {jQuery} Returns the message box\n             */\n            displayExitMessage: function(message, action, options) {\n                var self = this,\n                    options = options || {},\n                    scope = options.scope,\n                    confirmLabel = options.confirmLabel || __('Yes'),\n                    cancelLabel = options.cancelLabel || __('No'),\n                    showItemCount = typeof options.showItemCount !== 'undefined' ? options.showItemCount : true;\n\n                var $confirmBox = $('.exit-modal-feedback');\n                var progression = this.getProgression(scope);\n                var unansweredCount = (progression.total - progression.answered);\n                var flaggedCount = progression.flagged;\n\n                if (showItemCount) {\n                    if (unansweredCount && this.isCurrentItemAnswered()) {\n                        unansweredCount--;\n                    }\n\n                    if (flaggedCount && unansweredCount) {\n                        message = __('You have %s unanswered question(s) and have %s item(s) marked for review.',\n                                unansweredCount.toString(),\n                                flaggedCount.toString()\n                            ) + ' ' + message;\n                    } else {\n                        if (flaggedCount) {\n                            message = __('You have %s item(s) marked for review.', flaggedCount.toString()) + ' ' + message;\n                        }\n\n                        if (unansweredCount) {\n                            message = __('You have %s unanswered question(s).', unansweredCount.toString()) + ' ' + message;\n                        }\n                    }\n                }\n\n                $confirmBox.find('.message').html(message);\n                $confirmBox.find('.js-exit-confirm').html(confirmLabel);\n                $confirmBox.find('.js-exit-cancel').html(cancelLabel);\n                $confirmBox.modal({ width: 500 });\n\n                $confirmBox.find('.js-exit-cancel, .modal-close').off('click').on('click', function () {\n                    $confirmBox.modal('close');\n                });\n\n                $confirmBox.find('.js-exit-confirm').off('click').on('click', function () {\n                    $confirmBox.modal('close');\n                    if (_.isFunction(action)) {\n                        action.call(self);\n                    }\n                });\n\n                return $confirmBox;\n            },\n\n            /**\n             * Kill current item section and execute callback function given as first parameter.\n             * Item end execution time will be stored in metadata object to be sent to the server.\n             * @param {function} callback\n             */\n            killItemSession : function (callback) {\n                testMetaData.addData({\n                    'ITEM' : {\n                        'ITEM_END_TIME_CLIENT' : Date.now() / 1000,\n                        'ITEM_TIMEZONE' : moment().utcOffset(moment().utcOffset()).format('Z')\n                    }\n                });\n                if (typeof callback !== 'function') {\n                    callback = _.noop;\n                }\n                this.itemServiceApi.kill(callback);\n            },\n\n            /**\n             * Checks if the current item is active\n             * @returns {Boolean}\n             */\n            isCurrentItemActive: function(){\n                return (this.testContext.itemSessionState !=4);\n            },\n\n            /**\n             * Tells is the current item has been answered or not\n             * The item is considered answered when at least one response has been set to not empty {base : null}\n             *\n             * @returns {Boolean}\n             */\n            isCurrentItemAnswered: function(){\n                var answered = false;\n                _.each(this.getCurrentItemState(), function(state){\n                    if(state && _.isObject(state.response) && state.response.base !== null){\n                        answered = true;//at least one response is not null so consider the item answered\n                        return false;\n                    }\n                });\n                return answered;\n            },\n\n            /**\n             * Checks if a particular option is enabled for the current item\n             * @param {String} option\n             * @returns {Boolean}\n             */\n            hasOption: function(option) {\n                return _.indexOf(this.testContext.categories, option) >= 0;\n            },\n\n            /**\n             * Gets access to the qtiRunner instance\n             * @returns {Object}\n             */\n            getQtiRunner: function(){\n                var itemFrame = document.getElementById('qti-item');\n                var itemWindow = itemFrame && itemFrame.contentWindow;\n                var itemContainerFrame = itemWindow && itemWindow.document.getElementById('item-container');\n                var itemContainerWindow = itemContainerFrame && itemContainerFrame.contentWindow;\n                return itemContainerWindow && itemContainerWindow.qtiRunner;\n            },\n\n            /**\n             * Checks if the current section is timed\n             * @returns {Boolean}\n             */\n            isTimedSection: function(){\n                var timeConstraints = this.testContext.timeConstraints,\n                    isTimedSection = false;\n                for( var index in timeConstraints ){\n                    if(timeConstraints.hasOwnProperty(index) &&\n                        timeConstraints[index].qtiClassName === 'assessmentSection' ){\n                        isTimedSection = true;\n                    }\n                }\n\n                return isTimedSection;\n            },\n\n            /**\n             * Gets the list of items owned by the current section\n             * @returns {Array}\n             */\n            getCurrentSectionItems: function(){\n                var partId  = this.testContext.testPartId,\n                    navMap  = this.testContext.navigatorMap,\n                    sectionItems;\n\n                for( var partIndex in navMap ){\n                    if( !navMap.hasOwnProperty(partIndex)){\n                        continue;\n                    }\n                    if( navMap[partIndex].id !== partId ){\n                        continue;\n                    }\n\n                    for(var sectionIndex in navMap[partIndex].sections){\n                        if( !navMap[partIndex].sections.hasOwnProperty(sectionIndex)){\n                            continue;\n                        }\n                        if( navMap[partIndex].sections[sectionIndex].active === true ){\n                            sectionItems = navMap[partIndex].sections[sectionIndex].items;\n                            break;\n                        }\n                    }\n                }\n\n                return sectionItems;\n            },\n\n            /**\n             * Skips the current item\n             */\n            skip: function () {\n                var self = this,\n                    doSkip = function() {\n                        self.disableGui();\n                        self.actionCall('skip');\n                    };\n\n                if (this.shouldDisplayEndTestWarning()) {\n                    this.displayEndTestWarning(doSkip);\n                } else {\n                    doSkip();\n                }\n            },\n\n            /**\n             * Handles the timeout state\n             */\n            timeout: function () {\n                var self = this;\n                this.disableGui();\n                this.testContext.isTimeout = true;\n                this.updateTimer();\n\n                this.killItemSession(function () {\n                    var confirmBox = $('.timeout-modal-feedback'),\n                        testContext = self.testContext,\n                        confirmBtn = confirmBox.find('.js-timeout-confirm, .modal-close');\n\n                    if (testContext.numberCompletedSection === testContext.numberItemsSection) {\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.COMPLETE_TIMEOUT}});\n                    } else {\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.TIMEOUT}});\n                    }\n\n                    self.enableGui();\n                    confirmBox.modal({width: 500});\n                    confirmBtn.off('click').on('click', function () {\n                        confirmBox.modal('close');\n                        self.actionCall('timeout');\n                    });\n                });\n            },\n\n            /**\n             * Sets the assessment test context object\n             * @param {Object} testContext\n             */\n            setTestContext: function(testContext) {\n                this.testContext = testContext;\n                this.itemServiceApi = eval(testContext.itemServiceApiCall);\n                this.itemServiceApi.setHasBeenPaused(testContext.hasBeenPaused);\n            },\n\n\n            /**\n             * Handles Metadata initialization\n             */\n            initMetadata: function (){\n                testMetaData = testMetaDataFactory({\n                    testServiceCallId: this.itemServiceApi.serviceCallId\n                });\n            },\n\n            /**\n             * Retrieve service responsible for broken session tracking\n             * @returns {*}\n             */\n            getSessionStateService: function () {\n                if (!sessionStateService) {\n                    sessionStateService = this.testContext.sessionStateService({accuracy: 1000});\n                }\n                return sessionStateService;\n            },\n\n            /**\n             * Updates the GUI\n             * @param {Object} testContext\n             */\n            update: function (testContext) {\n                var self = this;\n                $controls.$itemFrame.remove();\n\n                var $runner = $('#runner');\n                $runner.css('height', 'auto');\n\n                this.getSessionStateService().restart();\n\n                this.setTestContext(testContext);\n                this.updateContext();\n                this.updateProgress();\n                this.updateNavigation();\n                this.updateTestReview();\n                this.updateInformation();\n                this.updateRubrics();\n                this.updateTools(testContext);\n                this.updateTimer();\n                this.updateExitButton();\n                this.resetCurrentItemState();\n                this.initMetadata();\n\n                $controls.$itemFrame = $('<iframe id=\"qti-item\" frameborder=\"0\" scrollbars=\"no\"/>');\n                $controls.$itemFrame.appendTo($controls.$contentBox);\n\n                if (this.testContext.itemSessionState === this.TEST_ITEM_STATE_INTERACTING && self.testContext.isTimeout === false) {\n                    $doc.off('.testRunner').on('serviceloaded.testRunner', function () {\n                        self.afterTransition();\n                        self.adjustFrame();\n                        $controls.$itemFrame.css({visibility: 'visible'});\n                    });\n\n                    // Inject API into the frame.\n                    this.itemServiceApi.loadInto($controls.$itemFrame[0], function () {\n                        // We now rely on the 'serviceloaded' event.\n                    });\n                }\n                else {\n                    // e.g. no more attempts or timeout! Simply consider the transition is finished,\n                    // but do not load the item.\n                    self.afterTransition();\n                }\n            },\n\n            /**\n             * Displays feedback on the current state of the test\n             */\n            updateInformation: function () {\n\n                if (this.testContext.isTimeout === true) {\n                    feedback().error(__('Time limit reached for item \"%s\".', this.testContext.itemIdentifier));\n                }\n                else if (this.testContext.itemSessionState !== this.TEST_ITEM_STATE_INTERACTING) {\n                    feedback().error(__('No more attempts allowed for item \"%s\".', this.testContext.itemIdentifier));\n                }\n            },\n\n            /**\n             * Updates the displayed tools\n             * @param {Object} testContext\n             */\n            updateTools: function updateTools(testContext) {\n                var showSkip = false;\n                var showSkipEnd = false;\n                var showNextSection = !!testContext.nextSection && (this.hasOption(optionNextSection) || this.hasOption(optionNextSectionWarning));\n\n                if (this.testContext.allowSkipping === true) {\n                    if (this.testContext.isLast === false) {\n                        showSkip = true;\n                    } else {\n                        showSkipEnd = true;\n                    }\n                }\n\n                $controls.$skip.toggle(showSkip);\n                $controls.$skipEnd.toggle(showSkipEnd);\n                $controls.$nextSection.toggle(showNextSection);\n\n                actionBarTools.render('.tools-box-list', testContext, TestRunner);\n            },\n\n            /**\n             * Displays a timer\n             * @param {Object} cst\n             * @returns {*|jQuery|HTMLElement}\n             */\n            createTimer: function(cst) {\n                var $timer = $('<div>', {'class': 'qti-timer qti-timer__type-' + cst.qtiClassName }),\n                    $label = $('<div>', {'class': 'qti-timer_label truncate', text: cst.label }),\n                    $time  = $('<div>', {'class': 'qti-timer_time', text: this.formatTime(cst.seconds) });\n\n                $timer.append($label);\n                $timer.append($time);\n                return $timer;\n            },\n\n            /**\n             * Updates the timers\n             */\n            updateTimer: function () {\n                var self = this;\n                var hasTimers;\n                $controls.$timerWrapper.empty();\n\n                for (var i = 0; i < timerIds.length; i++) {\n                    clearTimeout(timerIds[i]);\n                }\n\n                timerIds = [];\n                currentTimes = [];\n                lastDates = [];\n                timeDiffs = [];\n\n                if (self.testContext.isTimeout === false &&\n                    self.testContext.itemSessionState === self.TEST_ITEM_STATE_INTERACTING) {\n\n                    hasTimers = !!this.testContext.timeConstraints.length;\n                    $controls.$topActionBar.toggleClass('has-timers', hasTimers);\n\n                    if (hasTimers) {\n\n                        // Insert QTI Timers container.\n                        // self.formatTime(cst.seconds)\n                        for (i = 0; i < this.testContext.timeConstraints.length; i++) {\n\n                            var cst = this.testContext.timeConstraints[i];\n\n                            if (cst.allowLateSubmission === false) {\n\n                                // Set up a timer for this constraint\n                                $controls.$timerWrapper.append(self.createTimer(cst));\n\n                                // Set up a timer and update it with setInterval.\n                                currentTimes[i] = cst.seconds;\n                                lastDates[i] = new Date();\n                                timeDiffs[i] = 0;\n                                timerIndex = i;\n\n                                if (self.testContext.timerWarning && self.testContext.timerWarning[cst.qtiClassName]) {\n                                    cst.warnings = {};\n                                    _(self.testContext.timerWarning[cst.qtiClassName]).forEach(function (value, key) {\n                                        if (_.contains(['info', 'warning', 'danger'], value)) {\n                                            cst.warnings[key] = {\n                                                type: value,\n                                                showed: cst.seconds <= key,\n                                                point: parseInt(key, 10)\n                                            };\n                                        }\n                                    });\n                                    var closestPreviousWarning = _.find(cst.warnings, { showed: true });\n                                    if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point) {\n                                        cst.warnings[closestPreviousWarning.point].showed = false;\n                                    }\n                                }\n\n                                (function (timerIndex, cst) {\n                                    timerIds[timerIndex] = setInterval(function () {\n\n                                        timeDiffs[timerIndex] += (new Date()).getTime() - lastDates[timerIndex].getTime();\n\n                                        if (timeDiffs[timerIndex] >= 1000) {\n                                            var seconds = timeDiffs[timerIndex] / 1000;\n                                            currentTimes[timerIndex] -= seconds;\n                                            timeDiffs[timerIndex] = 0;\n                                        }\n\n                                        $timers.eq(timerIndex)\n                                            .html(self.formatTime(Math.round(currentTimes[timerIndex])));\n\n                                        if (currentTimes[timerIndex] <= 0) {\n                                            // The timer expired...\n                                            currentTimes[timerIndex] = 0;\n                                            clearInterval(timerIds[timerIndex]);\n\n                                            // Hide item to prevent any further interaction with the candidate.\n                                            $controls.$itemFrame.hide();\n                                            self.timeout();\n                                        } else {\n                                            lastDates[timerIndex] = new Date();\n                                        }\n\n                                        var warning = _.findLast(cst.warnings, { showed: false });\n\n                                        if (!_.isEmpty(warning) && _.isFinite(warning.point) && currentTimes[timerIndex] <= warning.point) {\n                                            self.timeWarning(cst, warning);\n                                        }\n\n                                    }, 1000);\n                                }(timerIndex, cst));\n                            }\n                        }\n\n                        $timers = $controls.$timerWrapper.find('.qti-timer .qti-timer_time');\n                        $controls.$timerWrapper.show();\n                    }\n                }\n            },\n\n            /**\n             * Mark appropriate timer by warning colors and show feedback message\n             *\n             * @param {object} cst - Time constraint\n             * @param {integer} cst.warningTime - Warning time in seconds.\n             * @param {integer} cst.qtiClassName - Class name of qti instance for which the timer is set (assessmentItemRef | assessmentSection | testPart | assessmentTest).\n             * @param {integer} cst.seconds - Initial timer value.\n             * @param {object} warning - Current actual warning\n             * @param {integer} warning.point - Warning time point in seconds, when show message\n             * @param {boolean} warning.showed - boolean flag for mark already showed warnings\n             * @param {string} warning.type - type of warning (from config), can be info, warning or error\n             *\n             * @returns {undefined}\n             */\n            timeWarning: function (cst, warning) {\n                var message = '',\n                    remaining,\n                    $timer = $controls.$timerWrapper.find('.qti-timer__type-' + cst.qtiClassName),\n                    $time = $timer.find('.qti-timer_time');\n\n                $time.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\n\n                remaining = moment.duration(warning.point, \"seconds\").humanize();\n\n                switch (cst.qtiClassName) {\n                    case 'assessmentItemRef':\n                        message = __(\"Warning – You have %s remaining to complete this item.\", remaining);\n                        break;\n                    case 'assessmentSection':\n                        message = __(\"Warning – You have %s remaining to complete this section.\", remaining);\n                        break;\n                    case 'testPart':\n                        message = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\n                        break;\n                    case 'assessmentTest':\n                        message = __(\"Warning – You have %s remaining to complete the test.\", remaining);\n                        break;\n                }\n\n                feedback()[warning.type](message);\n\n                cst.warnings[warning.point].showed = true;\n            },\n\n            /**\n             * Displays or hides the rubric block\n             */\n            updateRubrics: function () {\n                $controls.$rubricBlocks.remove();\n\n                if (this.testContext.rubrics.length > 0) {\n\n                    $controls.$rubricBlocks = $('<div id=\"qti-rubrics\"/>');\n\n                    for (var i = 0; i < this.testContext.rubrics.length; i++) {\n                        $controls.$rubricBlocks.append(this.testContext.rubrics[i]);\n                    }\n\n                    // modify the <a> tags in order to be sure it\n                    // opens in another window.\n                    $controls.$rubricBlocks.find('a').bind('click keypress', function () {\n                        window.open(this.href);\n                        return false;\n                    });\n\n                    $controls.$rubricBlocks.prependTo($controls.$contentBox);\n\n                    if (MathJax) {\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $controls.$rubricBlocks[0]);\n                    }\n\n                }\n            },\n\n            /**\n             * Updates the list of navigation buttons (previous, next, skip, etc.)\n             */\n            updateNavigation: function () {\n                $controls.$exit.show();\n\n                if(this.testContext.isLast === true) {\n                    $controls.$moveForward.hide();\n                    $controls.$moveEnd.show();\n                }\n                else {\n                    $controls.$moveForward.show();\n                    $controls.$moveEnd.hide();\n                }\n                if (this.testContext.navigationMode === this.TEST_NAVIGATION_LINEAR) {\n                    // LINEAR\n                    $controls.$moveBackward.hide();\n                }\n                else {\n                    // NONLINEAR\n                    $controls.$controls.show();\n                    if(this.testContext.canMoveBackward === true) {\n                        $controls.$moveBackward.show();\n                    }\n                    else {\n                        $controls.$moveBackward.hide();\n                    }\n                }\n            },\n\n            /**\n             * Updates the test taker review screen\n             */\n            updateTestReview: function() {\n                var considerProgress = this.testContext.considerProgress === true;\n\n                if (this.testReview) {\n                    this.testReview.toggle(considerProgress && this.hasOption(optionReviewScreen));\n                    this.testReview.update(this.testContext);\n                }\n            },\n\n            /**\n             * Updates the progress bar\n             */\n            updateProgress: function () {\n                var considerProgress = this.testContext.considerProgress === true;\n\n                $controls.$progressBox.css('visibility', considerProgress ? 'visible' : 'hidden');\n\n                if (considerProgress) {\n                    this.progressUpdater.update(this.testContext);\n                }\n            },\n\n            /**\n             * Updates the test informations\n             */\n            updateContext: function () {\n\n                $controls.$title.text(this.testContext.testTitle);\n\n                // Visibility of section?\n                var sectionText = (this.testContext.isDeepestSectionVisible === true) ? (' - ' + this.testContext.sectionTitle) : '';\n\n                $controls.$position.text(sectionText);\n                $controls.$titleGroup.show();\n            },\n\n            /**\n             * Displays the right exit button\n             */\n            updateExitButton : function(){\n\n                $controls.$logout.toggleClass('hidden', !this.testContext.logoutButton);\n                $controls.$exit.toggleClass('hidden', !this.testContext.exitButton);\n            },\n\n            /**\n             * Ensures the frame has the right size\n             */\n            adjustFrame: function () {\n                var rubricHeight = $controls.$rubricBlocks.outerHeight(true) || 0;\n                var frameContentHeight;\n                var finalHeight = $(window).innerHeight() - $controls.$topActionBar.outerHeight() - $controls.$bottomActionBar.outerHeight();\n                var itemFrame = $controls.$itemFrame.get(0);\n                $controls.$contentBox.height(finalHeight);\n                if($controls.$sideBars.length){\n                    $controls.$sideBars.each(function() {\n                        var $sideBar = $(this);\n                        $sideBar.height(finalHeight - $sideBar.outerHeight() + $sideBar.height());\n                    });\n                }\n\n                if(itemFrame && itemFrame.contentWindow){\n                    frameContentHeight = $controls.$itemFrame.contents().outerHeight(true);\n\n                    if (frameContentHeight < finalHeight) {\n                        if (rubricHeight) {\n                            frameContentHeight = Math.max(frameContentHeight, finalHeight - rubricHeight);\n                        } else {\n                            frameContentHeight = finalHeight;\n                        }\n                    }\n                    if (itemFrame.contentWindow.$) {\n                        itemFrame.contentWindow.$('body').trigger('setheight', [frameContentHeight]);\n                    }\n                    $controls.$itemFrame.height(frameContentHeight);\n                }\n            },\n\n            /**\n             * Locks the GUI\n             */\n            disableGui: function () {\n                $controls.$naviButtons.addClass('disabled');\n                if (this.testReview) {\n                    this.testReview.disable();\n                }\n            },\n\n            /**\n             * Unlocks the GUI\n             */\n            enableGui: function () {\n                $controls.$naviButtons.removeClass('disabled');\n                if (this.testReview) {\n                    this.testReview.enable();\n                }\n            },\n\n            /**\n             * Hides the GUI\n             */\n            hideGui: function () {\n                $controls.$naviButtons.addClass('hidden');\n                if (this.testReview) {\n                    this.testReview.hide();\n                }\n            },\n\n            /**\n             * Shows the GUI\n             */\n            showGui: function () {\n                $controls.$naviButtons.removeClass('hidden');\n                if (this.testReview) {\n                    this.testReview.show();\n                }\n            },\n\n            /**\n             * Formats a timer\n             * @param {Number} totalSeconds\n             * @returns {String}\n             */\n            formatTime: function (totalSeconds) {\n                var sec_num = totalSeconds;\n                var hours = Math.floor(sec_num / 3600);\n                var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n                var seconds = Math.floor(sec_num - (hours * 3600) - (minutes * 60));\n\n                if (hours < 10) {\n                    hours = \"0\" + hours;\n                }\n                if (minutes < 10) {\n                    minutes = \"0\" + minutes;\n                }\n                if (seconds < 10) {\n                    seconds = \"0\" + seconds;\n                }\n\n                var time = hours + ':' + minutes + ':' + seconds;\n\n                return time;\n            },\n\n            /**\n             * Processes an error\n             * @param {Object} error\n             */\n            processError : function processError(error) {\n                var self = this;\n\n                // keep disabled\n                this.hideGui();\n                this.beforeTransition();\n\n                // ask the parent to display a message\n                iframeNotifier.parent('messagealert', {\n                    message : error.message,\n                    action : function() {\n                        if (testMetaData) {\n                            testMetaData.clearData();\n                        }\n                        if (error.state === self.TEST_STATE_CLOSED) {\n                            // test is closed, finish it\n                            self.serviceApi.finish();\n                        } else {\n                            // test is still open, just exit to the index\n                            self.serviceApi.exit();\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Call action specified in testContext. A postfix <i>Url</i> will be added to the action name.\n             * To specify actions see {@link https://github.com/oat-sa/extension-tao-testqti/blob/master/helpers/class.TestRunnerUtils.php}\n             * @param {String} action - Action name\n             * @param {Object} [extraParams] - Additional parameters to be sent to the server\n             * @returns {undefined}\n             */\n            actionCall: function (action, extraParams) {\n                var self = this,\n                    params = {metaData: testMetaData ? testMetaData.getData() : {}};\n\n                if (extraParams) {\n                    params = _.assign(params, extraParams);\n                }\n                this.beforeTransition(function () {\n                    $.ajax({\n                        url: self.testContext[action + 'Url'],\n                        cache: false,\n                        data: params,\n                        async: true,\n                        dataType: 'json',\n                        success: function (testContext) {\n                            testMetaData.clearData();\n\n                            if (!testContext.success) {\n                                self.processError(testContext);\n                            }\n                            else if (testContext.state === self.TEST_STATE_CLOSED) {\n                                self.serviceApi.finish();\n                            }\n                            else {\n                                self.update(testContext);\n                            }\n                        }\n                    });\n                });\n            },\n\n            /**\n             * Exit from test (after confirmation). All answered questions will be submitted.\n             *\n             * @returns {undefined}\n             */\n            exit: function () {\n                var self = this;\n                testMetaData.addData({\n                    \"TEST\" : {\"TEST_EXIT_CODE\" : testMetaData.TEST_EXIT_CODE.INCOMPLETE},\n                    \"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.QUIT}\n                });\n                this.displayExitMessage(\n                    __('Are you sure you want to end the test?'),\n                    function() {\n                    self.killItemSession(function () {\n                        self.actionCall('endTestSession');\n                        testMetaData.clearData();\n                    });\n                    },\n                    { scope: this.testReview ? this.testContext.reviewScope : null }\n                );\n            },\n\n            /**\n             * Set the state of the current item in the test runner\n             *\n             * @param {string} id\n             * @param {object} state\n             */\n            setCurrentItemState : function(id, state){\n                if(id){\n                    this.currentItemState[id] = state;\n                }\n            },\n\n            /**\n             * Reset the state of the current item in the test runner\n             */\n            resetCurrentItemState : function(){\n                this.currentItemState = {};\n            },\n\n            /**\n             * Get the state of the current item as stored in the test runner\n             * @returns {Object}\n             */\n            getCurrentItemState : function(){\n                return this.currentItemState;\n            }\n        };\n\n        var config = module.config();\n        if (config) {\n            actionBarTools.register(config.qtiTools);\n        }\n\n        return {\n            start: function (testContext) {\n\n                $controls = {\n                    // navigation\n                    $moveForward: $('[data-control=\"move-forward\"]'),\n                    $moveEnd: $('[data-control=\"move-end\"]'),\n                    $moveBackward: $('[data-control=\"move-backward\"]'),\n                    $nextSection: $('[data-control=\"next-section\"]'),\n                    $skip: $('[data-control=\"skip\"]'),\n                    $skipEnd: $('[data-control=\"skip-end\"]'),\n                    $exit: $(window.parent.document).find('[data-control=\"exit\"]'),\n                    $logout: $(window.parent.document).find('[data-control=\"logout\"]'),\n                    $naviButtons: $('.bottom-action-bar .action'),\n                    $skipButtons: $('.navi-box .skip'),\n                    $forwardButtons: $('.navi-box .forward'),\n\n                    // progress bar\n                    $progressBar: $('[data-control=\"progress-bar\"]'),\n                    $progressLabel: $('[data-control=\"progress-label\"]'),\n                    $progressBox: $('.progress-box'),\n\n                    // title\n                    $title:  $('[data-control=\"qti-test-title\"]'),\n                    $position:  $('[data-control=\"qti-test-position\"]'),\n\n                    // timers\n                    $timerWrapper:  $('[data-control=\"qti-timers\"]'),\n\n                    // other zones\n                    $contentPanel: $('.content-panel'),\n                    $controls: $('.qti-controls'),\n                    $itemFrame: $('#qti-item'),\n                    $rubricBlocks: $('#qti-rubrics'),\n                    $contentBox: $('#qti-content'),\n                    $sideBars: $('.test-sidebar'),\n                    $topActionBar: $('.horizontal-action-bar.top-action-bar'),\n                    $bottomActionBar: $('.horizontal-action-bar.bottom-action-bar')\n                };\n\n                // title\n                $controls.$titleGroup = $controls.$title.add($controls.$position);\n\n                $doc.ajaxError(function (event, jqxhr) {\n                    if (jqxhr.status === 403) {\n                        iframeNotifier.parent('serviceforbidden');\n                    }\n                });\n\n                window.onServiceApiReady = function onServiceApiReady(serviceApi) {\n                    TestRunner.serviceApi = serviceApi;\n\n                    if (!testContext.success) {\n                        TestRunner.processError(testContext);\n                    }\n\n                    // If the assessment test session is in CLOSED state,\n                    // we give the control to the delivery engine by calling finish.\n                    else if (testContext.state === TestRunner.TEST_STATE_CLOSED) {\n                        serviceApi.finish();\n                        testMetaData.clearData();\n                    }\n                    else {\n\n                        if (TestRunner.getSessionStateService().getDuration()) {\n                            TestRunner.setTestContext(testContext);\n                            TestRunner.initMetadata();\n\n                            TestRunner.keepItemTimed(TestRunner.getSessionStateService().getDuration());\n                            TestRunner.getSessionStateService().restart();\n                        } else {\n                            TestRunner.update(testContext);\n                        }\n                    }\n                };\n\n                TestRunner.beforeTransition();\n                TestRunner.testContext = testContext;\n\n                $controls.$skipButtons.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.skip();\n                    }\n                });\n\n                $controls.$forwardButtons.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.moveForward();\n                    }\n                });\n\n                $controls.$moveBackward.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.moveBackward();\n                    }\n                });\n\n                $controls.$nextSection.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.nextSection();\n                    }\n                });\n\n                $controls.$exit.click(function (e) {\n                    e.preventDefault();\n                    TestRunner.exit();\n                });\n\n                $(window).on('resize', _.throttle(function () {\n                    TestRunner.adjustFrame();\n                    $controls.$titleGroup.show();\n                }, 250));\n\n                $doc.on('loading', function () {\n                    iframeNotifier.parent('loading');\n                });\n\n\n                $doc.on('unloading', function () {\n                    iframeNotifier.parent('unloading');\n                });\n\n                TestRunner.progressUpdater = progressUpdater($controls.$progressBar, $controls.$progressLabel);\n\n                if (testContext.reviewScreen) {\n                    TestRunner.testReview = testReview($controls.$contentPanel, {\n                        region: testContext.reviewRegion || 'left',\n                        hidden: !TestRunner.hasOption(optionReviewScreen),\n                        reviewScope: testContext.reviewScope,\n                        preventsUnseen: !!testContext.reviewPreventsUnseen,\n                        canCollapse: !!testContext.reviewCanCollapse\n                    }).on('jump', function(event, position) {\n                        TestRunner.jump(position);\n                    }).on('mark', function(event, flag, position) {\n                        TestRunner.markForReview(flag, position);\n                    });\n                    $controls.$sideBars = $('.test-sidebar');\n                }\n\n                TestRunner.updateProgress();\n                TestRunner.updateTestReview();\n\n                iframeNotifier.parent('serviceready');\n\n\n                TestRunner.adjustFrame();\n\n                $controls.$topActionBar.add($controls.$bottomActionBar).animate({ opacity: 1 }, 600);\n\n                deleter($('#feedback-box'));\n                modal($('body'));\n\n                //listen to state change in the current item\n                $(document).on('responsechange', function(e, responseId, response){\n                    if(responseId && response){\n                        TestRunner.setCurrentItemState(responseId, {response:response});\n                    }\n                }).on('stateready', function(e, id, state){\n                    if(id && state){\n                        TestRunner.setCurrentItemState(id, state);\n                    }\n                }).on('heightchange', function(e, height) {\n                    $controls.$itemFrame.height(height);\n                });\n\n            }\n        };\n    });\n\n"]}